<?xml version="1.0" encoding="UTF-8" ?>
<class name="Light" inherits="VisualInstance" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Предоставляет базовый класс для различных видов световых(освещения) узлов.
	</brief_description>
	<description>
		Light - это [i]абстрактный[/i] базовый класс для узлов света. Поскольку он не может быть инстансирован, его не следует использовать напрямую. Другие типы световых узлов наследуют от него. Light содержит общие переменные и параметры, используемые для освещения.
	</description>
	<tutorials>
		<link title="3D lights and shadows">$DOCS_URL/tutorials/3d/lights_and_shadows.html</link>
		<link title="Third Person Shooter Demo">https://godotengine.org/asset-library/asset/678</link>
	</tutorials>
	<methods>
		<method name="get_param" qualifiers="const">
			<return type="float" />
			<argument index="0" name="param" type="int" enum="Light.Param" />
			<description>
				Возвращает значение указанного параметра [enum Light.Param].
			</description>
		</method>
		<method name="set_param">
			<return type="void" />
			<argument index="0" name="param" type="int" enum="Light.Param" />
			<argument index="1" name="value" type="float" />
			<description>
				Устанавливает значение указанного параметра [enum Light.Param].
			</description>
		</method>
	</methods>
	<members>
		<member name="editor_only" type="bool" setter="set_editor_only" getter="is_editor_only" default="false">
			Если [code]true[/code], то свет появится только в редакторе и не будет виден во время выполнения.
		</member>
		<member name="light_bake_mode" type="int" setter="set_bake_mode" getter="get_bake_mode" enum="Light.BakeMode" default="1">
			Режим запекания света. См. [enum BakeMode].
		</member>
		<member name="light_color" type="Color" setter="set_color" getter="get_color" default="Color( 1, 1, 1, 1 )">
			Цвет света. Для достижения результата, эквивалентного увеличению [member light_energy], можно использовать [i]сверхъяркий[/i] цвет.
		</member>
		<member name="light_cull_mask" type="int" setter="set_cull_mask" getter="get_cull_mask" default="4294967295">
			Свет повлияет на объекты в выбранных слоях.
		</member>
		<member name="light_energy" type="float" setter="set_param" getter="get_param" default="1.0">
			Множитель силы света (это не физическая единица). Для [OmniLight] и [SpotLight] изменение этого значения изменит только интенсивность цвета света, но не его радиус.
		</member>
		<member name="light_indirect_energy" type="float" setter="set_param" getter="get_param" default="1.0">
			Вторичный множитель, используемый с непрямым светом (свет отражается). Это работает как с [BakedLightmap], так и с [GIProbe].
		</member>
		<member name="light_negative" type="bool" setter="set_negative" getter="is_negative" default="false">
			Если [code]true[/code], эффект света меняется на противоположный, затемняя области и отбрасывая яркие тени.
		</member>
		<member name="light_size" type="float" setter="set_param" getter="get_param" default="0.0">
			Размер света в единицах Годо. Учитывается только в запеченных лайтмапах(Карты освещения) и только если для [member light_bake_mode] установлено значение [constant BAKE_ALL]. При увеличении этого значения тени будут казаться более размытыми. Это может быть использовано для имитации освещения области в некоторой степени.
			[b]Примечание:[/b] [member light_size] не зависит от [member Spatial.scale] (масштаб света или его родителя).
		</member>
		<member name="light_specular" type="float" setter="set_param" getter="get_param" default="0.5">
			Интенсивность спекулярных пятен на объектах, на которые падает свет. При [code]0[/code] свет становится чистым рассеянным светом. Если не печься об эмиссии, этот параметр можно использовать, чтобы избежать нереалистичных отражений при размещении света над излучающей поверхностью.
		</member>
		<member name="shadow_bias" type="float" setter="set_param" getter="get_param" default="0.15">
			Используется для настройки внешнего вида теней. Слишком маленькое значение приводит к самозатенению ("теневые прыщи"), а слишком большое - к отделению теней от кастеров ("peter панорамирование"). Настройте по необходимости.
		</member>
		<member name="shadow_color" type="Color" setter="set_shadow_color" getter="get_shadow_color" default="Color( 0, 0, 0, 1 )">
			Цвет теней, отбрасываемых данным светом.
		</member>
		<member name="shadow_contact" type="float" setter="set_param" getter="get_param" default="0.0">
			Попытка уменьшить разрыв [member shadow_bias] путем отрисовки контактных теней в пространстве экрана. Это влияет на производительность, особенно при больших значениях.
			[b]Примечание:[/b] Тени от контактов могут выглядеть изломанными, поэтому рекомендуется оставить значение этого свойства равным [code]0.0[/code].
		</member>
		<member name="shadow_enabled" type="bool" setter="set_shadow" getter="has_shadow" default="false">
			Если [code]true[/code], свет будет отбрасывать тени.
		</member>
		<member name="shadow_reverse_cull_face" type="bool" setter="set_shadow_reverse_cull_face" getter="get_shadow_reverse_cull_face" default="false">
			Если [code]true[/code], изменяет на противоположный режим обводки сетки. Это может быть полезно, если у вас плоская сетка, за которой находится свет. Если вам нужно отбрасывать тень на обе стороны сетки, настройте сетку на использование двусторонних теней с помощью [константы GeometryInstance.SHADOW_CASTING_SETTING_DOUBLE_SIDED].
		</member>
	</members>
	<constants>
		<constant name="PARAM_ENERGY" value="0" enum="Param">
			Константа для доступа к [member light_energy].
		</constant>
		<constant name="PARAM_INDIRECT_ENERGY" value="1" enum="Param">
			Константа для доступа к [member light_indirect_energy].
		</constant>
		<constant name="PARAM_SIZE" value="2" enum="Param">
			Константа для доступа к [member light_size].
		</constant>
		<constant name="PARAM_SPECULAR" value="3" enum="Param">
			Константа для доступа к [member light_specular].
		</constant>
		<constant name="PARAM_RANGE" value="4" enum="Param">
			Константа для доступа к [member OmniLight.omni_range] или [member SpotLight.spot_range].
		</constant>
		<constant name="PARAM_ATTENUATION" value="5" enum="Param">
			Константа для доступа к [member OmniLight.omni_attenuation] или [member SpotLight.spot_attenuation].
		</constant>
		<constant name="PARAM_SPOT_ANGLE" value="6" enum="Param">
			Константа для доступа к [member SpotLight.spot_angle].
		</constant>
		<constant name="PARAM_SPOT_ATTENUATION" value="7" enum="Param">
			Константа для доступа к [члену SpotLight.spot_angle_attenuation].
		</constant>
		<constant name="PARAM_CONTACT_SHADOW_SIZE" value="8" enum="Param">
			Постоянный доступ к [member shadow_contact].
		</constant>
		<constant name="PARAM_SHADOW_MAX_DISTANCE" value="9" enum="Param">
			Константа для доступа к [member DirectionalLight.directional_shadow_max_distance].
		</constant>
		<constant name="PARAM_SHADOW_SPLIT_1_OFFSET" value="10" enum="Param">
			Константа для доступа к [member DirectionalLight.directional_shadow_split_1].
		</constant>
		<constant name="PARAM_SHADOW_SPLIT_2_OFFSET" value="11" enum="Param">
			Константа для доступа к [member DirectionalLight.directional_shadow_split_2].
		</constant>
		<constant name="PARAM_SHADOW_SPLIT_3_OFFSET" value="12" enum="Param">
			Константа для доступа к [member DirectionalLight.directional_shadow_split_3].
		</constant>
		<constant name="PARAM_SHADOW_NORMAL_BIAS" value="13" enum="Param">
			Константа для доступа к [member DirectionalLight.directional_shadow_normal_bias].
		</constant>
		<constant name="PARAM_SHADOW_BIAS" value="14" enum="Param">
			Константа для доступа к [member shadow_bias].
		</constant>
		<constant name="PARAM_SHADOW_BIAS_SPLIT_SCALE" value="15" enum="Param">
			Константа для доступа к [member DirectionalLight.directional_shadow_bias_split_scale].
		</constant>
		<constant name="PARAM_MAX" value="16" enum="Param">
			Представляет размер перечисления [enum Param].
		</constant>
		<constant name="BAKE_DISABLED" value="0" enum="BakeMode">
			Свет игнорируется при запекании.
			[b]Примечание:[/b] Скрытие света [i]не[/i] влияет на запекание.
		</constant>
		<constant name="BAKE_INDIRECT" value="1" enum="BakeMode">
			Запекается только непрямое освещение (по умолчанию).
		</constant>
		<constant name="BAKE_ALL" value="2" enum="BakeMode">
			Прямой и непрямой свет будет запечен.
			[b]Примечание:[/b] Вам следует скрыть свет, если вы не хотите, чтобы он отображался дважды (динамический и запеченный).
		</constant>
	</constants>
</class>
