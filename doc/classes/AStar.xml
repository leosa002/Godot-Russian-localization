<?xml version="1.0" encoding="UTF-8" ?>
<class name="AStar" inherits="Reference" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Реализация A* для поиска кратчайших путей между связными точками в пространстве.
	</brief_description>
	<description>
		A* (A star) - компьютерный алгоритм, широко используемый для поиска путей и обхода графов, т.е. построения коротких путей между вершинами (точками), проходящих через заданное множество ребер (сегментов). Широкое распространение он получил благодаря своей производительности и точности. Реализация A* в Godot по умолчанию использует точки в трехмерном пространстве и евклидовы расстояния.
		Необходимо вручную добавить точки с помощью [method add_point] и вручную создать сегменты с помощью [method connect_points]. Затем можно проверить наличие пути между двумя точками с помощью функции [method are_points_connected], получить путь, содержащий индексы, с помощью [method get_id_path] или путь, содержащий фактические координаты, с помощью [method get_point_path].
		Также можно использовать неевклидовы расстояния. Для этого создайте класс, расширяющий [code]AStar[/code], и переопределите методы [method _compute_cost] и [method _estimate_cost]. Оба метода принимают два индекса и возвращают длину, как показано в следующем примере.
		[codeblock]
		class MyAStar:
		    extends AStar

		    func _compute_cost(u, v):
		        return abs(u - v)

		    func _estimate_cost(u, v):
		        return min(0, abs(u - v) - 1)
		[/codeblock]
		[method _estimate_cost] должен возвращать нижнюю границу расстояния, т.е. [code]_estimate_cost(u, v) &lt;= _compute_cost(u, v)[/code]. Это служит подсказкой для алгоритма, поскольку пользовательский [code]_compute_cost[/code] может оказаться тяжелым для вычислений. Если это не так, сделайте так, чтобы [method _estimate_cost] возвращал то же значение, что и [method _compute_cost], чтобы предоставить алгоритму наиболее точную информацию.
		Если используются методы по умолчанию [method _estimate_cost] и [method _compute_cost], или если поставляемый метод [method _estimate_cost] возвращает нижнюю границу стоимости, то пути, возвращаемые A*, будут путями с наименьшей стоимостью. Здесь стоимость пути равна сумме результатов [method _compute_cost] всех сегментов пути, умноженной на [code]weight_scale[/code] конечных точек соответствующих сегментов. Если используются методы по умолчанию и [code]weight_scale[/code]s всех точек установлен на [code]1.0[/code], то это равно сумме евклидовых расстояний всех отрезков пути.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_compute_cost" qualifiers="virtual">
			<return type="float" />
			<argument index="0" name="from_id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<description>
				Вызывается при вычислении стоимости между двумя соединенными точками.
				Обратите внимание, что в классе [code]AStar[/code] по умолчанию эта функция скрыта.
			</description>
		</method>
		<method name="_estimate_cost" qualifiers="virtual">
			<return type="float" />
			<argument index="0" name="from_id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<description>
				Вызывается при оценке стоимости пути между точкой и конечной точкой маршрута.
				Обратите внимание, что в классе [code]AStar[/code] по умолчанию эта функция скрыта.
			</description>
		</method>
		<method name="add_point">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="position" type="Vector3" />
			<argument index="2" name="weight_scale" type="float" default="1.0" />
			<description>
				Добавляет новую точку в заданную позицию с заданным идентификатором. [code]id[/code] должен быть 0 или больше, а [code]weight_scale[/code] должен быть 0.0 или больше.
				Значение [code]weight_scale[/code] умножается на результат работы [method _compute_cost] при определении общей стоимости проезда по отрезку от соседней точки до данной точки. Таким образом, при прочих равных условиях алгоритм предпочитает для формирования пути точки с меньшим [code]weight_scale[/code].
				[codeblock]
				var astar = AStar.new()
				astar.add_point(1, Vector3(1, 0, 0), 4) # Добавляет точку (1, 0, 0) с weight_scale 4 и id 1
				[/codeblock]
				Если для заданного [code]id[/code] уже существует точка, то ее положение и весовая шкала обновляются до заданных значений.
			</description>
		</method>
		<method name="are_points_connected" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<argument index="2" name="bidirectional" type="bool" default="true" />
			<description>
				Возвращает, соединены ли две заданные точки отрезком напрямую. Если [code]bidirectional[/code] равно [code]false[/code], то возвращается, возможно ли движение от [code]id[/code] к [code]to_id[/code] через данный отрезок.
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Очищает все точки и сегменты.
			</description>
		</method>
		<method name="connect_points">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<argument index="2" name="bidirectional" type="bool" default="true" />
			<description>
				Создает отрезок между заданными точками. Если [code]bidirectional[/code] имеет значение [code]false[/code], то разрешено только движение от [code]id[/code] к [code]to_id[/code], а не в обратном направлении.
				[codeblock]
				var astar = AStar.new()
				astar.add_point(1, Vector3(1, 1, 0))
				astar.add_point(2, Vector3(0, 5, 0))
				astar.connect_points(1, 2, false)
				[/codeblock]
			</description>
		</method>
		<method name="disconnect_points">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<argument index="2" name="bidirectional" type="bool" default="true" />
			<description>
				Удаляет отрезок между заданными точками. Если [code]bidirectional[/code] имеет значение [code]false[/code], то предотвращается только движение от [code]id[/code] к [code]to_id[/code], а однонаправленный сегмент, возможно, остается.
			</description>
		</method>
		<method name="get_available_point_id" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает следующий доступный идентификатор точки, с которой не связано ни одной точки.
			</description>
		</method>
		<method name="get_closest_point" qualifiers="const">
			<return type="int" />
			<argument index="0" name="to_position" type="Vector3" />
			<argument index="1" name="include_disabled" type="bool" default="false" />
			<description>
				Возвращает идентификатор ближайшей точки к [code]to_position[/code], опционально учитывая отключенные точки. Возвращает [code]-1[/code], если в пуле точек нет.
				[b]Примечание:[/b] Если несколько точек находятся ближе всего к [code]to_position[/code], то возвращается точка с наименьшим ID, что обеспечивает детерминированный результат.
			</description>
		</method>
		<method name="get_closest_position_in_segment" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="to_position" type="Vector3" />
			<description>
				Возвращает ближайшую к [code]to_position[/code] позицию, находящуюся внутри отрезка между двумя соединенными точками.
				[codeblock]
				var astar = AStar.new()
				astar.add_point(1, Vector3(0, 0, 0))
				astar.add_point(2, Vector3(0, 5, 0))
				astar.connect_points(1, 2)
				var res = astar.get_closest_position_in_segment(Vector3(3, 3, 0)) # Возвращает (0, 3, 0)
				[/codeblock]
				Результат находится в сегменте, который идет от [code]y = 0[/code] до [code]y = 5[/code]. Это ближайшая к заданной точке позиция на отрезке.
			</description>
		</method>
		<method name="get_id_path">
			<return type="PoolIntArray" />
			<argument index="0" name="from_id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<description>
				Возвращает массив с идентификаторами точек, образующих путь, найденный AStar между заданными точками. Массив упорядочен от начальной точки до конечной точки пути.
				[codeblock]
				var astar = AStar.new()
				astar.add_point(1, Vector3(0, 0, 0))
				astar.add_point(2, Vector3(0, 1, 0), 1) # Вес по умолчанию равен 1
				astar.add_point(3, Vector3(1, 1, 0))
				astar.add_point(4, Vector3(2, 0, 0))

				astar.connect_points(1, 2, false)
				astar.connect_points(2, 3, false)
				astar.connect_points(4, 3, false)
				astar.connect_points(1, 4, false)

				var res = astar.get_id_path(1, 3) # Возвращает [1, 2, 3]
				[/codeblock]
				Если изменить вес второй точки на 3, то результатом будет [code][1, 4, 3][/code], так как теперь, несмотря на то, что расстояние больше, пройти через точку 4 "легче", чем через точку 2.
			</description>
		</method>
		<method name="get_point_capacity" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает емкость структуры, резервирующей точки, что полезно в сочетании с [code]reserve_space[/code].
			</description>
		</method>
		<method name="get_point_connections">
			<return type="PoolIntArray" />
			<argument index="0" name="id" type="int" />
			<description>
				Возвращает массив с идентификаторами точек, образующих соединение с заданной точкой.
				[codeblock]
				var astar = AStar.new()
				astar.add_point(1, Vector3(0, 0, 0))
				astar.add_point(2, Vector3(0, 1, 0))
				astar.add_point(3, Vector3(1, 1, 0))
				astar.add_point(4, Vector3(2, 0, 0))

				astar.connect_points(1, 2, true)
				astar.connect_points(1, 3, true)

				var neighbors = astar.get_point_connections(1) # Возвращает [2, 3]
				[/codeblock]
			</description>
		</method>
		<method name="get_point_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество очков, находящихся в данный момент в пуле очков.
			</description>
		</method>
		<method name="get_point_path">
			<return type="PoolVector3Array" />
			<argument index="0" name="from_id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<description>
				Возвращает массив с точками, которые находятся на пути, найденном AStar между заданными точками. Массив упорядочен от начальной точки до конечной точки пути.
				[b]Примечание:[/b] Этот метод не является потокобезопасным. Если его вызвать из [Thread], то он вернет пустой [PoolVector3Array] и выведет сообщение об ошибке.
			</description>
		</method>
		<method name="get_point_position" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="id" type="int" />
			<description>
				Возвращает положение точки, связанной с заданным [code]id[/code].
			</description>
		</method>
		<method name="get_point_weight_scale" qualifiers="const">
			<return type="float" />
			<argument index="0" name="id" type="int" />
			<description>
				Возвращает весовую шкалу точки, связанной с заданным [code]id[/code].
			</description>
		</method>
		<method name="get_points">
			<return type="Array" />
			<description>
				Возвращает массив всех точек.
			</description>
		</method>
		<method name="has_point" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="id" type="int" />
			<description>
				Возвращает, существует ли точка, связанная с заданным [code]id[/code].
			</description>
		</method>
		<method name="is_point_disabled" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="id" type="int" />
			<description>
				Возвращает, отключена или нет точка для поиска пути. По умолчанию все точки включены.
			</description>
		</method>
		<method name="remove_point">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<description>
				Удаляет точку, связанную с заданным [code]id[/code], из пула точек.
			</description>
		</method>
		<method name="reserve_space">
			<return type="void" />
			<argument index="0" name="num_nodes" type="int" />
			<description>
				Резервирует внутреннее пространство для [code]num_nodes[/code] точек, что полезно при одновременном добавлении заведомо большого количества точек, например, для сетки. Новая емкость должна быть больше или равна старой.
			</description>
		</method>
		<method name="set_point_disabled">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="disabled" type="bool" default="true" />
			<description>
				Отключает или включает указанную точку для поиска пути. Полезно для создания временного препятствия.
			</description>
		</method>
		<method name="set_point_position">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="position" type="Vector3" />
			<description>
				Устанавливает [code]position[/code] для точки с заданным [code]id[/code].
			</description>
		</method>
		<method name="set_point_weight_scale">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="weight_scale" type="float" />
			<description>
				Устанавливает [code]weight_scale[/code] для точки с заданным [code]id[/code]. [code]weight_scale[/code] умножается на результат работы [method _compute_cost] при определении общей стоимости проезда по отрезку от соседней точки до этой точки.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
