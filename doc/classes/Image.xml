<?xml version="1.0" encoding="UTF-8" ?>
<class name="Image" inherits="Resource" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Тип данных изображения.
	</brief_description>
	<description>
		Родной тип данных изображения. Содержит данные изображения, которые могут быть преобразованы в [ImageTexture], и предоставляет широко используемые методы [i]обработки изображений[/i]. Максимальные ширина и высота [Image] равны [constant MAX_WIDTH] и [constant MAX_HEIGHT].
		Изображение [Image] не может быть присвоено свойству [code]texture[/code] объекта напрямую (например, [Sprite]), его необходимо сначала вручную преобразовать в [ImageTexture].
		[b]Примечание:[/b] Максимальный размер изображения составляет 16384×16384 пикселей из-за ограничений графического оборудования. Более крупные изображения могут не импортироваться.
	</description>
	<tutorials>
		<link title="Importing images">$DOCS_URL/tutorials/assets_pipeline/importing_images.html</link>
	</tutorials>
	<methods>
		<method name="blend_rect">
			<return type="void" />
			<argument index="0" name="src" type="Image" />
			<argument index="1" name="src_rect" type="Rect2" />
			<argument index="2" name="dst" type="Vector2" />
			<description>
				Альфа-смешивание [code]src_rect[/code] с изображения [code]src[/code] на это изображение в координатах [code]dest[/code], обрезанных соответствующим образом по границам обоих изображений. Это изображение и изображение [code]src[/code] [b]должны[/b] иметь одинаковый формат. [code]src_rect[/code] с неположительным размером считается пустым.
			</description>
		</method>
		<method name="blend_rect_mask">
			<return type="void" />
			<argument index="0" name="src" type="Image" />
			<argument index="1" name="mask" type="Image" />
			<argument index="2" name="src_rect" type="Rect2" />
			<argument index="3" name="dst" type="Vector2" />
			<description>
				Альфа-смешивание [code]src_rect[/code] из изображения [code]src[/code] с этим изображением, используя изображение [code]mask[/code] в координатах [code]dst[/code], обрезанное соответствующим образом по границам обоих изображений. Альфа-каналы необходимы как для [code]src[/code], так и для [code]mask[/code]. Пиксели [code]dst[/code] и [code]src[/code] будут смешиваться, если альфа-значение соответствующего пикселя маски не равно 0. Это изображение и изображение [code]src[/code] [b]должны[/b] иметь одинаковый формат. Изображение [code]src[/code] и изображение [code]mask[/code] [b]должны[/b] иметь одинаковый размер (ширину и высоту), но могут иметь разные форматы. [code]src_rect[/code] с неположительным размером считается пустым.
			</description>
		</method>
		<method name="blit_rect">
			<return type="void" />
			<argument index="0" name="src" type="Image" />
			<argument index="1" name="src_rect" type="Rect2" />
			<argument index="2" name="dst" type="Vector2" />
			<description>
				Копирует [code]src_rect[/code] из изображения [code]src[/code] в это изображение по координатам [code]dst[/code], обрезая соответствующим образом границы обоих изображений. Это изображение и изображение [code]src[/code] [b]должны[/b] иметь одинаковый формат. [code]src_rect[/code] с неположительным размером считается пустым.
			</description>
		</method>
		<method name="blit_rect_mask">
			<return type="void" />
			<argument index="0" name="src" type="Image" />
			<argument index="1" name="mask" type="Image" />
			<argument index="2" name="src_rect" type="Rect2" />
			<argument index="3" name="dst" type="Vector2" />
			<description>
				Перемещает область [code]src_rect[/code] с изображения [code]src[/code] на это изображение в координатах, заданных [code]dst[/code], обрезая их соответственно границам обоих изображений. Пиксель [code]src[/code] копируется на [code]dst[/code], если альфа-значение соответствующего пикселя [code]mask[/code] не равно 0. Это изображение и изображение [code]src[/code] [b]должны[/b] иметь одинаковый формат. Изображение [code]src[/code] и изображение [code]mask[/code] [b]должны[/b] иметь одинаковый размер (ширину и высоту), но могут иметь разные форматы. [code]src_rect[/code] с неположительным размером считается пустым.
			</description>
		</method>
		<method name="bumpmap_to_normalmap">
			<return type="void" />
			<argument index="0" name="bump_scale" type="float" default="1.0" />
			<description>
				Преобразует карту неровностей в карту нормалей. Бампмап предоставляет смещение по высоте на пиксель, а нормальная карта - направление нормали на пиксель.
			</description>
		</method>
		<method name="clear_mipmaps">
			<return type="void" />
			<description>
				Удаляет мипмапы изображения.
			</description>
		</method>
		<method name="compress">
			<return type="int" enum="Error" />
			<argument index="0" name="mode" type="int" enum="Image.CompressMode" />
			<argument index="1" name="source" type="int" enum="Image.CompressSource" />
			<argument index="2" name="lossy_quality" type="float" />
			<description>
				Сжимает изображение, чтобы использовать меньше памяти. Невозможно получить прямой доступ к пиксельным данным, пока изображение сжато. Возвращает ошибку, если выбранный режим сжатия недоступен. См. константы [enum CompressMode] и [enum CompressSource].
			</description>
		</method>
		<method name="convert">
			<return type="void" />
			<argument index="0" name="format" type="int" enum="Image.Format" />
			<description>
				Преобразует формат изображения. См. константы [enum Format].
			</description>
		</method>
		<method name="copy_from">
			<return type="void" />
			<argument index="0" name="src" type="Image" />
			<description>
				Копирует [code]src[/code] изображение в это изображение.
			</description>
		</method>
		<method name="create">
			<return type="void" />
			<argument index="0" name="width" type="int" />
			<argument index="1" name="height" type="int" />
			<argument index="2" name="use_mipmaps" type="bool" />
			<argument index="3" name="format" type="int" enum="Image.Format" />
			<description>
				Создает пустое изображение заданного размера и формата. См. константы [enum Format]. Если [code]use_mipmaps[/code] равно [code]true[/code], то генерирует mipmaps для этого изображения. Смотрите [метод generate_mipmaps].
			</description>
		</method>
		<method name="create_from_data">
			<return type="void" />
			<argument index="0" name="width" type="int" />
			<argument index="1" name="height" type="int" />
			<argument index="2" name="use_mipmaps" type="bool" />
			<argument index="3" name="format" type="int" enum="Image.Format" />
			<argument index="4" name="data" type="PoolByteArray" />
			<description>
				Создает новое изображение заданного размера и формата. См. константы [enum Format]. Заполняет изображение заданными исходными данными. Если [code]use_mipmaps[/code] равно [code]true[/code], то загружает mipmaps для этого изображения из [code]data[/code]. Смотрите [метод generate_mipmaps].
			</description>
		</method>
		<method name="crop">
			<return type="void" />
			<argument index="0" name="width" type="int" />
			<argument index="1" name="height" type="int" />
			<description>
				Обрезает изображение до заданных [code]ширины[/code] и [code]высоты[/code]. Если указанный размер больше текущего, дополнительная область заполняется черными пикселями.
			</description>
		</method>
		<method name="decompress">
			<return type="int" enum="Error" />
			<description>
				Декомпрессирует изображение, если оно сжато. Возвращает ошибку, если функция decompress недоступна.
			</description>
		</method>
		<method name="detect_alpha" qualifiers="const">
			<return type="int" enum="Image.AlphaMode" />
			<description>
				Возвращает [константу ALPHA_BLEND], если в изображении есть данные для альфа-значений. Возвращает [константа ALPHA_BIT], если все альфа-значения хранятся в одном бите. Возвращает [константа ALPHA_NONE], если данные для альфа-значений не найдены.
			</description>
		</method>
		<method name="expand_x2_hq2x">
			<return type="void" />
			<description>
				Растягивает изображение и увеличивает его в 2 раза. Интерполяция не производится.
			</description>
		</method>
		<method name="fill">
			<return type="void" />
			<argument index="0" name="color" type="Color" />
			<description>
				Заливает изображение [code]цветом[/code].
			</description>
		</method>
		<method name="fill_rect">
			<return type="void" />
			<argument index="0" name="rect" type="Rect2" />
			<argument index="1" name="color" type="Color" />
			<description>
				Заливает [code]rect[/code] цветом [code]color[/code].
			</description>
		</method>
		<method name="fix_alpha_edges">
			<return type="void" />
			<description>
				Смешивает пиксели с низким альфа-балансом с соседними пикселями.
			</description>
		</method>
		<method name="flip_x">
			<return type="void" />
			<description>
				Переворачивает изображение по горизонтали.
			</description>
		</method>
		<method name="flip_y">
			<return type="void" />
			<description>
				Переворачивает изображение по вертикали.
			</description>
		</method>
		<method name="generate_mipmaps">
			<return type="int" enum="Error" />
			<argument index="0" name="renormalize" type="bool" default="false" />
			<description>
				Генерирует мипмапы для изображения. Mipmaps - это предварительно вычисленные копии изображения с более низким разрешением, которые автоматически используются, если изображение нужно уменьшить при рендеринге. Они помогают улучшить качество и производительность изображения при рендеринге. Этот метод возвращает ошибку, если изображение сжато, имеет пользовательский формат или если ширина/высота изображения равна [code]0[/code].
				[b]Примечание:[/b] Генерация мипмапов выполняется на процессоре, является однопоточной и [i]всегда[/i] выполняется в главном потоке. Это означает, что генерация мипмапов будет приводить к заметным заиканиям во время игры, даже если [метод generate_mipmaps] вызывается из [Thread].
			</description>
		</method>
		<method name="get_data" qualifiers="const">
			<return type="PoolByteArray" />
			<description>
				Возвращает копию исходных данных изображения.
			</description>
		</method>
		<method name="get_format" qualifiers="const">
			<return type="int" enum="Image.Format" />
			<description>
				Возвращает формат изображения. См. константы [enum Format].
			</description>
		</method>
		<method name="get_height" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает высоту изображения.
			</description>
		</method>
		<method name="get_mipmap_offset" qualifiers="const">
			<return type="int" />
			<argument index="0" name="mipmap" type="int" />
			<description>
				Возвращает смещение, по которому mipmap изображения с индексом [code]mipmap[/code] хранится в словаре [code]data[/code].
			</description>
		</method>
		<method name="get_pixel" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="x" type="int" />
			<argument index="1" name="y" type="int" />
			<description>
				Возвращает цвет пикселя в точке [code](x, y)[/code], если изображение заблокировано. Если изображение разблокировано, то всегда возвращается [Color] со значением [code](0, 0, 0, 1.0)[/code]. Это то же самое, что и [метод get_pixelv], но с двумя целочисленными аргументами вместо аргумента Vector2.
			</description>
		</method>
		<method name="get_pixelv" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="src" type="Vector2" />
			<description>
				Возвращает цвет пикселя по адресу [code]src[/code], если изображение заблокировано. Если изображение разблокировано, то всегда возвращается [Color] со значением [code](0, 0, 0, 1.0)[/code]. Это то же самое, что и [метод get_pixel], но с аргументом Vector2 вместо двух целочисленных аргументов.
			</description>
		</method>
		<method name="get_rect" qualifiers="const">
			<return type="Image" />
			<argument index="0" name="rect" type="Rect2" />
			<description>
				Возвращает новое изображение, которое является копией области изображения, указанной с помощью [code]rect[/code].
			</description>
		</method>
		<method name="get_size" qualifiers="const">
			<return type="Vector2" />
			<description>
				Возвращает размер изображения (ширину и высоту).
			</description>
		</method>
		<method name="get_used_rect" qualifiers="const">
			<return type="Rect2" />
			<description>
				Возвращает [Rect2], заключающий в себе видимую часть изображения, считая видимым каждый пиксель с ненулевым альфа-каналом.
			</description>
		</method>
		<method name="get_width" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает ширину изображения.
			</description>
		</method>
		<method name="has_mipmaps" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если изображение сгенерировало mipmaps.
			</description>
		</method>
		<method name="is_compressed" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если изображение сжато.
			</description>
		</method>
		<method name="is_empty" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если изображение не содержит данных.
			</description>
		</method>
		<method name="is_invisible" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если все пиксели изображения имеют альфа-значение 0. Возвращает [code]false[/code], если любой пиксель имеет альфа-значение больше 0.
			</description>
		</method>
		<method name="load">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Загружает изображение из файла [code]path[/code]. Список поддерживаемых форматов изображений и ограничения см. в [url=$DOCS_URL/tutorials/assets_pipeline/importing_images.html#supported-image-formats]Поддерживаемые форматы изображений[/url].
				[b]Предупреждение:[/b] Этот метод следует использовать только в редакторе или в случаях, когда необходимо загрузить внешние изображения во время выполнения, например изображения, расположенные в директории [code]user://[/code], и может не работать в экспортированных проектах.
				Примеры использования см. также в описании [ImageTexture].
			</description>
		</method>
		<method name="load_bmp_from_buffer">
			<return type="int" enum="Error" />
			<argument index="0" name="buffer" type="PoolByteArray" />
			<description>
				Загружает изображение из двоичного содержимого BMP-файла.
				[b]Примечание:[/b] BMP-модуль Godot не поддерживает 16-битные пиксельные изображения. Поддерживаются только 1-битные, 4-битные, 8-битные, 24-битные и 32-битные пиксельные изображения.
			</description>
		</method>
		<method name="load_jpg_from_buffer">
			<return type="int" enum="Error" />
			<argument index="0" name="buffer" type="PoolByteArray" />
			<description>
				Загружает изображение из двоичного содержимого файла JPEG.
			</description>
		</method>
		<method name="load_png_from_buffer">
			<return type="int" enum="Error" />
			<argument index="0" name="buffer" type="PoolByteArray" />
			<description>
				Загружает изображение из двоичного содержимого файла PNG.
			</description>
		</method>
		<method name="load_tga_from_buffer">
			<return type="int" enum="Error" />
			<argument index="0" name="buffer" type="PoolByteArray" />
			<description>
				Загружает изображение из двоичного содержимого файла TGA.
			</description>
		</method>
		<method name="load_webp_from_buffer">
			<return type="int" enum="Error" />
			<argument index="0" name="buffer" type="PoolByteArray" />
			<description>
				Загружает изображение из двоичного содержимого файла WebP.
			</description>
		</method>
		<method name="lock">
			<return type="void" />
			<description>
				Блокирует данные для доступа на чтение и запись. Отправляет ошибку в консоль, если изображение не заблокировано при чтении или записи пикселя.
			</description>
		</method>
		<method name="normalmap_to_xy">
			<return type="void" />
			<description>
				Преобразует данные изображения для представления координат на 3D-плоскости. Это используется, когда изображение представляет собой карту нормалей. Карта нормалей может добавить много деталей к 3D-поверхности без увеличения количества полигонов.
			</description>
		</method>
		<method name="premultiply_alpha">
			<return type="void" />
			<description>
				Умножает значения цвета на значения альфа. Результирующее значение цвета для пикселя - [code](color * alpha)/256[/code].
			</description>
		</method>
		<method name="resize">
			<return type="void" />
			<argument index="0" name="width" type="int" />
			<argument index="1" name="height" type="int" />
			<argument index="2" name="interpolation" type="int" enum="Image.Interpolation" default="1" />
			<description>
				Изменяет размер изображения до заданных [code]ширины[/code] и [code]высоты[/code]. Новые пиксели вычисляются с использованием режима [code]интерполяции[/code], заданного через константы [enum Interpolation].
			</description>
		</method>
		<method name="resize_to_po2">
			<return type="void" />
			<argument index="0" name="square" type="bool" default="false" />
			<argument index="1" name="interpolation" type="int" enum="Image.Interpolation" default="1" />
			<description>
				Изменяет размер изображения до ближайшей степени 2 для ширины и высоты. Если [code]square[/code] имеет значение [code]true[/code], то ширина и высота должны быть одинаковыми. Новые пиксели вычисляются с использованием режима [code]интерполяции[/code], заданного через константы [enum Interpolation].
			</description>
		</method>
		<method name="rgbe_to_srgb">
			<return type="Image" />
			<description>
				Преобразует стандартное изображение RGBE (Red Green Blue Exponent) в изображение sRGB.
			</description>
		</method>
		<method name="save_exr" qualifiers="const">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="grayscale" type="bool" default="false" />
			<description>
				Сохраняет изображение в виде EXR-файла по [code]пути[/code]. Если [code]grayscale[/code] имеет значение [code]true[/code] и изображение имеет только один канал, оно будет сохранено явно как монохромное, а не с одним красным каналом. Эта функция вернет [константу ERR_UNAVAILABLE], если Godot был скомпилирован без модуля TinyEXR.
				[b]Примечание:[/b] Модуль TinyEXR отключен в сборках без редактора, поэтому [метод save_exr] вернет [константу ERR_UNAVAILABLE] при вызове его из экспортированного проекта.
			</description>
		</method>
		<method name="save_png" qualifiers="const">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Сохраняет изображение в виде PNG-файла по [code]пути[/code].
			</description>
		</method>
		<method name="save_png_to_buffer" qualifiers="const">
			<return type="PoolByteArray" />
			<description>
			</description>
		</method>
		<method name="set_pixel">
			<return type="void" />
			<argument index="0" name="x" type="int" />
			<argument index="1" name="y" type="int" />
			<argument index="2" name="color" type="Color" />
			<description>
				Устанавливает [Color] пикселя в точке [code](x, y)[/code], если изображение заблокировано. Пример:
				[codeblock]
				var img = Image.new()
				img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
				img.lock()
				img.set_pixel(x, y, color) # Работает
				img.unlock()
				img.set_pixel(x, y, color) # Не оказывает эффекта
				[/codeblock]
			</description>
		</method>
		<method name="set_pixelv">
			<return type="void" />
			<argument index="0" name="dst" type="Vector2" />
			<argument index="1" name="color" type="Color" />
			<description>
				Устанавливает [Color] пикселя по адресу [code](dst.x, dst.y)[/code], если изображение заблокировано. Обратите внимание, что значения [code]dst[/code] должны быть целыми числами. Пример:
				[codeblock]
				var img = Image.new()
				img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
				img.lock()
				img.set_pixelv(Vector2(x, y), color) # Работает
				img.unlock()
				img.set_pixelv(Vector2(x, y), color) # Не оказывает эффекта
				[/codeblock]
			</description>
		</method>
		<method name="shrink_x2">
			<return type="void" />
			<description>
				Уменьшает изображение в 2 раза.
			</description>
		</method>
		<method name="srgb_to_linear">
			<return type="void" />
			<description>
				Преобразует исходные данные из цветового пространства sRGB в линейную шкалу.
			</description>
		</method>
		<method name="unlock">
			<return type="void" />
			<description>
				Разблокирует данные и предотвращает их изменение.
			</description>
		</method>
	</methods>
	<members>
		<member name="data" type="Dictionary" setter="_set_data" getter="_get_data" default="{&quot;data&quot;: PoolByteArray(  ),&quot;format&quot;: &quot;Lum8&quot;,&quot;height&quot;: 0,&quot;mipmaps&quot;: false,&quot;width&quot;: 0}">
			Содержит все цветовые данные изображения в заданном формате. См. константы [enum Format].
		</member>
	</members>
	<constants>
		<constant name="MAX_WIDTH" value="16384">
			Максимальная ширина, допустимая для ресурсов [Image].
		</constant>
		<constant name="MAX_HEIGHT" value="16384">
			Максимальная высота, допустимая для ресурсов [Image].
		</constant>
		<constant name="FORMAT_L8" value="0" enum="Format">
			Формат текстуры с одной 8-битной глубиной, представляющей яркость.
		</constant>
		<constant name="FORMAT_LA8" value="1" enum="Format">
			Формат текстур OpenGL с двумя значениями, яркостью и альфой, каждое из которых хранится в 8 битах.
		</constant>
		<constant name="FORMAT_R8" value="2" enum="Format">
			Текстура OpenGL формата [code]RED[/code] с одним компонентом и битовой глубиной 8.
			[b]Примечание:[/b] При использовании бэкенда GLES2 для хранения используется альфа-канал, а не красный канал.
		</constant>
		<constant name="FORMAT_RG8" value="3" enum="Format">
			Формат текстуры OpenGL [code]RG[/code] с двумя компонентами и битовой глубиной 8 для каждого.
		</constant>
		<constant name="FORMAT_RGB8" value="4" enum="Format">
			Текстура OpenGL формата [code]RGB[/code] с тремя компонентами, каждый из которых имеет битовую глубину 8.
			[b]Примечание:[/b] При создании [ImageTexture] выполняется преобразование цветового пространства sRGB в линейное.
		</constant>
		<constant name="FORMAT_RGBA8" value="5" enum="Format">
			Текстура формата OpenGL [code]RGBA[/code] с четырьмя компонентами, каждый из которых имеет битовую глубину 8.
			[b]Примечание:[/b] При создании [ImageTexture] выполняется преобразование цветового пространства sRGB в линейное.
		</constant>
		<constant name="FORMAT_RGBA4444" value="6" enum="Format">
			Формат текстуры OpenGL [code]RGBA[/code] с четырьмя компонентами, каждый из которых имеет битовую глубину 4.
		</constant>
		<constant name="FORMAT_RGBA5551" value="7" enum="Format">
			Формат текстур OpenGL [code]GL_RGB5_A1[/code], в котором 5 бит глубины для каждого компонента RGB и один бит для альфы.
		</constant>
		<constant name="FORMAT_RF" value="8" enum="Format">
			Формат текстур OpenGL [code]GL_R32F[/code], в котором есть один компонент - 32-битное значение с плавающей точкой.
		</constant>
		<constant name="FORMAT_RGF" value="9" enum="Format">
			Формат текстур OpenGL [code]GL_RG32F[/code], в котором есть два компонента, каждый из которых представляет собой 32-битное значение с плавающей точкой.
		</constant>
		<constant name="FORMAT_RGBF" value="10" enum="Format">
			Формат текстур OpenGL [code]GL_RGB32F[/code], в котором есть три компонента, каждый из которых представляет собой 32-битное значение с плавающей точкой.
		</constant>
		<constant name="FORMAT_RGBAF" value="11" enum="Format">
			Формат текстур OpenGL [code]GL_RGBA32F[/code], в котором есть четыре компонента, каждый из которых представляет собой 32-битное значение с плавающей точкой.
		</constant>
		<constant name="FORMAT_RH" value="12" enum="Format">
			Формат текстур OpenGL [code]GL_R32F[/code], в котором есть один компонент - 16-битное значение с плавающей точкой "половинной точности".
		</constant>
		<constant name="FORMAT_RGH" value="13" enum="Format">
			Формат текстур OpenGL [code]GL_RG32F[/code], в котором есть два компонента, каждый из которых представляет собой 16-битное значение с плавающей точкой "половинной точности".
		</constant>
		<constant name="FORMAT_RGBH" value="14" enum="Format">
			Формат текстур OpenGL [code]GL_RGB32F[/code], в котором есть три компонента, каждый из которых представляет собой 16-битное значение с плавающей точкой "половинной точности".
		</constant>
		<constant name="FORMAT_RGBAH" value="15" enum="Format">
			Формат текстур OpenGL [code]GL_RGBA32F[/code], в котором есть четыре компонента, каждый из которых представляет собой 16-битное значение с плавающей точкой "половинной точности".
		</constant>
		<constant name="FORMAT_RGBE9995" value="16" enum="Format">
			Специальный формат текстур OpenGL, в котором три цветовые компоненты имеют точность 9 бит, и все три имеют одну 5-битную экспоненту.
		</constant>
		<constant name="FORMAT_DXT1" value="17" enum="Format">
			Текстурный формат [url=https://en.wikipedia.org/wiki/S3_Texture_Compression]S3TC[/url], использующий блочное сжатие 1, является наименьшей разновидностью S3TC, предоставляя только 1 бит альфы и цветовые данные, предварительно умноженные на альфу.
			[b]Примечание:[/b] При создании [ImageTexture] выполняется преобразование цветового пространства sRGB в линейное.
		</constant>
		<constant name="FORMAT_DXT3" value="18" enum="Format">
			Формат текстур [url=https://en.wikipedia.org/wiki/S3_Texture_Compression]S3TC[/url], в котором используется блочное сжатие 2, а данные о цвете интерпретируются как не подвергавшиеся предварительному умножению на альфу. Хорошо подходит для изображений с резкими альфа-переходами между полупрозрачными и непрозрачными областями.
			[b]Примечание:[/b] При создании [ImageTexture] выполняется преобразование цветового пространства sRGB в линейное.
		</constant>
		<constant name="FORMAT_DXT5" value="19" enum="Format">
			Формат текстур [url=https://en.wikipedia.org/wiki/S3_Texture_Compression]S3TC[/url], также известный как Block Compression 3 или BC3, содержит 64 бита данных альфа-канала, за которыми следуют 64 бита данных цвета, закодированных в DXT1. Цветные данные не умножаются на альфа-канал, как в DXT3. DXT5 обычно дает лучшие результаты для прозрачных градиентов по сравнению с DXT3.
			[b]Примечание:[/b] При создании [ImageTexture] выполняется преобразование sRGB в линейное цветовое пространство.
		</constant>
		<constant name="FORMAT_RGTC_R" value="20" enum="Format">
			Формат текстур, использующий [url=https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression]Red Green Texture Compression[/url], нормализующий данные красного канала с помощью того же алгоритма сжатия, который DXT5 использует для альфа-канала.
		</constant>
		<constant name="FORMAT_RGTC_RG" value="21" enum="Format">
			Формат текстур, использующий [url=https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression]Red Green Texture Compression[/url], нормализующий данные красного и зеленого каналов с помощью того же алгоритма сжатия, который DXT5 использует для альфа-канала.
		</constant>
		<constant name="FORMAT_BPTC_RGBA" value="22" enum="Format">
			Формат текстур, использующий [url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression]BPTC[/url] сжатие с беззнаковыми нормализованными RGBA-компонентами.
			[b]Примечание:[/b] При создании [ImageTexture] выполняется преобразование цветового пространства sRGB в линейное.
		</constant>
		<constant name="FORMAT_BPTC_RGBF" value="23" enum="Format">
			Формат текстур, использующий [url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression]BPTC[/url] сжатие со знаковыми RGB-компонентами с плавающей точкой.
		</constant>
		<constant name="FORMAT_BPTC_RGBFU" value="24" enum="Format">
			Формат текстур, использующий [url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression]BPTC[/url] сжатие с беззнаковыми RGB-компонентами с плавающей точкой.
		</constant>
		<constant name="FORMAT_PVRTC2" value="25" enum="Format">
			Формат текстур, используемый на мобильных платформах с поддержкой PowerVR, использует 2-битную глубину цвета без альфы. Более подробную информацию можно найти [url=https://en.wikipedia.org/wiki/PVRTC]здесь[/url].
			[b]Примечание:[/b] При создании [ImageTexture] выполняется преобразование цветового пространства sRGB в линейное.
		</constant>
		<constant name="FORMAT_PVRTC2A" value="26" enum="Format">
			То же, что и [url=https://en.wikipedia.org/wiki/PVRTC]PVRTC2[/url], но с альфа-компонентом.
		</constant>
		<constant name="FORMAT_PVRTC4" value="27" enum="Format">
			Аналогичен [url=https://en.wikipedia.org/wiki/PVRTC]PVRTC2[/url], но с 4-битной глубиной цвета и без альфы.
		</constant>
		<constant name="FORMAT_PVRTC4A" value="28" enum="Format">
			То же, что и [url=https://en.wikipedia.org/wiki/PVRTC]PVRTC4[/url], но с альфа-компонентом.
		</constant>
		<constant name="FORMAT_ETC" value="29" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC1]Ericsson Texture Compression format 1[/url], также называемый "ETC1", и является частью графического стандарта OpenGL ES. Этот формат не может хранить альфа-канал.
		</constant>
		<constant name="FORMAT_ETC2_R11" value="30" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] (вариант [code]R11_EAC[/code]), который обеспечивает один канал беззнаковых данных.
		</constant>
		<constant name="FORMAT_ETC2_R11S" value="31" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] (вариант [code]SIGNED_R11_EAC[/code]), который обеспечивает один канал подписанных данных.
		</constant>
		<constant name="FORMAT_ETC2_RG11" value="32" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] (вариант [code]RG11_EAC[/code]), который обеспечивает два канала беззнаковых данных.
		</constant>
		<constant name="FORMAT_ETC2_RG11S" value="33" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] (вариант [code]SIGNED_RG11_EAC[/code]), который обеспечивает два канала подписанных данных.
		</constant>
		<constant name="FORMAT_ETC2_RGB8" value="34" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]RGB8[/code] вариант), который является продолжением ETC1 и сжимает данные RGB888.
			[b]Примечание:[/b] При создании [ImageTexture] выполняется преобразование цветового пространства sRGB в линейное.
		</constant>
		<constant name="FORMAT_ETC2_RGBA8" value="35" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]RGBA8[/code]вариант), который сжимает данные RGBA8888 с полной поддержкой альфы.
			[b]Примечание:[/b] При создании [ImageTexture] выполняется преобразование цветового пространства sRGB в линейное.
		</constant>
		<constant name="FORMAT_ETC2_RGB8A1" value="36" enum="Format">
			[url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC]Ericsson Texture Compression format 2[/url] ([code]RGB8_PUNCHTHROUGH_ALPHA1[/code] вариант), который сжимает RGBA-данные, чтобы сделать альфу либо полностью прозрачной, либо полностью непрозрачной.
			[b]Примечание:[/b] При создании [ImageTexture] выполняется преобразование цветового пространства sRGB в линейное.
		</constant>
		<constant name="FORMAT_MAX" value="37" enum="Format">
			Представляет размер перечисления [enum Format].
		</constant>
		<constant name="INTERPOLATE_NEAREST" value="0" enum="Interpolation">
			Выполняет интерполяцию ближайших соседей. При изменении размера изображения оно будет пикселизировано.
		</constant>
		<constant name="INTERPOLATE_BILINEAR" value="1" enum="Interpolation">
			Выполняет билинейную интерполяцию. При изменении размера изображения оно будет размытым. Этот режим быстрее, чем [constant INTERPOLATE_CUBIC], но его качество ниже.
		</constant>
		<constant name="INTERPOLATE_CUBIC" value="2" enum="Interpolation">
			Выполняет кубическую интерполяцию. При изменении размера изображения оно будет размытым. Этот режим часто дает лучшие результаты по сравнению с [constant INTERPOLATE_BILINEAR], но при этом работает медленнее.
		</constant>
		<constant name="INTERPOLATE_TRILINEAR" value="3" enum="Interpolation">
			Выполняет билинейную раздельную интерполяцию на двух наиболее подходящих уровнях mipmap, а затем линейно интерполирует между ними.
			Это медленнее, чем [constant INTERPOLATE_BILINEAR], но дает более качественные результаты с гораздо меньшим количеством артефактов алиасинга.
			Если изображение не имеет мипмапов, они будут сгенерированы и использованы внутренне, но на результирующем изображении мипмапы генерироваться не будут.
			[b]Примечание:[/b] Если вы собираетесь масштабировать несколько копий исходного изображения, лучше вызвать [метод generate_mipmaps]] на нем заранее, чтобы не тратить вычислительную мощность на их генерацию снова и снова.
			С другой стороны, если изображение уже содержит mipmaps, они будут использованы, а для результирующего изображения будет сгенерирован новый набор.
		</constant>
		<constant name="INTERPOLATE_LANCZOS" value="4" enum="Interpolation">
			Выполняет интерполяцию Ланцоша. Это самый медленный режим изменения размера изображения, но он обычно дает наилучшие результаты, особенно при уменьшении изображений.
		</constant>
		<constant name="ALPHA_NONE" value="0" enum="AlphaMode">
			Изображение не имеет альфа-канала.
		</constant>
		<constant name="ALPHA_BIT" value="1" enum="AlphaMode">
			Изображение хранит альфу в одном бите.
		</constant>
		<constant name="ALPHA_BLEND" value="2" enum="AlphaMode">
			Изображение использует альфу.
		</constant>
		<constant name="COMPRESS_S3TC" value="0" enum="CompressMode">
			Используйте сжатие S3TC.
		</constant>
		<constant name="COMPRESS_PVRTC2" value="1" enum="CompressMode">
			Используйте сжатие PVRTC2.
		</constant>
		<constant name="COMPRESS_PVRTC4" value="2" enum="CompressMode">
			Используйте сжатие PVRTC4.
		</constant>
		<constant name="COMPRESS_ETC" value="3" enum="CompressMode">
			Используйте сжатие ETC.
		</constant>
		<constant name="COMPRESS_ETC2" value="4" enum="CompressMode">
			Используйте сжатие ETC2.
		</constant>
		<constant name="COMPRESS_SOURCE_GENERIC" value="0" enum="CompressSource">
			Исходная текстура (до сжатия) - обычная текстура. По умолчанию для всех текстур.
		</constant>
		<constant name="COMPRESS_SOURCE_SRGB" value="1" enum="CompressSource">
			Исходная текстура (до сжатия) находится в пространстве sRGB.
		</constant>
		<constant name="COMPRESS_SOURCE_NORMAL" value="2" enum="CompressSource">
			Исходная текстура (до сжатия) - это обычная текстура (например, она может быть сжата в два канала).
		</constant>
		<constant name="COMPRESS_SOURCE_LAYERED" value="3" enum="CompressSource">
			Исходная текстура (до сжатия) представляет собой [TextureLayered].
		</constant>
	</constants>
</class>
