<?xml version="1.0" encoding="UTF-8" ?>
<class name="Engine" inherits="Object" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Доступ к свойствам Движка.
	</brief_description>
	<description>
		Синглтон [Engine] позволяет запрашивать и изменять параметры времени выполнения проекта, такие как количество кадров в секунду, масштаб времени и другие.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_author_info" qualifiers="const">
			<return type="Dictionary" />
			<description>
				Возвращает информацию об авторе движка в виде словаря.
				[code]lead_developers[/code] - Массив строк, имена ведущих разработчиков
				[code]founders[/code] - Массив строк, имена основателей
				[code]project_managers[/code] - массив строк, имена менеджеров проектов
				[code]developers[/code] - Массив строк, имена разработчиков
			</description>
		</method>
		<method name="get_copyright_info" qualifiers="const">
			<return type="Array" />
			<description>
				Возвращает массив словарей информации об авторских правах.
				[code]name[/code] - Строка, имя компонента.
				[code]parts[/code] - Массив словарей {[code]files[/code], [code]copyright[/code], [code]license[/code]}, описывающих подразделы компонента
			</description>
		</method>
		<method name="get_donor_info" qualifiers="const">
			<return type="Dictionary" />
			<description>
				Возвращает словарь массивов имен Донатеров.
				{[code]platinum_sponsors[/code], [code]gold_sponsors[/code], [code]silver_sponsors[/code], [code]bronze_sponsors[/code], [code]mini_sponsors[/code], [code]gold_donors[/code], [code]silver_donors[/code], [code]bronze_donors[/code]}
			</description>
		</method>
		<method name="get_frames_drawn">
			<return type="int" />
			<description>
				Возвращает общее количество отрисованных кадров. На безголовых платформах или если цикл рендеринга отключен командой [code]--disable-render-loop[/code] через командную строку, [метод get_frames_drawn] всегда возвращает [code]0[/code]. Смотрите [метод get_idle_frames].
			</description>
		</method>
		<method name="get_frames_per_second" qualifiers="const">
			<return type="float" />
			<description>
				Возвращает количество кадров в секунду в беговой игре.
			</description>
		</method>
		<method name="get_idle_frames" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает общее количество кадров, прошедших с момента инициализации движка, которое продвигается на каждом [b]холостом кадре[/b], независимо от того, включен ли цикл рендеринга. См. также [метод get_frames_drawn] и [метод get_physics_frames].
				Метод [method get_idle_frames] можно использовать, чтобы реже запускать дорогостоящую логику, не полагаясь на [Timer]:
				[codeblock]
				func _process(_delta):
				    if Engine.get_idle_frames() % 2 == 0:
				        pass  # Здесь дорогостоящая логика запускается только раз в 2 холостых (рендерных) кадра.
				[/codeblock]
			</description>
		</method>
		<method name="get_license_info" qualifiers="const">
			<return type="Dictionary" />
			<description>
				Возвращает словарь лицензий, используемых Godot и включенными в него компонентами сторонних производителей.
			</description>
		</method>
		<method name="get_license_text" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает текст лицензии Godot.
			</description>
		</method>
		<method name="get_main_loop" qualifiers="const">
			<return type="MainLoop" />
			<description>
				Возвращает объект главного цикла (см. [MainLoop] и [SceneTree]).
			</description>
		</method>
		<method name="get_physics_frames" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает общее количество кадров, прошедших с момента инициализации движка, которое увеличивается на каждом [b]физическом кадре[/b]. См. также [метод get_idle_frames].
				Метод [get_physics_frames] можно использовать, чтобы реже запускать дорогостоящую логику, не полагаясь на [Timer]:
				[codeblock]
				func _physics_process(_delta):
				    if Engine.get_physics_frames() % 2 == 0:
				        pass  # Здесь дорогостоящая логика запускается только раз в 2 кадра физики.
				[/codeblock]
			</description>
		</method>
		<method name="get_physics_interpolation_fraction" qualifiers="const">
			<return type="float" />
			<description>
				Возвращает долю текущего тика физики, на которой мы находимся во время рендеринга кадра. Это может быть использовано для реализации интерполяции с фиксированным временным шагом.
			</description>
		</method>
		<method name="get_singleton" qualifiers="const">
			<return type="Object" />
			<argument index="0" name="name" type="String" />
			<description>
				Возвращает глобальный синглтон с заданным [code]именем[/code]. Часто используется для плагинов, например [code]GodotPayment[/code] на Android.
			</description>
		</method>
		<method name="get_version_info" qualifiers="const">
			<return type="Dictionary" />
			<description>
				Возвращает информацию о текущей версии движка в виде словаря.
				[code]major[/code] - содержит номер основной версии в виде int
				[code]minor[/code] - содержит номер минорной версии в виде int
				[code]patch[/code] - содержит номер версии патча в виде int
				[code]hex[/code] - содержит полный номер версии в шестнадцатеричном формате int с одним байтом (2 места) на число (см. пример ниже)
				[code]status[/code] - Хранит статус (например, "beta", "rc1", "rc2", ... "stable") в виде строки
				[code]build[/code] - Имя сборки (например, "custom_build") в виде строки.
				[code]hash[/code] - хранит полный хэш Git-коммита в виде строки
				[code]year[/code] - хранит год выпуска версии в виде int
				[code]string[/code] - [code]major[/code] + [code]minor[/code] + [code]patch[/code] + [code]status[/code] + [code]build[/code] в одной String
				Значение [code]hex[/code] кодируется следующим образом, слева направо: один байт - мажор, один байт - минор, один байт - версия патча. Например, "3.1.12" будет [code]0x03010C[/code]. [b]Примечание:[/b] Внутри это все еще int, и при печати вы получите его десятичное представление, которое не имеет особого смысла. Для удобства сравнения версий в коде используйте шестнадцатеричные литералы:
				[codeblock]
				if Engine.get_version_info().hex &gt;= 0x030200:
				    # Выполняйте действия, характерные для версии 3.2 или более поздней.
				else:
				    # Выполняйте действия, характерные для версий до 3.2
				[/codeblock]
			</description>
		</method>
		<method name="has_singleton" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="name" type="String" />
			<description>
				Возвращает [code]true[/code], если синглтон с заданным [code]именем[/code] существует в глобальной области видимости.
			</description>
		</method>
		<method name="is_in_physics_frame" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если игра находится внутри фиксированного процесса и фазы физики игрового цикла.
			</description>
		</method>
	</methods>
	<members>
		<member name="editor_hint" type="bool" setter="set_editor_hint" getter="is_editor_hint" default="true">
			Если [code]true[/code], то скрипт в данный момент выполняется в редакторе. Это полезно для [code]инструментальных[/code] скриптов для условного рисования помощников редактора или предотвращения случайного запуска "игрового" кода, который может повлиять на состояние сцены, находясь в редакторе:
			[codeblock]
			if Engine.editor_hint:
			    draw_gizmos()
			else:
			    simulate_physics()
			[/codeblock]
			Дополнительную информацию см. в документации [url=$DOCS_URL/tutorials/plugins/running_code_in_the_editor.html]Запуск кода в редакторе[/url].
			[b]Примечание:[/b] Чтобы определить, запускается ли скрипт из [i]сборки[/i] редактора (например, при нажатии [code]F5[/code]), используйте вместо этого [метод OS.has_feature] с аргументом [code]"editor"[/code]. [code]OS.has_feature("editor")[/code] будет иметь значение [code]true[/code] как при запуске кода в редакторе, так и при запуске проекта из редактора, но будет иметь значение [code]false[/code] при запуске кода из экспортированного проекта.
		</member>
		<member name="iterations_per_second" type="int" setter="set_iterations_per_second" getter="get_iterations_per_second" default="60">
			Количество фиксированных итераций в секунду. Оно управляет тем, как часто запускаются методы симуляции физики и [метод Node._physics_process]. Это значение, как правило, всегда должно быть установлено на [code]60[/code] или выше, так как Godot не интерполирует шаг физики. В результате значения ниже [code]60[/code] будут выглядеть заикающимися. Это значение можно увеличить, чтобы сделать ввод более реактивным или решить проблемы с туннелированием столкновений, но имейте в виду, что это приведет к увеличению использования процессора. См. также [member target_fps] и [member ProjectSettings.physics/common/physics_fps].
			[b]Примечание:[/b] На один рендерный кадр может быть смоделировано не более 8 физических тиков. Если на один кадр рендеринга приходится более 8 тиков физики, чтобы успевать за рендерингом, игра будет выглядеть замедленной (даже если [code]delta[/code] постоянно используется в расчетах физики). Поэтому рекомендуется не увеличивать [member Engine.iterations_per_second] выше 240. В противном случае игра будет тормозить, когда частота кадров рендеринга опустится ниже 30 FPS.
		</member>
		<member name="physics_jitter_fix" type="float" setter="set_physics_jitter_fix" getter="get_physics_jitter_fix" default="0.5">
			Контролирует, насколько тики физики синхронизированы с реальным временем. При значении 0 или меньше тики синхронизируются. Такие значения рекомендуются для сетевых игр, где синхронизация часов имеет значение. Большие значения приводят к большему отклонению внутриигровых часов от реальных, но сглаживают дрожание кадров. Значение по умолчанию 0,5 должно устраивать большинство; значения выше 2 могут привести к тому, что игра будет реагировать на выпадение кадров с заметной задержкой, поэтому их использовать не рекомендуется.
			[b]Примечание:[/b] Для достижения наилучших результатов при использовании пользовательского решения интерполяции физики следует отключить исправление джиттера физики, установив [member physics_jitter_fix] в [code]0[/code].
		</member>
		<member name="print_error_messages" type="bool" setter="set_print_error_messages" getter="is_printing_error_messages" default="true">
			Если [code]false[/code], то прекращается печать сообщений об ошибках и предупреждениях в консоль и выходной журнал редактора. Это свойство можно использовать для скрытия сообщений об ошибках и предупреждениях во время выполнения набора модульных тестов. Это свойство эквивалентно настройке проекта [member ProjectSettings.application/run/disable_stderr].
			[b]Предупреждение:[/b] Если установить значение [code]false[/code] в любом месте проекта, важные сообщения об ошибках могут быть скрыты, даже если они выдаются другими скриптами. Если установить значение [code]false[/code] в скрипте [code]tool[/code], это также повлияет на сам редактор. Не [i]сообщайте[/i] об ошибках, прежде чем убедитесь, что сообщения об ошибках включены (по умолчанию они включены).
			[b]Примечание:[/b] Это свойство не влияет на вкладку Errors редактора при запуске проекта из редактора.
		</member>
		<member name="target_fps" type="int" setter="set_target_fps" getter="get_target_fps" default="0">
			Желаемая частота кадров в секунду. Если аппаратное обеспечение не справляется, эта настройка может не соблюдаться. Значение 0 означает отсутствие ограничений.
		</member>
		<member name="time_scale" type="float" setter="set_time_scale" getter="get_time_scale" default="1.0">
			Контролирует, насколько быстро или медленно тикают внутриигровые часы по сравнению с реальными. По умолчанию установлено значение 1,0. Значение 2.0 означает, что игра движется в два раза быстрее, чем реальная жизнь, а значение 0.5 означает, что игра движется в два раза медленнее, чем обычно. Это также влияет на [Timer] и [SceneTreeTimer] (как управлять этим параметром, смотрите в [метод SceneTree.create_timer]).
		</member>
	</members>
	<constants>
	</constants>
</class>
