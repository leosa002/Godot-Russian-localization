<?xml version="1.0" encoding="UTF-8" ?>
<class name="KinematicBody2D" inherits="PhysicsBody2D" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Кинематический узел тела 2D.
	</brief_description>
	<description>
		Кинематические тела - это особые типы тел, которые предназначены для управления пользователем. Они не подвержены влиянию физики; для других типов тел, таких как персонаж или жесткое тело, это то же самое, что и статическое тело. Однако у них есть два основных применения:
		[b]Имитация движения:[/b] Когда эти тела перемещаются вручную, либо из кода, либо из [AnimationPlayer] (с [member AnimationPlayer.playback_process_mode], установленным на "physics"), физика автоматически вычисляет оценку их линейной и угловой скорости. Это делает их очень полезными для движущихся платформ или других объектов, управляемых AnimationPlayer (например, дверь, открывающийся мост и т. д.).
		[b]Кинематические персонажи:[/b] KinematicBody2D также имеет API для перемещения объектов (методы [method move_and_collide] и [method move_and_slide]) при выполнении тестов на столкновения. Это делает их действительно полезными для реализации персонажей, которые сталкиваются с миром, но не требуют продвинутой физики.
	</description>
	<tutorials>
		<link title="Kinematic character (2D)">$DOCS_URL/tutorials/physics/kinematic_character_2d.html</link>
		<link title="Using KinematicBody2D">$DOCS_URL/tutorials/physics/using_kinematic_body_2d.html</link>
		<link title="2D Kinematic Character Demo">https://godotengine.org/asset-library/asset/113</link>
		<link title="2D Platformer Demo">https://godotengine.org/asset-library/asset/120</link>
	</tutorials>
	<methods>
		<method name="get_floor_angle" qualifiers="const">
			<return type="float" />
			<argument index="0" name="up_direction" type="Vector2" default="Vector2( 0, -1 )" />
			<description>
				Возвращает угол столкновения пола в последней точке столкновения в соответствии с [code]up_direction[/code], который по умолчанию равен [code]Vector2.UP[/code]. Это значение всегда положительно и действительно только после вызова [метода move_and_slide] и когда [метод is_on_floor] возвращает [code]true[/code].
			</description>
		</method>
		<method name="get_floor_normal" qualifiers="const">
			<return type="Vector2" />
			<description>
				Возвращает нормаль к поверхности пола в последней точке столкновения. Действует только после вызова [метода move_and_slide] или [метода move_and_slide_with_snap] и если [метод is_on_floor] возвращает [code]true[/code].
			</description>
		</method>
		<method name="get_floor_velocity" qualifiers="const">
			<return type="Vector2" />
			<description>
				Возвращает линейную скорость пола в последней точке столкновения. Действует только после вызова [метода move_and_slide] или [метода move_and_slide_with_snap] и если [метод is_on_floor] возвращает [code]true[/code].
			</description>
		</method>
		<method name="get_last_slide_collision">
			<return type="KinematicCollision2D" />
			<description>
				Возвращает [KinematicCollision2D], содержащий информацию о последнем столкновении, произошедшем во время последнего вызова [метода move_and_slide].
			</description>
		</method>
		<method name="get_slide_collision">
			<return type="KinematicCollision2D" />
			<argument index="0" name="slide_idx" type="int" />
			<description>
				Возвращает [KinematicCollision2D], содержащий информацию о столкновении, произошедшем во время последнего вызова [method move_and_slide] или [method move_and_slide_with_snap]. Поскольку тело может столкнуться несколько раз за один вызов [method move_and_slide], вы должны указать индекс столкновения в диапазоне от 0 до ([method get_slide_count] - 1).
				[b]Пример использования:[/b]
				[codeblock]
				for i in get_slide_count():
				    var collision = get_slide_collision(i)
				    print("Collided with: ", collision.collider.name)
				[/codeblock]
			</description>
		</method>
		<method name="get_slide_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество столкновений и изменений направления движения тела во время последнего вызова [метода move_and_slide] или [метода move_and_slide_with_snap].
			</description>
		</method>
		<method name="is_on_ceiling" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если тело столкнулось с потолком во время последнего вызова [method move_and_slide] или [method move_and_slide_with_snap]. В противном случае возвращается [code]false[/code].
			</description>
		</method>
		<method name="is_on_floor" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если тело столкнулось с полом во время последнего вызова [method move_and_slide] или [method move_and_slide_with_snap]. В противном случае возвращается [code]false[/code].
			</description>
		</method>
		<method name="is_on_wall" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если тело столкнулось со стеной во время последнего вызова [method move_and_slide] или [method move_and_slide_with_snap]. В противном случае возвращается [code]false[/code].
			</description>
		</method>
		<method name="move_and_collide">
			<return type="KinematicCollision2D" />
			<argument index="0" name="rel_vec" type="Vector2" />
			<argument index="1" name="infinite_inertia" type="bool" default="true" />
			<argument index="2" name="exclude_raycast_shapes" type="bool" default="true" />
			<argument index="3" name="test_only" type="bool" default="false" />
			<description>
				Перемещает тело вдоль вектора [code]rel_vec[/code]. Тело остановится при столкновении. Возвращает [KinematicCollision2D], который содержит информацию о столкновении при остановке или при касании другого тела по ходу движения.
				Если [code]test_only[/code] - [code]true[/code], тело не движется, но информация о возможном столкновении выдается.
			</description>
		</method>
		<method name="move_and_slide">
			<return type="Vector2" />
			<argument index="0" name="linear_velocity" type="Vector2" />
			<argument index="1" name="up_direction" type="Vector2" default="Vector2( 0, 0 )" />
			<argument index="2" name="stop_on_slope" type="bool" default="false" />
			<argument index="3" name="max_slides" type="int" default="4" />
			<argument index="4" name="floor_max_angle" type="float" default="0.785398" />
			<argument index="5" name="infinite_inertia" type="bool" default="true" />
			<description>
				Перемещает тело вдоль вектора. Если тело столкнется с другим телом, оно будет скользить вдоль него, а не остановится сразу. Если другое тело является [KinematicBody2D] или [RigidBody2D], на него также будет влиять движение другого тела. Вы можете использовать этот метод для создания движущихся и вращающихся платформ или для того, чтобы узлы толкали другие узлы.
				Этот метод следует использовать в [method Node._physics_process] (или в методе, вызываемом [method Node._physics_process]), поскольку он автоматически использует в расчетах значение [code]delta[/code] шага физики. В противном случае симуляция будет выполняться с неправильной скоростью.
				[code]linear_velocity[/code] - вектор скорости в пикселях в секунду. В отличие от [method move_and_collide], вы не должны [i]умножать[/i] его на [code]delta[/code] - физический движок сам применяет скорость.
				[code]up_direction[/code] - направление вверх, используется для определения того, что является стеной, а что - полом или потолком. Если установить значение по умолчанию [code]Vector2(0, 0)[/code], то все будет считаться стеной. Это полезно для игр с видом сверху вниз.
				Если [code]stop_on_slope[/code] имеет значение [code]true[/code], тело не будет скользить по склонам, если включить гравитацию в [code]linear_velocity[/code] и тело стоит на месте.
				Если тело столкнется, оно изменит направление максимум [code]max_slides[/code] раз, прежде чем остановится.
				[code]floor_max_angle[/code] - максимальный угол (в радианах), при котором наклон все еще считается полом (или потолком), а не стеной. Значение по умолчанию равно 45 градусам.
				Если [code]infinite_inertia[/code] равно [code]true[/code], тело сможет толкать узлы [RigidBody2D], но при этом не будет обнаруживать столкновений с ними. Если [code]false[/code], то оно будет взаимодействовать с узлами [RigidBody2D], как с [StaticBody2D].
				Возвращает вектор [code]linear_velocity[/code], повернутый и/или масштабированный, если произошло столкновение со скольжением. Чтобы получить подробную информацию о произошедших столкновениях, используйте [метод get_slide_collision].
				Когда тело касается движущейся платформы, скорость платформы автоматически добавляется к движению тела. Если столкновение происходит из-за движения платформы, она всегда будет первой в списке столкновений скольжения.
			</description>
		</method>
		<method name="move_and_slide_with_snap">
			<return type="Vector2" />
			<argument index="0" name="linear_velocity" type="Vector2" />
			<argument index="1" name="snap" type="Vector2" />
			<argument index="2" name="up_direction" type="Vector2" default="Vector2( 0, 0 )" />
			<argument index="3" name="stop_on_slope" type="bool" default="false" />
			<argument index="4" name="max_slides" type="int" default="4" />
			<argument index="5" name="floor_max_angle" type="float" default="0.785398" />
			<argument index="6" name="infinite_inertia" type="bool" default="true" />
			<description>
				Перемещает тело, сохраняя его прикрепленным к склонам. Аналогично [method move_and_slide].
				Пока вектор [code]snap[/code] находится в контакте с землей, тело будет оставаться прикрепленным к поверхности. Это означает, что вы должны отключить привязку, чтобы, например, прыгнуть. Это можно сделать, установив [code]snap[/code] на [code](0, 0)[/code] или использовав вместо этого [method move_and_slide].
			</description>
		</method>
		<method name="test_move">
			<return type="bool" />
			<argument index="0" name="from" type="Transform2D" />
			<argument index="1" name="rel_vec" type="Vector2" />
			<argument index="2" name="infinite_inertia" type="bool" default="true" />
			<description>
				Проверяет столкновения без перемещения тела. Виртуально устанавливает положение, масштаб и вращение узла в соответствии с заданным [Transform2D], затем пытается переместить тело по вектору [code]rel_vec[/code]. Возвращает [code]true[/code], если столкновение остановит движение тела по всему пути.
				Используйте [метод move_and_collide] вместо этого для обнаружения столкновения с касающимися телами.
			</description>
		</method>
	</methods>
	<members>
		<member name="collision/safe_margin" type="float" setter="set_safe_margin" getter="get_safe_margin" default="0.08">
			Дополнительный запас, используемый для восстановления столкновений в функциях движения (см. [method move_and_collide], [method move_and_slide], [method move_and_slide_with_snap]).
			Если тело находится хотя бы на таком расстоянии от другого тела, оно будет считать их столкнувшимися и оттолкнется перед выполнением движения.
			Большее значение означает, что алгоритм более гибко подходит к определению столкновений, что помогает стабильно определять стены и пол.
			Меньшее значение заставляет алгоритм столкновений использовать более точное определение, поэтому его можно использовать в случаях, когда требуется точность, например, при очень низком масштабе, чтобы избежать видимого дрожания, или для стабильности при работе со стеком кинематических тел.
		</member>
		<member name="motion/sync_to_physics" type="bool" setter="set_sync_to_physics" getter="is_sync_to_physics_enabled" default="false">
			Если [code]true[/code], движение тела будет синхронизировано с кадром физики. Это полезно при анимации движения через [AnimationPlayer], например, на движущихся платформах. Не [b]используйте вместе с функциями [method move_and_slide] или [method move_and_collide].
		</member>
		<member name="moving_platform_apply_velocity_on_leave" type="int" setter="set_moving_platform_apply_velocity_on_leave" getter="get_moving_platform_apply_velocity_on_leave" enum="KinematicBody2D.MovingPlatformApplyVelocityOnLeave" default="0">
			Устанавливает поведение, которое будет применяться, когда вы покидаете движущуюся платформу. По умолчанию, чтобы быть физически точным, при покидании последней платформы применяется скорость. Доступные варианты поведения см. в константах [enum MovingPlatformApplyVelocityOnLeave].
		</member>
	</members>
	<constants>
		<constant name="PLATFORM_VEL_ON_LEAVE_ALWAYS" value="0" enum="MovingPlatformApplyVelocityOnLeave">
			Добавьте скорость последней платформы, когда вы покидаете движущуюся платформу.
		</constant>
		<constant name="PLATFORM_VEL_ON_LEAVE_UPWARD_ONLY" value="1" enum="MovingPlatformApplyVelocityOnLeave">
			Добавляет скорость последней платформы, когда вы покидаете движущуюся платформу, но любое движение вниз игнорируется. Это полезно для сохранения полной высоты прыжка, даже если платформа движется вниз.
		</constant>
		<constant name="PLATFORM_VEL_ON_LEAVE_NEVER" value="2" enum="MovingPlatformApplyVelocityOnLeave">
			Ничего не делайте, когда покидаете платформу.
		</constant>
	</constants>
</class>
