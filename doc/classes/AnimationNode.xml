<?xml version="1.0" encoding="UTF-8" ?>
<class name="AnimationNode" inherits="Resource" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Базовый ресурс для узлов [AnimationTree].
	</brief_description>
	<description>
		Базовый ресурс для узлов [AnimationTree]. В общем случае он не используется напрямую, но вы можете создавать собственные узлы с пользовательскими формулами смешивания.
		Наследуйте его при создании узлов, предназначенных в основном для использования в [AnimationNodeBlendTree], в противном случае вместо него следует использовать [AnimationRootNode].
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/animation/animation_tree.html</link>
	</tutorials>
	<methods>
		<method name="add_input">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<description>
				Добавляет вход в узел. Это полезно только для узлов, созданных для использования в [AnimationNodeBlendTree].
			</description>
		</method>
		<method name="blend_animation">
			<return type="void" />
			<argument index="0" name="animation" type="String" />
			<argument index="1" name="time" type="float" />
			<argument index="2" name="delta" type="float" />
			<argument index="3" name="seeked" type="bool" />
			<argument index="4" name="blend" type="float" />
			<description>
				Смешивает анимацию на [code]blend[/code] количество (имя должно быть действительным в связанном [AnimationPlayer]). Может быть передано [code]time[/code] и [code]delta[/code], а также указано, произошло ли [code]seek[/code].
			</description>
		</method>
		<method name="blend_input">
			<return type="float" />
			<argument index="0" name="input_index" type="int" />
			<argument index="1" name="time" type="float" />
			<argument index="2" name="seek" type="bool" />
			<argument index="3" name="blend" type="float" />
			<argument index="4" name="filter" type="int" enum="AnimationNode.FilterAction" default="0" />
			<argument index="5" name="optimize" type="bool" default="true" />
			<description>
				Блендировать вход. Это полезно только для узлов, созданных для [AnimationNodeBlendTree]. Параметр [code]time[/code] является относительной дельтой, если только [code]seek[/code] не является [code]true[/code], в этом случае он абсолютный. Опционально может передаваться режим фильтрации (опции см. в [enum FilterAction]).
			</description>
		</method>
		<method name="blend_node">
			<return type="float" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="node" type="AnimationNode" />
			<argument index="2" name="time" type="float" />
			<argument index="3" name="seek" type="bool" />
			<argument index="4" name="blend" type="float" />
			<argument index="5" name="filter" type="int" enum="AnimationNode.FilterAction" default="0" />
			<argument index="6" name="optimize" type="bool" default="true" />
			<description>
				Добавляет еще один узел анимации (в случае, если этот узел содержит дочерние узлы анимации). Эта функция полезна только в том случае, если вы наследуете от [AnimationRootNode], иначе редакторы не будут отображать ваш узел для добавления.
			</description>
		</method>
		<method name="get_caption" qualifiers="virtual">
			<return type="String" />
			<description>
				При наследовании от [AnimationRootNode] реализуйте этот виртуальный метод, чтобы переопределить текстовую надпись для этого узла.
			</description>
		</method>
		<method name="get_child_by_name" qualifiers="virtual">
			<return type="Object" />
			<argument index="0" name="name" type="String" />
			<description>
				При наследовании от [AnimationRootNode] реализуйте этот виртуальный метод для возврата дочернего узла по его [code]имени[/code].
			</description>
		</method>
		<method name="get_child_nodes" qualifiers="virtual">
			<return type="Dictionary" />
			<description>
				При наследовании от [AnimationRootNode] реализуйте этот виртуальный метод для возврата всех дочерних узлов по порядку в виде словаря [code]name: node[/code].
			</description>
		</method>
		<method name="get_input_count" qualifiers="const">
			<return type="int" />
			<description>
				Количество входов в этом узле, полезно только для узлов, входящих в [AnimationNodeBlendTree].
			</description>
		</method>
		<method name="get_input_name">
			<return type="String" />
			<argument index="0" name="input" type="int" />
			<description>
				Получает имя входа по индексу.
			</description>
		</method>
		<method name="get_parameter" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="name" type="String" />
			<description>
				Получает значение параметра. Параметры - это пользовательская локальная память, используемая для ваших узлов, учитывая, что ресурс может быть повторно использован в нескольких деревьях.
			</description>
		</method>
		<method name="get_parameter_default_value" qualifiers="virtual">
			<return type="Variant" />
			<argument index="0" name="name" type="String" />
			<description>
				При наследовании от [AnimationRootNode] реализуйте этот виртуальный метод для возврата значения по умолчанию параметра "[code]name[/code]". Параметры - это пользовательская локальная память, используемая для ваших узлов, учитывая, что один ресурс может быть повторно использован в нескольких деревьях.
			</description>
		</method>
		<method name="get_parameter_list" qualifiers="virtual">
			<return type="Array" />
			<description>
				При наследовании от [AnimationRootNode] реализуйте этот виртуальный метод, чтобы вернуть список свойств этого узла. Параметрами является пользовательская локальная память, используемая для ваших узлов, учитывая, что ресурс может быть повторно использован в нескольких деревьях. Формат аналогичен [method Object.get_property_list].
			</description>
		</method>
		<method name="has_filter" qualifiers="virtual">
			<return type="bool" />
			<description>
				При наследовании от [AnimationRootNode] реализуйте этот виртуальный метод, чтобы вернуть, должен ли редактор дерева смешивания отображать редактирование фильтров на этом узле.
			</description>
		</method>
		<method name="is_path_filtered" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="path" type="NodePath" />
			<description>
				Возвращает, фильтруется ли заданный путь.
			</description>
		</method>
		<method name="process" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="time" type="float" />
			<argument index="1" name="seek" type="bool" />
			<description>
				При наследовании от [AnimationRootNode] реализуйте этот виртуальный метод для выполнения некоторого кода при обработке этого узла. Параметр [code]time[/code] является относительной дельтой, если только [code]seek[/code] не является [code]true[/code], в этом случае он является абсолютным.
				Здесь следует вызвать функции [method blend_input], [method blend_node] или [method blend_animation]. Для модификации локальной памяти можно также использовать функции [method get_parameter] и [method set_parameter].
				Эта функция должна возвращать время, оставшееся до завершения текущей анимации (если нет уверенности, передайте значение из вызываемого основного бленда).
			</description>
		</method>
		<method name="remove_input">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<description>
				Удаляет вход, вызывается только в неактивном состоянии.
			</description>
		</method>
		<method name="set_filter_path">
			<return type="void" />
			<argument index="0" name="path" type="NodePath" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Добавляет или удаляет путь для фильтра.
			</description>
		</method>
		<method name="set_parameter">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="value" type="Variant" />
			<description>
				Устанавливает пользовательский параметр. Они используются в качестве локальной памяти, поскольку ресурсы могут быть повторно использованы в дереве или сценах.
			</description>
		</method>
	</methods>
	<members>
		<member name="filter_enabled" type="bool" setter="set_filter_enabled" getter="is_filter_enabled">
			Если [code]true[/code], то фильтрация включена.
		</member>
	</members>
	<signals>
		<signal name="removed_from_graph">
			<description>
				Выдается, когда узел был удален из графа.
			</description>
		</signal>
		<signal name="tree_changed">
			<description>
				Выдается узлами, наследующими от этого класса и имеющими внутреннее дерево, при изменении одного из узлов. Этот сигнал издают узлы [AnimationNodeBlendSpace1D], [AnimationNodeBlendSpace2D], [AnimationNodeStateMachine] и [AnimationNodeBlendTree].
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="FILTER_IGNORE" value="0" enum="FilterAction">
			Не используйте фильтрацию.
		</constant>
		<constant name="FILTER_PASS" value="1" enum="FilterAction">
			Не используйте фильтрацию. Пути, соответствующие фильтру, будут пропущены.
		</constant>
		<constant name="FILTER_STOP" value="2" enum="FilterAction">
			Пути, соответствующие фильтру, будут отброшены.
		</constant>
		<constant name="FILTER_BLEND" value="3" enum="FilterAction">
			Контуры, соответствующие фильтру, будут смешаны (по значению параметра blend).
		</constant>
	</constants>
</class>
