<?xml version="1.0" encoding="UTF-8" ?>
<class name="AESContext" inherits="Reference" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Интерфейс для низкоуровневых функций шифрования AES.
	</brief_description>
	<description>
		Этот класс предоставляет доступ к AES-шифрованию/дешифрованию необработанных данных. Поддерживается как режим AES-ECB, так и режим AES-CBC.
		[codeblock]
		extends Node

		var aes = AESContext.new()

		func _ready():
		    var key = "My secret key!!!" # Key must be either 16 or 32 bytes.
		    var data = "My secret text!!" # Размер данных должен быть кратен 16 байтам, при необходимости применяйте подстановку.
		    # Шифрование ECB
		    aes.start(AESContext.MODE_ECB_ENCRYPT, key.to_utf8())
		    var encrypted = aes.update(data.to_utf8())
		    aes.finish()
		    # Дешифрование ECB
		    aes.start(AESContext.MODE_ECB_DECRYPT, key.to_utf8())
		    var decrypted = aes.update(encrypted)
		    aes.finish()
		    # Проверка ECB
		    assert(decrypted == data.to_utf8())

		    var iv = "My secret iv!!!!" # IV must be of exactly 16 bytes.
		    # Шифрование CBC
		    aes.start(AESContext.MODE_CBC_ENCRYPT, key.to_utf8(), iv.to_utf8())
		    encrypted = aes.update(data.to_utf8())
		    aes.finish()
		    # Дешифрование CBC
		    aes.start(AESContext.MODE_CBC_DECRYPT, key.to_utf8(), iv.to_utf8())
		    decrypted = aes.update(encrypted)
		    aes.finish()
		    # Проверка CBC
		    assert(decrypted == data.to_utf8())
		[/codeblock]
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="finish">
			<return type="void" />
			<description>
				Закрывает данный контекст AES, чтобы его можно было запустить снова. См. раздел [method start].
			</description>
		</method>
		<method name="get_iv_state">
			<return type="PoolByteArray" />
			<description>
				Получить текущее состояние IV для данного контекста (IV обновляется при вызове [method update]). Обычно эта функция не нужна.
				[b]Примечание:[/b] Эта функция имеет смысл только в том случае, если контекст запущен с [constant MODE_CBC_ENCRYPT] или [constant MODE_CBC_DECRYPT].
			</description>
		</method>
		<method name="start">
			<return type="int" enum="Error" />
			<argument index="0" name="mode" type="int" enum="AESContext.Mode" />
			<argument index="1" name="key" type="PoolByteArray" />
			<argument index="2" name="iv" type="PoolByteArray" default="PoolByteArray(  )" />
			<description>
				Запускает контекст AES в заданном [code]mode[/code]. Ключ [code]key[/code] размером 16 или 32 байта должен быть предоставлен всегда, а [code]iv[/code] (вектор инициализации) размером ровно 16 байт необходим только в том случае, если [code]mode[/code] является либо [constant MODE_CBC_ENCRYPT], либо [constant MODE_CBC_DECRYPT].
			</description>
		</method>
		<method name="update">
			<return type="PoolByteArray" />
			<argument index="0" name="src" type="PoolByteArray" />
			<description>
				Выполняет требуемую операцию для данного AES-контекста. Возвращается массив [PoolByteArray], содержащий результат шифрования (или дешифрования) заданного [code]src[/code]. Режим работы см. в разделе [method start].
				[b]Примечание:[/b] Размер [code]src[/code] должен быть кратен 16. При необходимости примените некоторую прокладку.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="MODE_ECB_ENCRYPT" value="0" enum="Mode">
			Режим шифрования электронной кодовой книгой AES.
		</constant>
		<constant name="MODE_ECB_DECRYPT" value="1" enum="Mode">
			Режим расшифровки электронной кодовой книги AES.
		</constant>
		<constant name="MODE_CBC_ENCRYPT" value="2" enum="Mode">
			Режим цепного шифрования с блокировкой шифра AES.
		</constant>
		<constant name="MODE_CBC_DECRYPT" value="3" enum="Mode">
			Режим цепного дешифрования блокиратора шифра AES.
		</constant>
		<constant name="MODE_MAX" value="4" enum="Mode">
			Максимальное значение для перечисления mode.
		</constant>
	</constants>
</class>