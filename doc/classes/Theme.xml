<?xml version="1.0" encoding="UTF-8" ?>
<class name="Theme" inherits="Resource" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Тема для элементов управления.
	</brief_description>
	<description>
		Тема для скинов элементов управления. Элементы управления можно создавать по отдельности, но для сложных приложений практичнее создать глобальную тему, которая будет определять все элементы. Эта тема может быть применена к любому [Control]; Control и его дочерние элементы будут автоматически использовать ее.
		Ресурсы темы можно также загрузить, записав их в файл [code].theme[/code], более подробную информацию смотрите в документации.
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/ui/gui_skinning.html</link>
	</tutorials>
	<methods>
		<method name="add_type">
			<return type="void" />
			<argument index="0" name="theme_type" type="String" />
			<description>
				Добавляет пустой тип темы для каждого допустимого типа данных.
				[b]Примечание:[/b] Пустые типы не сохраняются вместе с темой. Этот метод существует только для выполнения изменений в памяти ресурса. Для добавления элементов темы используйте доступные методы [code]set_*[/code].
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Очищает все значения темы.
			</description>
		</method>
		<method name="clear_color">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Очищает [Color] у [code]name[/code], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="clear_constant">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Очищает константу [code]name[/code], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="clear_font">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Очищает [Font] у [code]name[/code], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="clear_icon">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Очищает значок у [code]name[/code], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="clear_stylebox">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Очищает [StyleBox] у [code]name[/code], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="clear_theme_item">
			<return type="void" />
			<argument index="0" name="data_type" type="int" enum="Theme.DataType" />
			<argument index="1" name="name" type="String" />
			<argument index="2" name="theme_type" type="String" />
			<description>
				Очищает элемент темы [code]data_type[/code] по адресу [code]name[/code], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="clear_type_variation">
			<return type="void" />
			<argument index="0" name="theme_type" type="String" />
			<description>
				Снимает пометку [code]theme_type[/code] как вариацию другого типа темы. Смотрите [метод set_type_variation].
			</description>
		</method>
		<method name="copy_default_theme">
			<return type="void" />
			<description>
				Устанавливает значения темы в копию значений темы по умолчанию.
			</description>
		</method>
		<method name="copy_theme">
			<return type="void" />
			<argument index="0" name="other" type="Theme" />
			<description>
				Устанавливает значения темы в копию заданной темы.
			</description>
		</method>
		<method name="get_color" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Возвращает [Color] по [code]name[/code], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="get_color_list" qualifiers="const">
			<return type="PoolStringArray" />
			<argument index="0" name="theme_type" type="String" />
			<description>
				Возвращает все [Color]ы в виде [PoolStringArray], заполненного именем каждого [Color], для использования в [методе get_color], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="get_color_types" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Возвращает все типы [Color] в виде [PoolStringArray], заполненного уникальными именами типов, для использования в [method get_color] и/или [method get_color_list].
			</description>
		</method>
		<method name="get_constant" qualifiers="const">
			<return type="int" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Возвращает константу с [code]name[/code], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="get_constant_list" qualifiers="const">
			<return type="PoolStringArray" />
			<argument index="0" name="theme_type" type="String" />
			<description>
				Возвращает все константы в виде [PoolStringArray], заполненного именем каждой константы, для использования в [методе get_constant], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="get_constant_types" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Возвращает все типы констант в виде [PoolStringArray], заполненного уникальными именами типов, для использования в [method get_constant] и/или [method get_constant_list].
			</description>
		</method>
		<method name="get_font" qualifiers="const">
			<return type="Font" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Возвращает [Font] по адресу [code]name[/code], если тема имеет [code]theme_type[/code]. Если такого элемента нет и для темы установлен [member default_font], будет возвращен шрифт по умолчанию.
			</description>
		</method>
		<method name="get_font_list" qualifiers="const">
			<return type="PoolStringArray" />
			<argument index="0" name="theme_type" type="String" />
			<description>
				Возвращает все [Font] в виде [PoolStringArray], заполненного именем каждого [Font], для использования в [методе get_font], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="get_font_types" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Возвращает все типы [Font] в виде [PoolStringArray], заполненного уникальными именами типов, для использования в [method get_font] и/или [method get_font_list].
			</description>
		</method>
		<method name="get_icon" qualifiers="const">
			<return type="Texture" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Возвращает иконку [Texture] с [code]name[/code], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="get_icon_list" qualifiers="const">
			<return type="PoolStringArray" />
			<argument index="0" name="theme_type" type="String" />
			<description>
				Возвращает все иконки в виде [PoolStringArray], заполненного именем каждой [Texture], для использования в [методе get_icon], если тема имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="get_icon_types" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Возвращает все типы иконок в виде [PoolStringArray], заполненного уникальными именами типов, для использования в [method get_icon] и/или [method get_icon_list].
			</description>
		</method>
		<method name="get_stylebox" qualifiers="const">
			<return type="StyleBox" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Возвращает [StyleBox] с [code]name[/code], если тема имеет [code]theme_type[/code].
				Валидные [code]name[/code]s можно найти с помощью [method get_stylebox_list]. Валидные [code]theme_type[/code] можно найти с помощью [method get_stylebox_types].
			</description>
		</method>
		<method name="get_stylebox_list" qualifiers="const">
			<return type="PoolStringArray" />
			<argument index="0" name="theme_type" type="String" />
			<description>
				Возвращает все [StyleBox]ы в виде [PoolStringArray], заполненного именем каждого [StyleBox], для использования в [method get_stylebox], если тема имеет [code]theme_type[/code].
				Действительные [code]theme_type[/code] можно найти с помощью [method get_stylebox_types].
			</description>
		</method>
		<method name="get_stylebox_types" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Возвращает все типы [StyleBox] в виде [PoolStringArray], заполненного уникальными именами типов, для использования в [method get_stylebox] и/или [method get_stylebox_list].
			</description>
		</method>
		<method name="get_theme_item" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="data_type" type="int" enum="Theme.DataType" />
			<argument index="1" name="name" type="String" />
			<argument index="2" name="theme_type" type="String" />
			<description>
				Возвращает элемент темы [code]data_type[/code] по адресу [code]name[/code], если тема имеет [code]theme_type[/code].
				Валидные [code]name[/code] могут быть найдены с помощью [method get_theme_item_list] или метода, специфичного для типа данных. Валидные [code]theme_type[/code] могут быть найдены с помощью [method get_theme_item_types] или метода, специфичного для данного типа данных.
			</description>
		</method>
		<method name="get_theme_item_list" qualifiers="const">
			<return type="PoolStringArray" />
			<argument index="0" name="data_type" type="int" enum="Theme.DataType" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Возвращает все элементы темы [code]data_type[/code] в виде [PoolStringArray], заполненного именем каждого элемента темы, для использования в [method get_theme_item] или методе, специфичном для типа данных, если тема имеет [code]theme_type[/code].
				Действительные [code]theme_type[/code] могут быть найдены с помощью [method get_theme_item_types] или метода, специфичного для типа данных.
			</description>
		</method>
		<method name="get_theme_item_types" qualifiers="const">
			<return type="PoolStringArray" />
			<argument index="0" name="data_type" type="int" enum="Theme.DataType" />
			<description>
				Возвращает все элементы темы типа [code]data_type[/code] в виде [PoolStringArray], заполненного уникальными именами типов, для использования в [method get_theme_item], [method get_theme_item_list] или методах, специфичных для типа данных.
			</description>
		</method>
		<method name="get_type_list" qualifiers="const">
			<return type="PoolStringArray" />
			<argument index="0" name="theme_type" type="String" />
			<description>
				Возвращает все типы тем в виде [PoolStringArray], заполненного уникальными именами типов, для использования в других функциях [code]get_*[/code] этой темы.
				[b]Примечание:[/b] [code]theme_type[/code] не имеет эффекта и будет удален в будущей версии.
			</description>
		</method>
		<method name="get_type_variation_base" qualifiers="const">
			<return type="String" />
			<argument index="0" name="theme_type" type="String" />
			<description>
				Возвращает имя базового типа темы, если [code]theme_type[/code] является допустимым типом вариации. В противном случае возвращается пустая строка.
			</description>
		</method>
		<method name="get_type_variation_list" qualifiers="const">
			<return type="PoolStringArray" />
			<argument index="0" name="base_type" type="String" />
			<description>
				Возвращает список всех вариантов типов для заданного [code]base_type[/code].
			</description>
		</method>
		<method name="has_color" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Возвращает [code]true[/code], если [Color] с [code]названием[/code] есть в [code]theme_type[/code].
				Возвращает [code]false[/code], если тема не имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="has_constant" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Возвращает [code]true[/code], если константа с [code]названием[/code] есть в [code]theme_type[/code].
				Возвращает [code]false[/code], если в теме нет [code]theme_type[/code].
			</description>
		</method>
		<method name="has_default_font" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если у этой темы есть действительное значение [member default_font].
			</description>
		</method>
		<method name="has_font" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Возвращает [code]true[/code], если [Font] с [code]названием[/code] есть в [code]theme_type[/code].
				Возвращает [code]false[/code], если тема не имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="has_icon" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Возвращает [code]true[/code], если иконка [Texture] с [code]названием[/code] находится в [code]theme_type[/code].
				Возвращает [code]false[/code], если в теме нет [code]theme_type[/code].
			</description>
		</method>
		<method name="has_stylebox" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<description>
				Возвращает [code]true[/code], если [StyleBox] с [code]именем[/code] находится в [code]theme_type[/code].
				Возвращает [code]false[/code], если тема не имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="has_theme_item" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="data_type" type="int" enum="Theme.DataType" />
			<argument index="1" name="name" type="String" />
			<argument index="2" name="theme_type" type="String" />
			<description>
				Возвращает [code]true[/code], если элемент темы [code]data_type[/code] с [code]name[/code] находится в [code]theme_type[/code].
				Возвращает [code]false[/code], если тема не имеет [code]theme_type[/code].
			</description>
		</method>
		<method name="is_type_variation" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="theme_type" type="String" />
			<argument index="1" name="base_type" type="String" />
			<description>
				Возвращает [code]true[/code], если [code]theme_type[/code] отмечен как вариация [code]base_type[/code].
			</description>
		</method>
		<method name="merge_with">
			<return type="void" />
			<argument index="0" name="other" type="Theme" />
			<description>
				Добавляет отсутствующие и переопределяет существующие определения значениями из [code]другой[/code] [Theme].
				[b]Примечание:[/b] Это изменяет текущую тему. Если вы хотите объединить две темы, не изменяя ни одну из них, создайте новую пустую тему и последовательно объедините в ней две другие.
			</description>
		</method>
		<method name="remove_type">
			<return type="void" />
			<argument index="0" name="theme_type" type="String" />
			<description>
				Удаляет тип темы, изящно отбрасывая определенные элементы темы. Если тип является вариацией, эта информация также стирается. Если тип является базой для вариаций типа, эти вариации теряют свою базу.
			</description>
		</method>
		<method name="rename_color">
			<return type="void" />
			<argument index="0" name="old_name" type="String" />
			<argument index="1" name="name" type="String" />
			<argument index="2" name="theme_type" type="String" />
			<description>
				Переименовывает [Color] по адресу [code]old_name[/code] в [code]name[/code], если тема имеет [code]theme_type[/code]. Если [code]name[/code] уже занято, этот метод не работает.
			</description>
		</method>
		<method name="rename_constant">
			<return type="void" />
			<argument index="0" name="old_name" type="String" />
			<argument index="1" name="name" type="String" />
			<argument index="2" name="theme_type" type="String" />
			<description>
				Переименовывает константу по адресу [code]old_name[/code] в [code]name[/code], если тема имеет [code]theme_type[/code]. Если [code]name[/code] уже занято, этот метод не работает.
			</description>
		</method>
		<method name="rename_font">
			<return type="void" />
			<argument index="0" name="old_name" type="String" />
			<argument index="1" name="name" type="String" />
			<argument index="2" name="theme_type" type="String" />
			<description>
				Переименовывает [Font] по адресу [code]old_name[/code] в [code]name[/code], если тема имеет [code]theme_type[/code]. Если [code]name[/code] уже занят, этот метод не работает.
			</description>
		</method>
		<method name="rename_icon">
			<return type="void" />
			<argument index="0" name="old_name" type="String" />
			<argument index="1" name="name" type="String" />
			<argument index="2" name="theme_type" type="String" />
			<description>
				Переименовывает иконку по адресу [code]old_name[/code] в [code]name[/code], если тема имеет [code]theme_type[/code]. Если [code]name[/code] уже занят, этот метод не работает.
			</description>
		</method>
		<method name="rename_stylebox">
			<return type="void" />
			<argument index="0" name="old_name" type="String" />
			<argument index="1" name="name" type="String" />
			<argument index="2" name="theme_type" type="String" />
			<description>
				Переименовывает [StyleBox] с [code]old_name[/code] на [code]name[/code], если тема имеет [code]theme_type[/code]. Если [code]name[/code] уже занято, этот метод не работает.
			</description>
		</method>
		<method name="rename_theme_item">
			<return type="void" />
			<argument index="0" name="data_type" type="int" enum="Theme.DataType" />
			<argument index="1" name="old_name" type="String" />
			<argument index="2" name="name" type="String" />
			<argument index="3" name="theme_type" type="String" />
			<description>
				Переименовывает элемент темы [code]data_type[/code] по адресу [code]old_name[/code] в [code]name[/code], если тема имеет [code]theme_type[/code]. Если [code]name[/code] уже занят, этот метод не работает.
			</description>
		</method>
		<method name="set_color">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<argument index="2" name="color" type="Color" />
			<description>
				Устанавливает [Color] темы в [code]color[/code] по адресу [code]name[/code] в [code]theme_type[/code].
				Создает [code]theme_type[/code], если у темы его нет.
			</description>
		</method>
		<method name="set_constant">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<argument index="2" name="constant" type="int" />
			<description>
				Устанавливает константу темы в [code]constant[/code] по адресу [code]name[/code] в [code]theme_type[/code].
				Создает [code]theme_type[/code], если у темы его нет.
			</description>
		</method>
		<method name="set_font">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<argument index="2" name="font" type="Font" />
			<description>
				Устанавливает [Font] темы в [code]font[/code] по адресу [code]name[/code] в [code]theme_type[/code].
				Создает [code]theme_type[/code], если у темы его нет.
			</description>
		</method>
		<method name="set_icon">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<argument index="2" name="texture" type="Texture" />
			<description>
				Устанавливает иконку темы [Texture] на [code]texture[/code] по адресу [code]name[/code] в [code]theme_type[/code].
				Создает [code]theme_type[/code], если у темы его нет.
			</description>
		</method>
		<method name="set_stylebox">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="theme_type" type="String" />
			<argument index="2" name="texture" type="StyleBox" />
			<description>
				Устанавливает [StyleBox] темы в [code]stylebox[/code] по адресу [code]name[/code] в [code]theme_type[/code].
				Создает [code]theme_type[/code], если у темы его нет.
			</description>
		</method>
		<method name="set_theme_item">
			<return type="void" />
			<argument index="0" name="data_type" type="int" enum="Theme.DataType" />
			<argument index="1" name="name" type="String" />
			<argument index="2" name="theme_type" type="String" />
			<argument index="3" name="value" type="Variant" />
			<description>
				Устанавливает элемент темы [code]data_type[/code] в [code]value[/code] по адресу [code]name[/code] в [code]theme_type[/code].
				Ничего не делает, если тип [code]value[/code] не совпадает с [code]data_type[/code].
				Создает [code]theme_type[/code], если у темы его нет.
			</description>
		</method>
		<method name="set_type_variation">
			<return type="void" />
			<argument index="0" name="theme_type" type="String" />
			<argument index="1" name="base_type" type="String" />
			<description>
				Отмечает [code]theme_type[/code] как вариацию [code]base_type[/code].
				Это добавляет [code]theme_type[/code] в качестве предлагаемой опции для [member Control.theme_type_variation] на [Control], который относится к классу [code]base_type[/code].
				Вариации также могут быть вложенными, т. е. [code]base_type[/code] может быть другой вариацией. Если цепочка вариаций заканчивается [code]base_type[/code], совпадающим с классом [Control], то вся цепочка будет предложена в качестве вариантов.
				[b]Примечание:[/b] Предложения отображаются только в том случае, если этот тематический ресурс установлен в качестве темы проекта по умолчанию. См. раздел [member ProjectSettings.gui/theme/custom].
			</description>
		</method>
	</methods>
	<members>
		<member name="default_font" type="Font" setter="set_default_font" getter="get_default_font">
			Шрифт по умолчанию для данного ресурса [Theme]. Используется в качестве запасного значения для элементов шрифта, определенных в этой теме, но имеющих недопустимые значения. Если это значение также недействительно, используется глобальное значение по умолчанию.
			Используйте [метод has_default_font], чтобы проверить, действительно ли это значение.
		</member>
	</members>
	<constants>
		<constant name="DATA_TYPE_COLOR" value="0" enum="DataType">
			Тип элемента [Color] в теме.
		</constant>
		<constant name="DATA_TYPE_CONSTANT" value="1" enum="DataType">
			Постоянный тип элемента темы.
		</constant>
		<constant name="DATA_TYPE_FONT" value="2" enum="DataType">
			Тип элемента [Font] в теме.
		</constant>
		<constant name="DATA_TYPE_ICON" value="3" enum="DataType">
			Тип элемента [Texture] иконки темы.
		</constant>
		<constant name="DATA_TYPE_STYLEBOX" value="4" enum="DataType">
			Тип элемента [StyleBox] темы.
		</constant>
		<constant name="DATA_TYPE_MAX" value="5" enum="DataType">
			Максимальное значение для перечисления DataType.
		</constant>
	</constants>
</class>
