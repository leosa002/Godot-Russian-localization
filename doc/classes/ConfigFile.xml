<?xml version="1.0" encoding="UTF-8" ?>
<class name="ConfigFile" inherits="Reference" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Класс-помощник для работы с файлами в стиле INI.
	</brief_description>
	<description>
		Этот вспомогательный класс можно использовать для хранения значений [Variant] в файловой системе с использованием форматирования в стиле INI. Хранимые значения идентифицируются секцией и ключом:
		[codeblock]
		[section]
		some_key=42
		string_example="Hello World!"
		a_vector=Vector3( 1, 0, 2 )
		[/codeblock]
		Сохраненные данные могут быть записаны в файл или разобраны из него, однако объекты ConfigFile можно использовать и напрямую, без обращения к файловой системе.
		В следующем примере показано, как создать простой [ConfigFile] и сохранить его на диске:
		[codeblock]
		# Создайте новый объект ConfigFile.
		var config = ConfigFile.new()

		# Храните некоторые значения.
		config.set_value("Player1", "player_name", "Steve")
		config.set_value("Player1", "best_score", 10)
		config.set_value("Player2", "player_name", "V3geta")
		config.set_value("Player2", "best_score", 9001)

		# Сохраните его в файл (перезапишите, если он уже существует).
		config.save("user://scores.cfg")
		[/codeblock]
		В этом примере показано, как может быть загружен вышеупомянутый файл:
		[codeblock]
		var score_data = {}
		var config = ConfigFile.new()

		# Загрузка данных из файла.
		var err = config.load("user://scores.cfg")

		# Если файл не загрузился, проигнорируйте его.
		if err != OK:
		    return

		# Итерация по всем секциям.
		for player in config.get_sections():
		    # Получите данные для каждого раздела.
		    var player_name = config.get_value(player, "player_name")
		    var player_score = config.get_value(player, "best_score")
		    score_data[player_name] = player_score
		[/codeblock]
		Любая операция, изменяющая ConfigFile, например [method set_value], [method clear] или [method erase_section], изменяет только то, что загружено в память. Если вы хотите записать изменения в файл, необходимо сохранить их с помощью [method save], [method save_encrypted] или [method save_encrypted_pass].
		Помните, что имена секций и свойств не могут содержать пробелов. Все, что находится после пробела, будет проигнорировано при сохранении и загрузке.
		Конфигурационные файлы также могут содержать строки комментариев, написанные вручную и начинающиеся с точки с запятой ([code];[/code]). Эти строки будут игнорироваться при разборе файла. Обратите внимание, что комментарии будут потеряны при сохранении ConfigFile. Это может быть полезно для конфигурационных файлов выделенных серверов, которые обычно никогда не перезаписываются без явных действий пользователя.
		[b]Примечание:[/b] Расширение файла, заданное ConfigFile, не влияет на его форматирование или поведение. По традиции здесь используется расширение [code].cfg[/code], но любое другое расширение, например [code].ini[/code], также подходит. Поскольку ни [code].cfg[/code], ни [code].ini[/code] не являются стандартными, форматирование ConfigFile программы Godot может отличаться от файлов, написанных другими программами.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear">
			<return type="void" />
			<description>
				Удаляет все содержимое конфигурации.
			</description>
		</method>
		<method name="erase_section">
			<return type="void" />
			<argument index="0" name="section" type="String" />
			<description>
				Удаляет указанную секцию вместе со всеми содержащимися в ней парами ключ-значение. Вызывает ошибку, если раздел не существует.
			</description>
		</method>
		<method name="erase_section_key">
			<return type="void" />
			<argument index="0" name="section" type="String" />
			<argument index="1" name="key" type="String" />
			<description>
				Удаляет указанный ключ в разделе. Вызывает ошибку, если раздел или ключ не существуют.
			</description>
		</method>
		<method name="get_section_keys" qualifiers="const">
			<return type="PoolStringArray" />
			<argument index="0" name="section" type="String" />
			<description>
				Возвращает массив всех определенных идентификаторов ключей в указанном разделе. Вызывает ошибку и возвращает пустой массив, если раздел не существует.
			</description>
		</method>
		<method name="get_sections" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Возвращает массив всех определенных идентификаторов секций.
			</description>
		</method>
		<method name="get_value" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="section" type="String" />
			<argument index="1" name="key" type="String" />
			<argument index="2" name="default" type="Variant" default="null" />
			<description>
				Возвращает текущее значение для указанной секции и ключа. Если секция или ключ не существуют, метод возвращает резервное значение [code]default[/code]. Если [code]default[/code] не указан или установлен в [code]null[/code], также будет выдана ошибка.
			</description>
		</method>
		<method name="has_section" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="section" type="String" />
			<description>
				Возвращает [code]true[/code], если указанный раздел существует.
			</description>
		</method>
		<method name="has_section_key" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="section" type="String" />
			<argument index="1" name="key" type="String" />
			<description>
				Возвращает [code]true[/code], если указанная пара секция-ключ существует.
			</description>
		</method>
		<method name="load">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Загружает файл конфигурации, указанный в качестве параметра. Содержимое файла разбирается и загружается в объект [ConfigFile], для которого был вызван метод.
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="load_encrypted">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="key" type="PoolByteArray" />
			<description>
				Загружает файл конфигурации, указанный в качестве параметра. Содержимое файла разбирается и загружается в объект [ConfigFile], для которого был вызван метод.
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="load_encrypted_pass">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="password" type="String" />
			<description>
				Загружает зашифрованный файл конфигурации, указанный в качестве параметра, используя предоставленный [code]пароль[/code] для его расшифровки. Содержимое файла разбирается и загружается в объект [ConfigFile], для которого был вызван метод.
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="parse">
			<return type="int" enum="Error" />
			<argument index="0" name="data" type="String" />
			<description>
				Разбирает переданную строку как содержимое файла конфигурации. Строка разбирается и загружается в объект ConfigFile, для которого был вызван метод.
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="save">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Сохраняет содержимое объекта [ConfigFile] в файл, указанный в качестве параметра. В качестве выходного файла используется структура в стиле INI.
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="save_encrypted">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="key" type="PoolByteArray" />
			<description>
				Сохраняет содержимое объекта [ConfigFile] в файл с шифрованием AES-256, указанный в качестве параметра, используя предоставленный [code]ключ[/code] для шифрования. Для выходного файла используется структура в стиле INI.
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="save_encrypted_pass">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="password" type="String" />
			<description>
				Сохраняет содержимое объекта [ConfigFile] в файл с шифрованием AES-256, указанный в качестве параметра, используя для шифрования предоставленный [code]пароль[/code]. Для выходного файла используется структура в стиле INI.
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="set_value">
			<return type="void" />
			<argument index="0" name="section" type="String" />
			<argument index="1" name="key" type="String" />
			<argument index="2" name="value" type="Variant" />
			<description>
				Присваивает значение указанному ключу указанной секции. Если ни раздел, ни ключ не существуют, они создаются. Передача значения [code]null[/code] удаляет указанный ключ, если он существует, и удаляет секцию, если она оказывается пустой после удаления ключа.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
