<?xml version="1.0" encoding="UTF-8" ?>
<class name="Thread" inherits="Reference" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Единица выполнения процесса(Поток).
	</brief_description>
	<description>
		Единица выполнения в процессе. Может запускать методы одновременно на [Object]-ов. Использование синхронизации через [Mutex] или [Semaphore] рекомендуется при работе с общими объектами.
		[b]Обратите внимание:[/b] Точки останова не будут нарушать код, если он запущен в потоке. Это текущее ограничение отладчика GDScript.
	</description>
	<tutorials>
		<link title="Using multiple threads">$DOCS_URL/tutorials/performance/threads/using_multiple_threads.html</link>
		<link title="Thread-safe APIs">$DOCS_URL/tutorials/performance/threads/thread_safe_apis.html</link>
		<link title="3D Voxel Demo">https://godotengine.org/asset-library/asset/676</link>
	</tutorials>
	<methods>
		<method name="get_id" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает текущий идентификатор [Thread], однозначно идентифицирующий его среди всех потоков. Если [Thread]-ов не работает, то возвращает пустую строку.
			</description>
		</method>
		<method name="is_active" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code] если этот [Thread] был запущен. После запуска, это будет возвращать [code]true[/code] до тех пор, пока он не будет соединен с помощью [method wait_to_finish]. Для проверки, выполняет ли [Thread] свою задачу, используйте [method is_alive].
			</description>
		</method>
		<method name="is_alive" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code] если этот [Thread] выполняется в данный момент. Это полезно для определения, можно ли вызвать [method wait_to_finish] без блокировки вызывающего потока.
				Чтобы проверить, можно ли соединять [Thread], используйте [method is_active].
			</description>
		</method>
		<method name="start">
			<return type="int" enum="Error" />
			<argument index="0" name="instance" type="Object" />
			<argument index="1" name="method" type="String" />
			<argument index="2" name="userdata" type="Variant" default="null" />
			<argument index="3" name="priority" type="int" enum="Thread.Priority" default="1" />
			<description>
				Запускает новый [Thread], который запускает [code]method[/code] на объекте [code]instance[/code] с [code]userdata[/code], переданным в качестве аргумента. Даже если не будет передано userdata, [code]method[/code] должен принять один аргумент и будет иметь значение null. [code]приоритет[/code] [Thread] может быть изменен путем передачи значения из [enum Priority].
				Возвращает [constant ОК] на успех или [constant ERR_CANT_CREATE] на неудачу.
			</description>
		</method>
		<method name="wait_to_finish">
			<return type="Variant" />
			<description>
				Присоединяется к [Thread] и ожидает его завершения. Возвращает вывод метода, переданный [method start].
				Следует использовать либо для получения значения, возвращаемого методом, называемым [Thread], либо перед освобождением экземпляра, содержащего [Thread].
				Чтобы определить, можно ли это вызвать без блокировки вызывающего потока, проверьте, является ли [method is_alive] [code]false[/code].
				[b]Обратите внимание:[/b] После того, как [Thread] завершит его присоединение, он будет уничтожен. Если вы хотите использовать его снова, вам придется создать новый экземпляр.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="PRIORITY_LOW" value="0" enum="Priority">
			Поток с меньшим приоритетом, чем обычно.
		</constant>
		<constant name="PRIORITY_NORMAL" value="1" enum="Priority">
			Нить со стандартным приоритетом.
		</constant>
		<constant name="PRIORITY_HIGH" value="2" enum="Priority">
			Поток, запущенный с более высоким приоритетом, чем обычно.
		</constant>
	</constants>
</class>
