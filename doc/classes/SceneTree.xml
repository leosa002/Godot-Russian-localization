<?xml version="1.0" encoding="UTF-8" ?>
<class name="SceneTree" inherits="MainLoop" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Управляет игровым циклом через иерархию узлов.
	</brief_description>
	<description>
		Являясь одним из наиболее важных классов, [SceneTree] управляет иерархией узлов в сцене, а также самими сценами. Узлы можно добавлять, извлекать и удалять. Все дерево сцен (и, соответственно, текущая сцена) может быть приостановлено. Сцены можно загружать, переключать и перезагружать.
		Вы также можете использовать [SceneTree] для организации узлов в группы: каждому узлу может быть назначено столько групп, сколько вы хотите создать, например, группа "враги". Затем вы можете перебирать эти группы или даже вызывать методы и устанавливать свойства для всех членов группы сразу.
		[SceneTree] - это стандартная реализация [MainLoop], используемая сценами, и, таким образом, отвечает за игровой цикл.
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/scripting/scene_tree.html</link>
		<link>$DOCS_URL/tutorials/rendering/multiple_resolutions.html</link>
	</tutorials>
	<methods>
		<method name="call_group" qualifiers="vararg">
			<return type="Variant" />
			<argument index="0" name="group" type="String" />
			<argument index="1" name="method" type="String" />
			<description>
				Вызывает [code]method[/code] для каждого члена заданной группы. Вы можете передать аргументы в [code]method[/code], указав их в конце вызова метода. Этот метод эквивалентен вызову [method call_group_flags] с флагом [constant GROUP_CALL_DEFAULT].
				[b]Примечание:[/b] [code]method[/code] может иметь не более 5 аргументов (всего в этот метод передается 7 аргументов).
				[b]Примечание:[/b] Из-за ограничений дизайна, [метод call_group] будет молча завершен, если один из аргументов будет [code]null[/code].
				[b]Примечание:[/b] [method call_group] всегда будет вызывать методы с задержкой в один кадр, подобно [method Object.call_deferred]. Чтобы вызывать методы немедленно, используйте [method call_group_flags] с флагом [constant GROUP_CALL_REALTIME].
			</description>
		</method>
		<method name="call_group_flags" qualifiers="vararg">
			<return type="Variant" />
			<argument index="0" name="flags" type="int" />
			<argument index="1" name="group" type="String" />
			<argument index="2" name="method" type="String" />
			<description>
				Вызывает [code]method[/code] для каждого члена данной группы, соблюдая заданные [enum GroupCallFlags]. Вы можете передавать аргументы в [code]method[/code], указывая их в конце вызова метода.
				[b]Примечание:[/b] [code]method[/code] может иметь не более 5 аргументов (всего в этот метод передается 8 аргументов).
				[b]Примечание:[/b] Из-за ограничений дизайна, [метод call_group_flags] будет молча завершен, если один из аргументов будет [code]null[/code].
				[codeblock]
				# Вызовите метод немедленно и в обратном порядке.
				get_tree().call_group_flags(SceneTree.GROUP_CALL_REALTIME | SceneTree.GROUP_CALL_REVERSE, "bases", "destroy")
				[/codeblock]
			</description>
		</method>
		<method name="change_scene">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Изменяет запущенную сцену на ту, что находится по заданному [code]path[/code], после загрузки ее в [PackedScene] и создания нового экземпляра.
				Возвращает [константу OK] в случае успеха, [константу ERR_CANT_OPEN], если путь [code]path[/code] не может быть загружен в [PackedScene], или [константу ERR_CANT_CREATE], если эта сцена не может быть создана.
				[b]Примечание:[/b] Смена сцены отложена, что означает, что новый узел сцены будет добавлен на следующем незанятом кадре. Вы не сможете получить к нему доступ сразу после вызова [method change_scene].
			</description>
		</method>
		<method name="change_scene_to">
			<return type="int" enum="Error" />
			<argument index="0" name="packed_scene" type="PackedScene" />
			<description>
				Изменяет запущенную сцену на новый экземпляр данной [PackedScene].
				Возвращает [константу OK] в случае успеха или [константу ERR_CANT_CREATE], если сцена не может быть инстанцирована.
				[b]Примечание:[/b] Смена сцены отложена, что означает, что новый узел сцены будет добавлен на следующем незанятом кадре. Вы не сможете получить к нему доступ сразу после вызова [method change_scene_to].
				[b]Примечание:[/b] Передача в метод значения [code]null[/code] приведет к выгрузке текущей сцены без загрузки новой.
			</description>
		</method>
		<method name="create_timer">
			<return type="SceneTreeTimer" />
			<argument index="0" name="time_sec" type="float" />
			<argument index="1" name="pause_mode_process" type="bool" default="true" />
			<description>
				Возвращает [SceneTreeTimer], который [подаст сигнал SceneTreeTimer.timeout] по истечении заданного времени в секундах в данном [SceneTree]. Если [code]pause_mode_process[/code] установлен в [code]false[/code], приостановка [SceneTree] также приостановит таймер.
				Обычно используется для создания одноразового таймера задержки, как в следующем примере:
				[codeblock]
				func some_function():
				    print("start")
				    yield(get_tree().create_timer(1.0), "timeout")
				    print("end")
				[/codeblock]
				По истечении времени таймер будет автоматически освобожден.
			</description>
		</method>
		<method name="create_tween">
			<return type="SceneTreeTween" />
			<description>
				Создает и возвращает новый [SceneTreeTween].
			</description>
		</method>
		<method name="get_frame" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает номер текущего кадра, т.е. общее количество кадров с момента запуска приложения.
			</description>
		</method>
		<method name="get_network_connected_peers" qualifiers="const">
			<return type="PoolIntArray" />
			<description>
				Возвращает идентификаторы всех подключенных пиров данного [SceneTree] [member network_peer].
			</description>
		</method>
		<method name="get_network_unique_id" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает уникальный идентификатор пира этого [SceneTree] [member network_peer].
			</description>
		</method>
		<method name="get_node_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество узлов в данном [SceneTree].
			</description>
		</method>
		<method name="get_nodes_in_group">
			<return type="Array" />
			<argument index="0" name="group" type="String" />
			<description>
				Возвращает список всех узлов, отнесенных к заданной группе.
			</description>
		</method>
		<method name="get_processed_tweens">
			<return type="Array" />
			<description>
				Возвращает массив существующих на данный момент [SceneTreeTween]ов в [SceneTree] (как запущенных, так и приостановленных).
			</description>
		</method>
		<method name="get_rpc_sender_id" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает идентификатор пира отправителя для последнего полученного вызова RPC.
			</description>
		</method>
		<method name="has_group" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="name" type="String" />
			<description>
				Возвращает [code]true[/code], если данная группа существует.
			</description>
		</method>
		<method name="has_network_peer" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если установлен [member network_peer].
			</description>
		</method>
		<method name="is_input_handled">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если последнее событие [InputEvent] было отмечено как обработанное с помощью [метода set_input_as_handled].
			</description>
		</method>
		<method name="is_network_server" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если [member network_peer] этого [SceneTree] находится в режиме сервера (прослушивает соединения).
			</description>
		</method>
		<method name="notify_group">
			<return type="void" />
			<argument index="0" name="group" type="String" />
			<argument index="1" name="notification" type="int" />
			<description>
				Отправляет данное уведомление всем членам [code]группы[/code].
			</description>
		</method>
		<method name="notify_group_flags">
			<return type="void" />
			<argument index="0" name="call_flags" type="int" />
			<argument index="1" name="group" type="String" />
			<argument index="2" name="notification" type="int" />
			<description>
				Отправляет данное уведомление всем членам [code]группы[/code], соблюдая заданные [enum GroupCallFlags].
			</description>
		</method>
		<method name="queue_delete">
			<return type="void" />
			<argument index="0" name="obj" type="Object" />
			<description>
				Ставит заданный объект в очередь на удаление, откладывая вызов [метода Object.free] до окончания текущего кадра.
			</description>
		</method>
		<method name="quit">
			<return type="void" />
			<argument index="0" name="exit_code" type="int" default="-1" />
			<description>
				Завершает работу приложения в конце текущей итерации. В качестве аргумента может быть передан [code]exit_code[/code] процесса. Если этот аргумент равен [code]0[/code] или больше, он переопределит [member OS.exit_code], определенный перед выходом из приложения.
				[b]Примечание:[/b] На iOS этот метод не работает. Вместо этого, согласно рекомендациям iOS Human Interface Guidelines, пользователь должен закрывать приложения с помощью кнопки Home.
			</description>
		</method>
		<method name="reload_current_scene">
			<return type="int" enum="Error" />
			<description>
				Перезагружает активную в данный момент сцену.
				Возвращает [константу OK] в случае успеха, [константу ERR_UNCONFIGURED], если [член current_scene] еще не определен, [константу ERR_CANT_OPEN], если [член current_scene] не может быть загружен в [PackedScene], или [константу ERR_CANT_CREATE], если сцена не может быть инстанцирована.
			</description>
		</method>
		<method name="set_group">
			<return type="void" />
			<argument index="0" name="group" type="String" />
			<argument index="1" name="property" type="String" />
			<argument index="2" name="value" type="Variant" />
			<description>
				Устанавливает заданное [code]свойство[/code] в [code]значение[/code] для всех членов данной группы.
			</description>
		</method>
		<method name="set_group_flags">
			<return type="void" />
			<argument index="0" name="call_flags" type="int" />
			<argument index="1" name="group" type="String" />
			<argument index="2" name="property" type="String" />
			<argument index="3" name="value" type="Variant" />
			<description>
				Устанавливает заданное [code]свойство[/code] в [code]значение[/code] для всех членов данной группы, соблюдая заданные [enum GroupCallFlags].
			</description>
		</method>
		<method name="set_input_as_handled">
			<return type="void" />
			<description>
				Отмечает последнее событие [InputEvent] как обработанное.
			</description>
		</method>
		<method name="set_screen_stretch">
			<return type="void" />
			<argument index="0" name="mode" type="int" enum="SceneTree.StretchMode" />
			<argument index="1" name="aspect" type="int" enum="SceneTree.StretchAspect" />
			<argument index="2" name="minsize" type="Vector2" />
			<argument index="3" name="scale" type="float" default="1" />
			<description>
				Настраивает растяжение экрана на заданные [enum StretchMode], [enum StretchAspect], минимальный размер и [code]масштаб[/code].
			</description>
		</method>
	</methods>
	<members>
		<member name="auto_accept_quit" type="bool" setter="set_auto_accept_quit" getter="is_auto_accept_quit" default="true">
			Если [code]true[/code], приложение автоматически принимает выход из игры.
			Для мобильных платформ смотрите [member quit_on_go_back].
		</member>
		<member name="current_scene" type="Node" setter="set_current_scene" getter="get_current_scene">
			The current scene.
		</member>
		<member name="debug_collisions_hint" type="bool" setter="set_debug_collisions_hint" getter="is_debugging_collisions_hint" default="false">
			Если [code]true[/code], то фигуры столкновений будут видны при запуске игры из редактора в целях отладки.
			[b]Примечание:[/b] Это свойство не предназначено для изменения во время выполнения проекта. Изменение значения [member debug_collisions_hint] во время работы проекта не приведет к желаемому эффекту.
		</member>
		<member name="debug_navigation_hint" type="bool" setter="set_debug_navigation_hint" getter="is_debugging_navigation_hint" default="false">
			Если [code]true[/code], навигационные полигоны будут видны при запуске игры из редактора в целях отладки.
			[b]Примечание:[/b] Это свойство не предназначено для изменения во время выполнения проекта. Изменение значения [member debug_navigation_hint] во время работы проекта не приведет к желаемому эффекту.
		</member>
		<member name="edited_scene_root" type="Node" setter="set_edited_scene_root" getter="get_edited_scene_root">
			Корень(root) редактируемой сцены.
		</member>
		<member name="multiplayer" type="MultiplayerAPI" setter="set_multiplayer" getter="get_multiplayer">
			Экземпляр [MultiplayerAPI] по умолчанию для данного [SceneTree].
		</member>
		<member name="multiplayer_poll" type="bool" setter="set_multiplayer_poll_enabled" getter="is_multiplayer_poll_enabled" default="true">
			Если [code]true[/code] (значение по умолчанию), включается автоматический опрос [MultiplayerAPI] для данного SceneTree во время [signal idle_frame].
			Если [code]false[/code], необходимо вручную вызывать [метод MultiplayerAPI.poll] для обработки сетевых пакетов и доставки RPCs/RSETs. Это позволяет запускать RPCs/RSETs в другом цикле (например, физика, поток, определенный временной шаг) и вручную защищать [Mutex] при обращении к [MultiplayerAPI] из потоков.
		</member>
		<member name="network_peer" type="NetworkedMultiplayerPeer" setter="set_network_peer" getter="get_network_peer">
			Объект-аналог для работы с системой RPC (эффективно включает сетевой режим, если установлен). В зависимости от самого пира, [SceneTree] станет сетевым сервером (проверяется с помощью [method is_network_server]) и установит сетевой режим корневого узла на master, либо станет обычным пиром с корневым узлом, установленным на puppet. Все дочерние узлы по умолчанию наследуют сетевой режим. Обработка событий, связанных с сетью (подключение, отключение, появление новых клиентов), осуществляется путем подключения к сигналам [SceneTree].
		</member>
		<member name="paused" type="bool" setter="set_pause" getter="is_paused" default="false">
			Если [code]true[/code], то [SceneTree] будет приостановлено. Это приведет к следующему поведению:
			- 2D и 3D-физика будет остановлена. Это включает в себя сигналы и обнаружение столкновений.
			- [метод Node._process], [метод Node._physics_process] и [метод Node._input] больше не будут вызываться в узлах.
		</member>
		<member name="physics_interpolation" type="bool" setter="set_physics_interpolation_enabled" getter="is_physics_interpolation_enabled" default="false">
			Хотя интерполяция физики обычно включается и выключается глобально с помощью [member ProjectSettings.physics/common/physics_interpolation], это свойство позволяет управлять интерполяцией во время выполнения.
		</member>
		<member name="quit_on_go_back" type="bool" setter="set_quit_on_go_back" getter="is_quit_on_go_back" default="true">
			Если [code]true[/code], приложение автоматически завершается при возврате назад (например, на Android).
			Чтобы обработать кнопку 'Go Back', когда эта опция отключена, используйте [константу MainLoop.NOTIFICATION_WM_GO_BACK_REQUEST].
		</member>
		<member name="refuse_new_network_connections" type="bool" setter="set_refuse_new_network_connections" getter="is_refusing_new_network_connections" default="false">
			Если [code]true[/code], то [member network_peer] дерева [SceneTree] отказывается от новых входящих соединений.
		</member>
		<member name="root" type="Viewport" setter="" getter="get_root">
			Корневое дерево(root) [SceneTree] [Viewport].
		</member>
		<member name="use_font_oversampling" type="bool" setter="set_use_font_oversampling" getter="is_using_font_oversampling" default="false">
			Если [code]true[/code], включается передискретизация шрифтов. Это означает, что шрифты [DynamicFont] будут отображаться в большем или меньшем размере, чем настроено, в зависимости от коэффициента масштабирования области просмотра. Например, во вьюпорте, масштабированном с коэффициентом 1,5, шрифт, имеющий размер 14, будет отображаться с размером 21 ([code]14 * 1,5[/code]).
			[b]Примечание:[/b] Передискретизация шрифтов используется только в том случае, если режим растяжения видового экрана - [константа STRETCH_MODE_VIEWPORT], и если режим аспекта растяжения отличается от [константы STRETCH_ASPECT_IGNORE].
			[b]Примечание:[/b] Это свойство устанавливается автоматически для активного [SceneTree] при запуске проекта на основе конфигурации [code]rendering/quality/dynamic_fonts/use_oversampling[/code] в [ProjectSettings]. Однако при необходимости это свойство можно переопределить во время выполнения проекта.
		</member>
	</members>
	<signals>
		<signal name="connected_to_server">
			<description>
				Выдается всякий раз, когда этот [SceneTree] [member network_peer] успешно подключается к серверу. Выдается только на клиентах.
			</description>
		</signal>
		<signal name="connection_failed">
			<description>
				Выдается всякий раз, когда [члену network_peer] этого [SceneTree] не удается установить соединение с сервером. Выдается только на клиентах.
			</description>
		</signal>
		<signal name="files_dropped">
			<argument index="0" name="files" type="PoolStringArray" />
			<argument index="1" name="screen" type="int" />
			<description>
				Выдается при перетаскивании файлов из файлового менеджера ОС в окно игры. Аргументами являются список путей к файлам и идентификатор экрана, на который было произведено перетаскивание.
			</description>
		</signal>
		<signal name="global_menu_action">
			<argument index="0" name="id" type="Variant" />
			<argument index="1" name="meta" type="Variant" />
			<description>
				Выдается при нажатии на пункт глобального меню.
			</description>
		</signal>
		<signal name="idle_frame">
			<description>
				Выдается непосредственно перед вызовом [метода Node._process] для каждого узла в [SceneTree].
			</description>
		</signal>
		<signal name="network_peer_connected">
			<argument index="0" name="id" type="int" />
			<description>
				Выдается всякий раз, когда [член network_peer] этого [SceneTree] соединяется с новым пиром. ID - это идентификатор нового пира. Клиенты получают уведомление, когда другие клиенты подключаются к тому же серверу. При подключении к серверу клиент также получает этот сигнал для сервера (с ID, равным 1).
			</description>
		</signal>
		<signal name="network_peer_disconnected">
			<argument index="0" name="id" type="int" />
			<description>
				Выдается всякий раз, когда [член network_peer] этого [SceneTree] отсоединяется от однорангового сервера. Клиенты получают уведомление, когда другие клиенты отсоединяются от того же сервера.
			</description>
		</signal>
		<signal name="node_added">
			<argument index="0" name="node" type="Node" />
			<description>
				Выдается каждый раз, когда в [SceneTree] добавляется узел.
			</description>
		</signal>
		<signal name="node_configuration_warning_changed">
			<argument index="0" name="node" type="Node" />
			<description>
				Выдается при изменении конфигурации узла. Выдается только в режиме [code]tool[/code].
			</description>
		</signal>
		<signal name="node_removed">
			<argument index="0" name="node" type="Node" />
			<description>
				Выдается всякий раз, когда узел удаляется из [SceneTree].
			</description>
		</signal>
		<signal name="node_renamed">
			<argument index="0" name="node" type="Node" />
			<description>
				Выдается всякий раз, когда узел переименовывается.
			</description>
		</signal>
		<signal name="physics_frame">
			<description>
				Выдается непосредственно перед вызовом [метода Node._physics_process] на каждом узле в [SceneTree].
			</description>
		</signal>
		<signal name="screen_resized">
			<description>
				Выдается при изменении разрешения экрана (полноэкранный режим) или размера окна (оконный режим).
			</description>
		</signal>
		<signal name="server_disconnected">
			<description>
				Выдается всякий раз, когда этот [SceneTree] [member network_peer] отсоединяется от сервера. Выдается только на клиентах.
			</description>
		</signal>
		<signal name="tree_changed">
			<description>
				Выдается при каждом изменении иерархии [SceneTree] (перемещение или переименование дочерних элементов и т.д.).
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="GROUP_CALL_DEFAULT" value="0" enum="GroupCallFlags">
			Вызов группы без флагов (по умолчанию).
		</constant>
		<constant name="GROUP_CALL_REVERSE" value="1" enum="GroupCallFlags">
			Вызывайте группу в обратном порядке.
		</constant>
		<constant name="GROUP_CALL_REALTIME" value="2" enum="GroupCallFlags">
			Немедленный вызов группы (обычно вызовы осуществляются в режиме ожидания).
		</constant>
		<constant name="GROUP_CALL_UNIQUE" value="4" enum="GroupCallFlags">
			Вызывайте группу только один раз, даже если вызов выполняется много раз.
			[b]Примечание:[/b] Аргументы не учитываются при определении того, является ли вызов уникальным или нет. Поэтому, когда один и тот же метод вызывается с разными аргументами, будет выполнен только первый вызов.
		</constant>
		<constant name="STRETCH_MODE_DISABLED" value="0" enum="StretchMode">
			Не растягивать.
		</constant>
		<constant name="STRETCH_MODE_2D" value="1" enum="StretchMode">
			Рендеринг растяжки в более высоком разрешении (интерполированный).
		</constant>
		<constant name="STRETCH_MODE_VIEWPORT" value="2" enum="StretchMode">
			Сохраняйте заданное разрешение дисплея. Без интерполяции. Содержимое может выглядеть пикселизированным.
		</constant>
		<constant name="STRETCH_ASPECT_IGNORE" value="0" enum="StretchAspect">
			Заполните окно содержимым, растянутым на лишнее пространство. Содержимое может выглядеть растянутым.
		</constant>
		<constant name="STRETCH_ASPECT_KEEP" value="1" enum="StretchAspect">
			Сохраните то же соотношение сторон, добавив черные полосы по обеим осям. Это предотвращает искажение.
		</constant>
		<constant name="STRETCH_ASPECT_KEEP_WIDTH" value="2" enum="StretchAspect">
			Разверните окно по вертикали. При слишком широком окне могут появиться черные полосы слева/справа.
		</constant>
		<constant name="STRETCH_ASPECT_KEEP_HEIGHT" value="3" enum="StretchAspect">
			Разверните окно по горизонтали. Если окно слишком велико, могут появиться черные полосы сверху/снизу.
		</constant>
		<constant name="STRETCH_ASPECT_EXPAND" value="4" enum="StretchAspect">
			Расширяйте изображение в обоих направлениях, сохраняя одинаковое соотношение сторон. Это предотвращает искажения и позволяет избежать черных полос.
		</constant>
	</constants>
</class>
