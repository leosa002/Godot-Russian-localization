<?xml version="1.0" encoding="UTF-8" ?>
<class name="HTTPRequest" inherits="Node" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Узел, способный отправлять запросы HTTP(S).
	</brief_description>
	<description>
		Узел, способный отправлять HTTP-запросы. Внутри использует [HTTPClient].

		Может использоваться для выполнения HTTP-запросов, т. е. загрузки или выгрузки файлов или веб-контента по HTTP.

		[b]Предупреждение:[/b] См. примечания и предупреждения по [HTTPClient] для ограничений, особенно в отношении безопасности SSL.

		[b]Пример обращения к REST API и печати одного из возвращаемых полей:[/b]
		[codeblock]
		func _ready():
		    # Создайте узел HTTP-запроса и подключите его сигнал завершения.
		    var http_request = HTTPRequest.new()
		    add_child(http_request)
		    http_request.connect("request_completed", self, "_http_request_completed")

		    # Выполните GET-запрос. Нижеприведенный URL-адрес возвращает JSON.
		    var error = http_request.request("https://httpbin.org/get")
		    if error != OK:
		        push_error("An error occurred in the HTTP request.")

		    # Выполните POST-запрос. Приведенный ниже URL возвращает JSON.
		    # Примечание: Не делайте одновременных запросов с помощью одного узла HTTPRequest.
		    # Сниппет ниже приведен только для справки.
		    var body = to_json({"name": "Godette"})
		    error = http_request.request("https://httpbin.org/post", [], true, HTTPClient.METHOD_POST, body)
		    if error != OK:
		        push_error("An error occurred in the HTTP request.")


		# Вызывается, когда HTTP-запрос завершен.
		func _http_request_completed(result, response_code, headers, body):
		    var response = parse_json(body.get_string_from_utf8())

		    # Выводит строку агента пользователя, используемого узлом HTTPRequest (как это распознается httpbin.org).
		    print(response.headers["User-Agent"])
		[/codeblock]
		[b]Пример загрузки и отображения изображения с помощью HTTPRequest:[/b]
		[codeblock]
		func _ready():
		    # Создайте узел HTTP-запроса и подключите его сигнал завершения.
		    var http_request = HTTPRequest.new()
		    add_child(http_request)
		    http_request.connect("request_completed", self, "_http_request_completed")

		    # Выполните HTTP-запрос. Нижеприведенный URL-адрес возвращает изображение в формате PNG:
		    var error = http_request.request("https://via.placeholder.com/512")
		    if error != OK:
		        push_error("An error occurred in the HTTP request.")


		# Вызывается, когда HTTP-запрос завершен:
		func _http_request_completed(result, response_code, headers, body):
		    var image = Image.new()
		    var error = image.load_png_from_buffer(body)
		    if error != OK:
		        push_error("Couldn't load the image.")

		    var texture = ImageTexture.new()
		    texture.create_from_image(image)

		    # Отобразите изображение в узле TextureRect:
		    var texture_rect = TextureRect.new()
		    add_child(texture_rect)
		    texture_rect.texture = texture
		[/codeblock]
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/networking/http_request_class.html</link>
		<link>$DOCS_URL/tutorials/networking/ssl_certificates.html</link>
	</tutorials>
	<methods>
		<method name="cancel_request">
			<return type="void" />
			<description>
				Отменяет текущий запрос.
			</description>
		</method>
		<method name="get_body_size" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает длину тела ответа.
				[b]Примечание:[/b] Некоторые веб-серверы могут не отправлять длину тела. В этом случае возвращаемое значение будет [code]-1[/code]. При использовании кодировки chunked длина тела также будет равна [code]-1[/code].
			</description>
		</method>
		<method name="get_downloaded_bytes" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество байт, загруженных этим HTTPRequest.
			</description>
		</method>
		<method name="get_http_client_status" qualifiers="const">
			<return type="int" enum="HTTPClient.Status" />
			<description>
				Возвращает текущее состояние базового [HTTPClient]. См. раздел [enum HTTPClient.Status].
			</description>
		</method>
		<method name="request">
			<return type="int" enum="Error" />
			<argument index="0" name="url" type="String" />
			<argument index="1" name="custom_headers" type="PoolStringArray" default="PoolStringArray(  )" />
			<argument index="2" name="ssl_validate_domain" type="bool" default="true" />
			<argument index="3" name="method" type="int" enum="HTTPClient.Method" default="0" />
			<argument index="4" name="request_data" type="String" default="&quot;&quot;" />
			<description>
				Создает запрос к базовому [HTTPClient]. Если нет ошибок конфигурации, пытается подключиться с помощью [метода HTTPClient.connect_to_host] и передает параметры в [метод HTTPClient.request].
				Возвращает [константу OK], если запрос успешно создан. (Не означает, что сервер ответил), [константа ERR_UNCONFIGURED], если его нет в дереве, [константа ERR_BUSY], если все еще обрабатывается предыдущий запрос, [константа ERR_INVALID_PARAMETER], если заданная строка не является правильным форматом URL, или [константа ERR_CANT_CONNECT], если не используется поток и [HTTPClient] не может подключиться к хосту.
				[b]Примечание:[/b] Если [code]method[/code] имеет значение [constant HTTPClient.METHOD_GET], полезная нагрузка, отправленная через [code]request_data[/code], может быть проигнорирована сервером или даже привести к отклонению запроса (подробнее см. [url=https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.1]RFC 7231 раздел 4.3.1[/url]). В качестве обходного пути можно отправлять данные в виде строки запроса в URL. Пример смотрите в [метод String.http_escape].
			</description>
		</method>
		<method name="request_raw">
			<return type="int" enum="Error" />
			<argument index="0" name="url" type="String" />
			<argument index="1" name="custom_headers" type="PoolStringArray" default="PoolStringArray(  )" />
			<argument index="2" name="ssl_validate_domain" type="bool" default="true" />
			<argument index="3" name="method" type="int" enum="HTTPClient.Method" default="0" />
			<argument index="4" name="request_data_raw" type="PoolByteArray" default="PoolByteArray(  )" />
			<description>
				Создает запрос к базовому [HTTPClient], используя для тела запроса необработанный массив байтов. Если нет ошибок конфигурации, пытается подключиться с помощью [метода HTTPClient.connect_to_host] и передает параметры в [метод HTTPClient.request].
				Возвращает [константу OK], если запрос успешно создан. (Не означает, что сервер ответил), [константа ERR_UNCONFIGURED], если его нет в дереве, [константа ERR_BUSY], если все еще обрабатывается предыдущий запрос, [константа ERR_INVALID_PARAMETER], если заданная строка не является правильным форматом URL, или [константа ERR_CANT_CONNECT], если не используется поток и [HTTPClient] не может подключиться к хосту.
			</description>
		</method>
		<method name="set_http_proxy">
			<return type="void" />
			<argument index="0" name="host" type="String" />
			<argument index="1" name="port" type="int" />
			<description>
				Устанавливает прокси-сервер для HTTP-запросов.
				Прокси-сервер не задается, если [code]host[/code] пуст или [code]port[/code] равен -1.
			</description>
		</method>
		<method name="set_https_proxy">
			<return type="void" />
			<argument index="0" name="host" type="String" />
			<argument index="1" name="port" type="int" />
			<description>
				Устанавливает прокси-сервер для запросов HTTPS.
				Прокси-сервер не задается, если [code]host[/code] пуст или [code]port[/code] равен -1.
			</description>
		</method>
	</methods>
	<members>
		<member name="body_size_limit" type="int" setter="set_body_size_limit" getter="get_body_size_limit" default="-1">
			Максимально допустимый размер тела ответа ([code]-1[/code] означает отсутствие ограничений). Если ожидаются только небольшие файлы, это может быть использовано для запрета получения слишком больших файлов, предотвращая потенциальные атаки типа "отказ в обслуживании".
		</member>
		<member name="download_chunk_size" type="int" setter="set_download_chunk_size" getter="get_download_chunk_size" default="65536">
			Размер используемого буфера и максимальное количество байт для чтения за итерацию. См. раздел [member HTTPClient.read_chunk_size].

			Установите меньшее значение (например, 4096 для 4 килобайт) при загрузке небольших файлов, чтобы уменьшить использование памяти за счет снижения скорости загрузки.
		</member>
		<member name="download_file" type="String" setter="set_download_file" getter="get_download_file" default="&quot;&quot;">
			Файл, в который будет производиться загрузка. Если задана непустая строка, то выходные данные запроса будут записаны в файл, расположенный по указанному пути. Если в указанном месте уже существует файл, он будет перезаписан, как только начнется прием данных тела.

			[b]Примечание:[/b] Папки не создаются автоматически при создании файла. Если [member download_file] указывает на вложенную папку, рекомендуется предварительно создать необходимые папки с помощью [method Directory.make_dir_recursive], чтобы обеспечить возможность записи файла.
		</member>
		<member name="max_redirects" type="int" setter="set_max_redirects" getter="get_max_redirects" default="8">
			Максимальное количество разрешенных перенаправлений. Используется для предотвращения бесконечных циклов перенаправления.
		</member>
		<member name="timeout" type="float" setter="set_timeout" getter="get_timeout" default="0.0">
			Если установить значение больше, чем [code]0.0[/code] до начала запроса, то HTTP-запрос завершится по истечении [code]timeout[/code] секунд, а запрос еще не [i]завершен[/i]. Для небольших HTTP-запросов, таких как использование REST API, установите [member timeout] в значение между [code]10.0[/code] и [code]30.0[/code], чтобы предотвратить застревание приложения, если запрос не получит своевременного ответа. Для загрузки файлов оставьте значение [code]0.0[/code], чтобы предотвратить неудачу загрузки, если она займет слишком много времени.
		</member>
		<member name="use_threads" type="bool" setter="set_use_threads" getter="is_using_threads" default="false">
			Если [code]true[/code], то для повышения производительности используется многопоточность.
		</member>
	</members>
	<signals>
		<signal name="request_completed">
			<argument index="0" name="result" type="int" />
			<argument index="1" name="response_code" type="int" />
			<argument index="2" name="headers" type="PoolStringArray" />
			<argument index="3" name="body" type="PoolByteArray" />
			<description>
				Выдается, когда запрос завершен.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="RESULT_SUCCESS" value="0" enum="Result">
			Запрос успешен.
		</constant>
		<constant name="RESULT_CHUNKED_BODY_SIZE_MISMATCH" value="1" enum="Result">
		</constant>
		<constant name="RESULT_CANT_CONNECT" value="2" enum="Result">
			Запрос не прошел при подключении.
		</constant>
		<constant name="RESULT_CANT_RESOLVE" value="3" enum="Result">
			Запрос не прошел при разрешении.
		</constant>
		<constant name="RESULT_CONNECTION_ERROR" value="4" enum="Result">
			Запрос не прошел из-за ошибки соединения (чтение/запись).
		</constant>
		<constant name="RESULT_SSL_HANDSHAKE_ERROR" value="5" enum="Result">
			Запрос не удалось выполнить при квитировании SSL.
		</constant>
		<constant name="RESULT_NO_RESPONSE" value="6" enum="Result">
			Запрос не имеет ответа (пока что).
		</constant>
		<constant name="RESULT_BODY_SIZE_LIMIT_EXCEEDED" value="7" enum="Result">
			Запрос превысил максимальный размер, см. [member body_size_limit].
		</constant>
		<constant name="RESULT_REQUEST_FAILED" value="8" enum="Result">
			Запрос не прошел (в настоящее время не используется).
		</constant>
		<constant name="RESULT_DOWNLOAD_FILE_CANT_OPEN" value="9" enum="Result">
			HTTPRequest не смог открыть файл загрузки.
		</constant>
		<constant name="RESULT_DOWNLOAD_FILE_WRITE_ERROR" value="10" enum="Result">
			HTTPRequest не смог записать файл загрузки.
		</constant>
		<constant name="RESULT_REDIRECT_LIMIT_REACHED" value="11" enum="Result">
			Запрос достиг максимального предела перенаправления, см. раздел [member max_redirects].
		</constant>
		<constant name="RESULT_TIMEOUT" value="12" enum="Result">
		</constant>
	</constants>
</class>
