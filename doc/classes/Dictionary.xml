<?xml version="1.0" encoding="UTF-8" ?>
<class name="Dictionary" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Тип словаря.
	</brief_description>
	<description>
		Тип словаря. Ассоциативный контейнер, содержащий значения, на которые ссылаются уникальные ключи. Словари состоят из пар ключей (которые должны быть уникальными) и значений. Словари сохраняют порядок вставки при добавлении элементов, хотя это может не отражаться при печати словаря. В других языках программирования эту структуру данных иногда называют хэш-картой или ассоциативным массивом.
		Вы можете определить словарь, поместив разделенный запятыми список пар [code]ключ: значение[/code] в фигурные скобки [code]{}[/code].
		Стирание элементов во время итерации по ним [b]не поддерживается[/b] и приведет к неопределенному поведению.
		[b]Примечание:[/b] Словари всегда передаются по ссылке. Чтобы получить копию словаря, которая может быть изменена независимо от исходного словаря, используйте [метод duplicate].
		Создание словаря:
		[codeblock]
		var my_dict = {} # Создает пустой словарь.

		var dict_variable_key = "Another key name"
		var dict_variable_value = "value2"
		var another_dict = {
		    "Some key name": "value1",
		    dict_variable_key: dict_variable_value,
		}

		var points_dict = {"White": 50, "Yellow": 75, "Orange": 100}

		# Альтернативный синтаксис в стиле Lua.
		# Не требует кавычек вокруг ключей, но в качестве имен ключей можно использовать только строковые константы.
		# Кроме того, имена ключей должны начинаться с буквы или символа подчеркивания.
		# Здесь `some_key` - строковый литерал, а не переменная!
		another_dict = {
		    some_key = 42,
		}
		[/codeblock]
		Вы можете получить доступ к значениям словаря, обратившись к соответствующему ключу. В приведенном выше примере [code]points_dict["White"][/code] вернет [code]50[/code]. Вы также можете написать [code]points_dict.White[/code], что эквивалентно. Однако вам придется использовать синтаксис скобок, если ключ, по которому вы обращаетесь к словарю, не является фиксированной строкой (например, числом или переменной).
		[codeblock]
		export(String, "White", "Yellow", "Orange") var my_color
		var points_dict = {"White": 50, "Yellow": 75, "Orange": 100}
		func _ready():
		    # Мы не можем использовать здесь синтаксис точки, поскольку `my_color` - это переменная.
		    var points = points_dict[my_color]
		[/codeblock]
		В приведенном выше коде [code]points[/code] будет присвоено значение, сопряженное с соответствующим цветом, выбранным в [code]my_color[/code].
		Словари могут содержать более сложные данные:
		[codeblock]
		my_dict = {"First Array": [1, 2, 3, 4]} # Assigns an Array to a String key.
		[/codeblock]
		Чтобы добавить ключ в существующий словарь, получите к нему доступ как к существующему ключу и назначьте его:
		[codeblock]
		var points_dict = {"White": 50, "Yellow": 75, "Orange": 100}
		points_dict["Blue"] = 150 # Добавьте "Blue" в качестве ключа и присвойте ему значение 150.
		[/codeblock]
		Наконец, словари могут содержать разные типы ключей и значений в одном и том же словаре:
		[codeblock]
		# Это правильный словарь.
		# Чтобы получить доступ к строке "Вложенное значение" ниже, используйте `my_dict.sub_dict.sub_key` или `my_dict["sub_dict"]["sub_key"]`.
		# Стили индексирования можно смешивать и сочетать в зависимости от ваших потребностей.
		var my_dict = {
		    "String Key": 5,
		    4: [1, 2, 3],
		    7: "Hello",
		    "sub_dict": {"sub_key": "Nested value"},
		}
		[/codeblock]
		[b]Примечание:[/b] В отличие от [Array]ов, вы не можете сравнивать словари напрямую:
		[codeblock]
		array1 = [1, 2, 3]
		array2 = [1, 2, 3]

		func compare_arrays():
		    print(array1 == array2) # Будет выведено true.

		var dict1 = {"a": 1, "b": 2, "c": 3}
		var dict2 = {"a": 1, "b": 2, "c": 3}

		func compare_dictionaries():
		    print(dict1 == dict2) # Не будет напечатано истинное значение.
		[/codeblock]
		Прежде чем сравнивать их, необходимо вычислить хэш словаря с помощью [method hash]:
		[codeblock]
		var dict1 = {"a": 1, "b": 2, "c": 3}
		var dict2 = {"a": 1, "b": 2, "c": 3}

		func compare_dictionaries():
		    print(dict1.hash() == dict2.hash()) # Будет выведено true.
		[/codeblock]
		[b]Примечание:[/b] При объявлении словаря с помощью [code]const[/code] сам словарь все еще может быть изменен путем определения значений отдельных ключей. Использование [code]const[/code] только предотвратит присвоение константе другого значения после ее инициализации.
	</description>
	<tutorials>
		<link title="GDScript basics: Dictionary">$DOCS_URL/tutorials/scripting/gdscript/gdscript_basics.html#dictionary</link>
		<link title="3D Voxel Demo">https://godotengine.org/asset-library/asset/676</link>
		<link title="OS Test Demo">https://godotengine.org/asset-library/asset/677</link>
	</tutorials>
	<methods>
		<method name="clear">
			<description>
				Очистите словарь, удалив все пары ключ/значение.
			</description>
		</method>
		<method name="duplicate">
			<return type="Dictionary" />
			<argument index="0" name="deep" type="bool" default="false" />
			<description>
				Создает копию словаря и возвращает ее. Параметр [code]deep[/code] заставляет внутренние словари и массивы копироваться рекурсивно, но не относится к объектам.
			</description>
		</method>
		<method name="empty">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если словарь пуст.
			</description>
		</method>
		<method name="erase">
			<return type="bool" />
			<argument index="0" name="key" type="Variant" />
			<description>
				Стирает пару ключ/значение в словаре по ключу. Возвращает [code]true[/code], если данный ключ присутствовал в словаре, [code]false[/code] в противном случае.
				[b]Примечание:[/b] Не стирайте элементы во время итерации по словарю. Вместо этого можно выполнить итерацию по массиву [ключи метода].
			</description>
		</method>
		<method name="get">
			<return type="Variant" />
			<argument index="0" name="key" type="Variant" />
			<argument index="1" name="default" type="Variant" default="null" />
			<description>
				Возвращает текущее значение для указанного ключа в [Dictionary]. Если ключ не существует, метод возвращает значение необязательного аргумента по умолчанию или [code]null[/code], если он опущен.
			</description>
		</method>
		<method name="get_or_add">
			<return type="Variant" />
			<argument index="0" name="key" type="Variant" />
			<argument index="1" name="default" type="Variant" default="null" />
			<description>
				Получает значение и убеждается, что ключ установлен. Если [code]ключ[/code] существует в словаре, он ведет себя как [метод get]. В противном случае в словарь вставляется значение [code]по умолчанию[/code] и возвращается.
			</description>
		</method>
		<method name="has">
			<return type="bool" />
			<argument index="0" name="key" type="Variant" />
			<description>
				Возвращает [code]true[/code], если словарь имеет заданный ключ.
				[b]Примечание:[/b] Это эквивалентно использованию оператора [code]in[/code] следующим образом:
				[codeblock]
				# Оценивается как `true`.
				if "godot" in {"godot": "engine"}:
				    pass
				[/codeblock]
				Этот метод (как и оператор [code]in[/code]) будет иметь значение [code]true[/code] до тех пор, пока существует ключ, даже если связанное с ним значение [code]null[/code].
			</description>
		</method>
		<method name="has_all">
			<return type="bool" />
			<argument index="0" name="keys" type="Array" />
			<description>
				Возвращает [code]true[/code], если словарь содержит все ключи из заданного массива.
			</description>
		</method>
		<method name="hash">
			<return type="int" />
			<description>
				Возвращает хэшированное 32-битное целое значение, представляющее содержимое словаря. Это можно использовать для сравнения словарей по значению:
				[codeblock]
				var dict1 = {0: 10}
				var dict2 = {0: 10}
				# Строка ниже выводит `true`, тогда как при прямом сравнении обеих переменных она вывела бы `false`.
				print(dict1.hash() == dict2.hash())
				[/codeblock]
				[b]Примечание:[/b] Словари с одинаковыми ключами/значениями, но расположенными в разном порядке, будут иметь разный хэш.
				[b]Примечание:[/b] Словари с одинаковым содержимым всегда будут давать одинаковые хэш-значения. Однако обратное не верно. Возвращение одинаковых хэш-значений [i]не означает[/i], что словари одинаковы, потому что разные словари могут иметь одинаковые хэш-значения из-за коллизий хэшей.
			</description>
		</method>
		<method name="keys">
			<return type="Array" />
			<description>
				Возвращает список ключей в [Dictionary].
			</description>
		</method>
		<method name="merge">
			<argument index="0" name="dictionary" type="Dictionary" />
			<argument index="1" name="overwrite" type="bool" default="false" />
			<description>
				Добавляет элементы из [code]словаря[/code] в данный [Dictionary]. По умолчанию дублирующие ключи не будут копироваться, если только [code]overwrite[/code] не [code]true[/code].
			</description>
		</method>
		<method name="size">
			<return type="int" />
			<description>
				Возвращает количество ключей в словаре.
			</description>
		</method>
		<method name="values">
			<return type="Array" />
			<description>
				Возвращает список значений в [Dictionary].
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
