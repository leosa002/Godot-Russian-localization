<?xml version="1.0" encoding="UTF-8" ?>
<class name="SceneTreeTween" inherits="Reference" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Легкий объект, используемый для анимации общего назначения с помощью скрипта, используя [Tweener]ы.
	</brief_description>
	<description>
		[SceneTreeTween] - это твин, управляемый деревом сцены. В отличие от [Tween], он не требует инстанцирования узла.
		[SceneTreeTween] более легковесны, чем [AnimationPlayer], поэтому они очень хорошо подходят для простых анимаций или общих задач, которые не требуют визуальной подстройки, предоставляемой редактором. Их можно использовать по принципу "выстрелил и забыл" для некоторых логических операций, которые обычно выполняются с помощью кода. Например, вы можете заставить что-то периодически стрелять, используя зацикленный [CallbackTweener] с задержкой.
		Сцена [SceneTreeTween] может быть создана с помощью [method SceneTree.create_tween] или [method Node.create_tween]. [SceneTreeTween], созданные вручную (т. е. с помощью [code]Tween.new()[/code]), недействительны. Они не могут быть использованы для перестановки значений, но вы можете выполнить ручную интерполяцию с помощью [метод interpolate_value].
		Анимация создается путем добавления [Tweener]ов к объекту [SceneTreeTween] с помощью [method tween_property], [method tween_interval], [method tween_callback] или [method tween_method]:
		[codeblock]
		var tween = get_tree().create_tween()
		tween.tween_property($Sprite, "modulate", Color.red, 1)
		tween.tween_property($Sprite, "scale", Vector2(), 1)
		tween.tween_callback($Sprite, "queue_free")
		[/codeblock]
		В результате этой последовательности узел [code]$Sprite[/code] станет красным, затем уменьшится, а затем вызовет [метод Node.queue_free], чтобы освободить спрайт. По умолчанию [Tweener]ы выполняются один за другим. Это поведение можно изменить с помощью [method parallel] и [method set_parallel].
		Когда [Tweener] создается с помощью одного из методов [code]tween_*[/code], для изменения свойств этого [Tweener] можно использовать цепочку вызовов методов. Например, если вы хотите установить другой тип перехода в приведенном выше примере, вы можете использовать [method set_trans]:
		[codeblock]
		var tween = get_tree().create_tween()
		tween.tween_property($Sprite, "modulate", Color.red, 1).set_trans(Tween.TRANS_SINE)
		tween.tween_property($Sprite, "scale", Vector2(), 1).set_trans(Tween.TRANS_BOUNCE)
		tween.tween_callback($Sprite, "queue_free")
		[/codeblock]
		Большинство методов [SceneTreeTween] также можно связать в цепочку. В следующем примере [SceneTreeTween] привязывается к узлу запущенного скрипта и для его [Tweener]ов устанавливается переход по умолчанию:
		[codeblock]
		var tween = get_tree().create_tween().bind_node(self).set_trans(Tween.TRANS_ELASTIC)
		tween.tween_property($Sprite, "modulate", Color.red, 1)
		tween.tween_property($Sprite, "scale", Vector2(), 1)
		tween.tween_callback($Sprite, "queue_free")
		[/codeblock]
		Еще одно интересное применение [SceneTreeTween]ов - анимация произвольных наборов объектов:
		[codeblock]
		var tween = create_tween()
		for sprite in get_children():
		    tween.tween_property(sprite, "position", Vector2(0, 0), 1)
		[/codeblock]
		В приведенном выше примере все дочерние элементы узла перемещаются друг за другом в позицию (0, 0).
		Не следует использовать более одного [SceneTreeTween] для каждого свойства объекта. Если два или более твинов одновременно анимируют одно свойство, последний созданный твин будет иметь приоритет и присвоит окончательное значение. Если вы хотите прервать и запустить анимацию, присвойте [SceneTreeTween] переменной:
		[codeblock]
		var tween
		func animate():
		    if tween:
		        tween.kill() # Прервать предыдущую анимацию.
		    tween = create_tween()
		[/codeblock]
		Некоторые [Tweener]ы используют переходы и ускорения. Первый принимает константу [enum Tween.TransitionType] и определяет способ обработки времени анимации (примеры см. на [url=https://easings.net/]easings.net[/url]). Второй принимает константу [enum Tween.EaseType] и определяет, где [code]trans_type[/code] применяется к интерполяции (в начале, в конце или в обоих случаях). Если вы не знаете, какой переход и смягчение выбрать, вы можете попробовать разные константы [enum Tween.TransitionType] с [constant Tween.EASE_IN_OUT], и использовать ту, которая выглядит лучше всего.
		[url=https://raw.githubusercontent.com/godotengine/godot-docs/3.5/img/tween_cheatsheet.png]Tween easing and transition types cheatsheet[/url]
		[b]Примечание:[/b] Все [SceneTreeTween] по умолчанию запускаются автоматически. Чтобы предотвратить автозапуск [SceneTreeTween], можно вызвать [метод stop] сразу после его создания.
		[b]Примечание:[/b] [SceneTreeTween] обрабатываются после всех узлов в текущем кадре, то есть после [method Node._process] или [method Node._physics_process] (в зависимости от [enum Tween.TweenProcessMode]).
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="bind_node">
			<return type="SceneTreeTween" />
			<argument index="0" name="node" type="Node" />
			<description>
				Связывает данный [SceneTreeTween] с заданным [code]узлом[/code]. [SceneTreeTween] обрабатываются непосредственно [SceneTree], поэтому они работают независимо от анимированных узлов. Когда вы связываете [Node] с [SceneTreeTween], [SceneTreeTween] остановит анимацию, когда объект не находится внутри дерева, и [SceneTreeTween] будет автоматически завершен, когда связанный объект будет освобожден. Также [константа TWEEN_PAUSE_BOUND] сделает поведение паузы зависимым от связанного узла.
				Для более короткого способа создания и привязки [SceneTreeTween] можно использовать [метод Node.create_tween].
			</description>
		</method>
		<method name="chain">
			<return type="SceneTreeTween" />
			<description>
				Используется для создания цепочки из двух [Tweener]ов после вызова [метода set_parallel] с [code]true[/code].
				[codeblock]
				var tween = create_tween().set_parallel(true)
				tween.tween_property(...)
				tween.tween_property(...) # Будет проходить параллельно с вышеперечисленными.
				tween.chain().tween_property(...) # Запускается после завершения двух вышеописанных действий.
				[/codeblock]
			</description>
		</method>
		<method name="custom_step">
			<return type="bool" />
			<argument index="0" name="delta" type="float" />
			<description>
				Обрабатывает [SceneTreeTween] на заданное [code]delta[/code] значение, в секундах. Это в основном полезно для ручного управления, когда [SceneTreeTween] приостановлен. Его также можно использовать для немедленного завершения анимации [SceneTreeTween], задав [code]delta[/code] больше, чем вся продолжительность анимации [SceneTreeTween].
				Возвращает [code]true[/code], если в [SceneTreeTween] еще есть [Tweener]ы, которые не завершились.
				[b]Примечание:[/b] Сцена [SceneTreeTween] станет недействительной в следующем кадре обработки после завершения ее анимации. Вызов [метода stop] после выполнения [метода custom_step] вместо этого сохраняет и сбрасывает [SceneTreeTween].
			</description>
		</method>
		<method name="get_total_elapsed_time" qualifiers="const">
			<return type="float" />
			<description>
				Возвращает общее время в секундах, в течение которого происходит анимация [SceneTreeTween] (т.е. время с момента начала анимации, без учета пауз и т.д.). На время влияет [метод set_speed_scale], а [метод stop] сбрасывает его в [code]0[/code].
				[b]Примечание:[/b] Поскольку это происходит в результате накопления дельт кадров, время, возвращаемое после завершения анимации [SceneTreeTween], будет немного больше, чем фактическая продолжительность [SceneTreeTween].
			</description>
		</method>
		<method name="interpolate_value" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="initial_value" type="Variant" />
			<argument index="1" name="delta_value" type="Variant" />
			<argument index="2" name="elapsed_time" type="float" />
			<argument index="3" name="duration" type="float" />
			<argument index="4" name="trans_type" type="int" enum="Tween.TransitionType" />
			<argument index="5" name="ease_type" type="int" enum="Tween.EaseType" />
			<description>
				Этот метод можно использовать для ручной интерполяции значения, когда вы не хотите, чтобы [SceneTreeTween] выполнял анимацию за вас. Он похож на [метод @GDScript.lerp], но с поддержкой пользовательских переходов и смягчений.
				[code]initial_value[/code] - начальное значение интерполяции.
				[code]delta_value[/code] - это изменение значения в интерполяции, то есть оно равно [code]final_value - initial_value[/code].
				[code]elapsed_time[/code] - это время в секундах, прошедшее после начала интерполяции, которое используется для управления положением интерполяции. Например, если оно равно половине [code]duration[/code], интерполированное значение будет находиться на полпути между начальным и конечным значениями. Это значение также может быть больше [code]duration[/code] или меньше 0, что приведет к экстраполяции значения.
				[code]duration[/code] - общее время интерполяции.
				[b]Примечание:[/b] Если [code]duration[/code] равен [code]0[/code], метод всегда будет возвращать конечное значение, независимо от [code]elapsed_time[/code].
			</description>
		</method>
		<method name="is_running" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает, запущен ли [SceneTreeTween] в данный момент, т.е. не был ли он приостановлен и не завершен ли он.
			</description>
		</method>
		<method name="is_valid" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает, является ли [SceneTreeTween] действительным. Действительный [SceneTreeTween] - это [SceneTreeTween], содержащийся в дереве сцены (т. е. массив из [метода SceneTree.get_processed_tweens] будет содержать этот [SceneTreeTween]). [SceneTreeTween] может стать недействительным, когда он закончил выполнение твинов, был убит или создан с помощью [code]SceneTreeTween.new()[/code]. К недействительным [SceneTreeTween] нельзя добавлять [Tweener]. Однако вы все еще можете использовать [метод interpolate_value].
			</description>
		</method>
		<method name="kill">
			<return type="void" />
			<description>
				Прерывает все операции переключения и аннулирует [SceneTreeTween].
			</description>
		</method>
		<method name="parallel">
			<return type="SceneTreeTween" />
			<description>
				Заставляет следующий [Tweener] идти параллельно предыдущему. Пример:
				[codeblock]
				var tween = create_tween()
				tween.tween_property(...)
				tween.parallel().tween_property(...)
				tween.parallel().tween_property(...)
				[/codeblock]
				Все [Tweener]ы в примере будут выполняться одновременно.
				Вы можете сделать [SceneTreeTween] параллельным по умолчанию с помощью [method set_parallel].
			</description>
		</method>
		<method name="pause">
			<return type="void" />
			<description>
				Приостанавливает анимацию. Анимацию можно возобновить, используя [метод воспроизведения/play].
			</description>
		</method>
		<method name="play">
			<return type="void" />
			<description>
				Возобновляет приостановленный или остановленный [SceneTreeTween].
			</description>
		</method>
		<method name="set_ease">
			<return type="SceneTreeTween" />
			<argument index="0" name="ease" type="int" enum="Tween.EaseType" />
			<description>
				Устанавливает тип легкости по умолчанию для [PropertyTweener]ов и [MethodTweener]ов, анимируемых этим [SceneTreeTween].
			</description>
		</method>
		<method name="set_loops">
			<return type="SceneTreeTween" />
			<argument index="0" name="loops" type="int" default="0" />
			<description>
				Устанавливает количество повторений последовательности твинов, т.е. [code]set_loops(2)[/code] запустит анимацию дважды.
				Вызов этого метода без аргументов заставит [SceneTreeTween] работать бесконечно, пока его не убьют с помощью [method kill], не освободят связанный узел [SceneTreeTween] или не освободят все анимированные объекты (что делает дальнейшую анимацию невозможной).
				[b]Предупреждение:[/b] При использовании бесконечных циклов обязательно добавляйте некоторую длительность/задержку. Во избежание зависания игры зацикленные анимации с нулевой длительностью (например, одиночный [CallbackTweener] без задержки) останавливаются после небольшого количества циклов, что может привести к неожиданным результатам. Если время жизни [SceneTreeTween] зависит от какого-либо узла, всегда используйте [метод bind_node].
			</description>
		</method>
		<method name="set_parallel">
			<return type="SceneTreeTween" />
			<argument index="0" name="parallel" type="bool" default="true" />
			<description>
				Если [code]parallel[/code] имеет значение [code]true[/code], то [Tweener]ы, добавленные после этого метода, по умолчанию будут выполняться одновременно, а не последовательно.
			</description>
		</method>
		<method name="set_pause_mode">
			<return type="SceneTreeTween" />
			<argument index="0" name="mode" type="int" enum="SceneTreeTween.TweenPauseMode" />
			<description>
				Определяет поведение [SceneTreeTween], когда [SceneTree] приостанавливается. Проверьте [enum TweenPauseMode] для опций.
				Значение по умолчанию - [константа TWEEN_PAUSE_BOUND].
			</description>
		</method>
		<method name="set_process_mode">
			<return type="SceneTreeTween" />
			<argument index="0" name="mode" type="int" enum="Tween.TweenProcessMode" />
			<description>
				Определяет, должен ли [SceneTreeTween] выполняться во время холостого кадра (см. [method Node._process]) или кадра физики (см. [method Node._physics_process]).
				Значение по умолчанию - [константа Tween.TWEEN_PROCESS_IDLE].
			</description>
		</method>
		<method name="set_speed_scale">
			<return type="SceneTreeTween" />
			<argument index="0" name="speed" type="float" />
			<description>
				Изменяет скорость твининга. Это влияет на все [Tweener]ы и их задержки.
			</description>
		</method>
		<method name="set_trans">
			<return type="SceneTreeTween" />
			<argument index="0" name="trans" type="int" enum="Tween.TransitionType" />
			<description>
				Устанавливает тип перехода по умолчанию для [PropertyTweener]ов и [MethodTweener]ов, анимируемых этим [SceneTreeTween].
			</description>
		</method>
		<method name="stop">
			<return type="void" />
			<description>
				Останавливает твининг и возвращает [SceneTreeTween] в исходное состояние. При этом не будут удалены все добавленные [Tweener]ы.
			</description>
		</method>
		<method name="tween_callback">
			<return type="CallbackTweener" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="method" type="String" />
			<argument index="2" name="binds" type="Array" default="[  ]" />
			<description>
				Создает и добавляет [CallbackTweener]. Этот метод может быть использован для вызова произвольного метода в любом объекте. Используйте [code]binds[/code], чтобы связать дополнительные аргументы для вызова.
				Пример: объект, который стреляет каждые 1 секунду.
				[codeblock]
				var tween = get_tree().create_tween().set_loops()
				tween.tween_callback(self, "shoot").set_delay(1)
				[/codeblock]
				Пример: превращение спрайта в красный, а затем в синий с задержкой в 2 секунды.
				[codeblock]
				var tween = get_tree().create_tween()
				tween.tween_callback($Sprite, "set_modulate", [Color.red]).set_delay(2)
				tween.tween_callback($Sprite, "set_modulate", [Color.blue]).set_delay(2)
				[/codeblock]
			</description>
		</method>
		<method name="tween_interval">
			<return type="IntervalTweener" />
			<argument index="0" name="time" type="float" />
			<description>
				Создает и добавляет [IntervalTweener]. Этот метод можно использовать для создания задержек в анимации твинов, как альтернативу использованию задержек в других [Tweener]ах, или когда анимация отсутствует (в этом случае [SceneTreeTween] действует как таймер). [code]time[/code] - это длина интервала, в секундах.
				Пример: создание интервала при выполнении кода.
				[codeblock]
				# ... некоторый код
				yield(create_tween().tween_interval(2), "finished")
				# ... more code
				[/codeblock]
				Пример: создание объекта, который двигается вперед-назад и прыгает каждые несколько секунд.
				[codeblock]
				var tween = create_tween().set_loops()
				tween.tween_property($Sprite, "position:x", 200.0, 1).as_relative()
				tween.tween_callback(self, "jump")
				tween.tween_interval(2)
				tween.tween_property($Sprite, "position:x", -200.0, 1).as_relative()
				tween.tween_callback(self, "jump")
				tween.tween_interval(2)
				[/codeblock]
			</description>
		</method>
		<method name="tween_method">
			<return type="MethodTweener" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="method" type="String" />
			<argument index="2" name="from" type="Variant" />
			<argument index="3" name="to" type="Variant" />
			<argument index="4" name="duration" type="float" />
			<argument index="5" name="binds" type="Array" default="[  ]" />
			<description>
				Создает и добавляет [MethodTweener]. Этот метод похож на комбинацию [method tween_callback] и [method tween_property]. Он вызывает метод с течением времени с заданным в качестве аргумента значением tweened. Значение изменяется между [code]from[/code] и [code]to[/code] в течение времени, указанного в [code]duration[/code], в секундах. Используйте [code]binds[/code], чтобы связать дополнительные аргументы для вызова. Вы можете использовать [method MethodTweener.set_ease] и [method MethodTweener.set_trans] для настройки смягчения и перехода значения или [method MethodTweener.set_delay] для задержки твининга.
				Пример: переход 3D-объекта из одной точки в другую.
				[codeblock]
				var tween = create_tween()
				tween.tween_method(self, "look_at", Vector3(-1, 0, -1), Vector3(1, 0, -1), 1, [Vector3.UP]) # Метод look_at() принимает вектор в качестве второго аргумента.
				[/codeblock]
				Пример: установка текста [Label], используя промежуточный метод и после задержки.
				[codeblock]
				func _ready():
				    var tween = create_tween()
				    tween.tween_method(self, "set_label_text", 0, 10, 1).set_delay(1)

				func set_label_text(value: int):
				    $Label.text = "Counting " + str(value)
				[/codeblock]
			</description>
		</method>
		<method name="tween_property">
			<return type="PropertyTweener" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="property" type="NodePath" />
			<argument index="2" name="final_val" type="Variant" />
			<argument index="3" name="duration" type="float" />
			<description>
				Создает и добавляет [PropertyTweener]. Этот метод изменяет [code]свойство[/code] объекта [code]object[/code] между начальным значением и [code]final_val[/code] за промежуток времени, равный [code]duration[/code], в секундах. По умолчанию начальное значение - это значение свойства на момент начала работы [PropertyTweener]. Например:
				[codeblock]
				var tween = create_tween()
				tween.tween_property($Sprite, "position", Vector2(100, 200), 1)
				tween.tween_property($Sprite, "position", Vector2(200, 300), 1)
				[/codeblock]
				переместит спрайт на позицию (100, 200), а затем на (200, 300). Если вы используете [method PropertyTweener.from] или [method PropertyTweener.from_current], начальная позиция будет заменена заданным значением. Смотрите другие методы в [PropertyTweener], чтобы увидеть, как можно еще больше настраивать твининг.
				[b]Примечание:[/b] Вы можете найти правильное имя свойства, наведя курсор на него в Инспекторе. Вы также можете указать компоненты свойства напрямую, используя [code]"property:component"[/code] (например, [code]position:x[/code]), и тогда оно будет применяться только к этому конкретному компоненту.
				Пример: перемещение объекта дважды из одной и той же позиции с разными типами перехода.
				[codeblock]
				var tween = create_tween()
				tween.tween_property($Sprite, "position", Vector2.RIGHT * 300, 1).as_relative().set_trans(Tween.TRANS_SINE)
				tween.tween_property($Sprite, "position", Vector2.RIGHT * 300, 1).as_relative().from_current().set_trans(Tween.TRANS_EXPO)
				[/codeblock]
			</description>
		</method>
	</methods>
	<signals>
		<signal name="finished">
			<description>
				Выдается, когда [SceneTreeTween] завершает все переключения. Никогда не выдается, если для [SceneTreeTween] установлен бесконечный цикл (см. [метод set_loops]).
				[b]Примечание:[/b] Сцена [SceneTreeTween] удаляется (аннулируется) в следующем кадре обработки после выдачи этого сигнала. Вызов [метода stop] внутри обратного вызова сигнала предотвратит удаление [SceneTreeTween].
			</description>
		</signal>
		<signal name="loop_finished">
			<argument index="0" name="loop_count" type="int" />
			<description>
				Выдается при завершении полного цикла (см. [метод set_loops]) с указанием индекса цикла. Этот сигнал не выдается после завершения цикла, для этого случая используйте [signal finished].
			</description>
		</signal>
		<signal name="step_finished">
			<argument index="0" name="idx" type="int" />
			<description>
				Выдается при завершении одного шага [SceneTreeTween] с указанием индекса шага. Один шаг - это либо один [Tweener], либо группа [Tweener]ов, работающих параллельно.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="TWEEN_PAUSE_BOUND" value="0" enum="TweenPauseMode">
			Если у [SceneTreeTween] есть связанный узел, он будет обрабатываться, когда этот узел может обрабатываться (см. [member Node.pause_mode]). В противном случае это то же самое, что и [constant TWEEN_PAUSE_STOP].
		</constant>
		<constant name="TWEEN_PAUSE_STOP" value="1" enum="TweenPauseMode">
			Если [SceneTree] приостановлен, [SceneTreeTween] также приостановится.
		</constant>
		<constant name="TWEEN_PAUSE_PROCESS" value="2" enum="TweenPauseMode">
			Процесс [SceneTreeTween] будет выполняться независимо от того, приостановлен ли [SceneTree].
		</constant>
	</constants>
</class>
