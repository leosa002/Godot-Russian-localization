<?xml version="1.0" encoding="UTF-8" ?>
<class name="Array" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Общий тип данных массива.
	</brief_description>
	<description>
		Общий массив, который может содержать несколько элементов любого типа, доступных по числовому индексу, начиная с 0. Отрицательные индексы могут использоваться для отсчета от обратного, как в Python (-1 - последний элемент, -2 - предпоследний и т.д.).
		[b]Пример:[/b]
		[codeblock]
		var array = ["Один", 2, 3, "Четыре"]
		print(array[0]) # Один.
		print(array[2]) # 3.
		print(array[-1]) # Четыре.
		array[2] = "Три"
		print(array[-2]) # Три.
		[/codeblock].
		Массивы можно конкатенировать с помощью оператора [code]+[/code]:
		[codeblock].
		var array1 = ["Один", 2]
		var array2 = [3, "четыре"]
		print(array1 + array2) # ["Один", 2, 3, "Четыре"]
		[/codeblock]
		[b]Примечание:[/b] Конкатенация с помощью оператора [code]+=[/code] создает новый массив, что имеет свою стоимость. Если необходимо добавить к существующему массиву другой массив, то более эффективным является [метод append_array].
		[b]Примечание:[/b] Массивы всегда передаются по ссылке. Чтобы получить копию массива, которую можно модифицировать независимо от исходного массива, используйте [метод duplicate].
		[b]Примечание:[/b] При объявлении массива с помощью [code]const[/code] сам массив все равно может быть изменен путем определения значений по отдельным индексам или перетаскивания/удаления элементов. Использование [code]const[/code] предотвращает только присвоение константе другого значения после ее инициализации.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PoolColorArray" />
			<description>
				Конструирует массив из массива [PoolColorArray].
			</description>
		</method>
		<method name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PoolVector3Array" />
			<description>
				Конструирует массив из массива [PoolVector3Array].
			</description>
		</method>
		<method name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PoolVector2Array" />
			<description>
				Конструирует массив из массива [PoolVector2Array].
			</description>
		</method>
		<method name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PoolStringArray" />
			<description>
				Конструирует массив из массива [PoolStringArray].
			</description>
		</method>
		<method name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PoolRealArray" />
			<description>
				Конструирует массив из массива [PoolRealArray].
			</description>
		</method>
		<method name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PoolIntArray" />
			<description>
				Конструирует массив из массива [PoolIntArray].
			</description>
		</method>
		<method name="Array">
			<return type="Array" />
			<argument index="0" name="from" type="PoolByteArray" />
			<description>
				Конструирует массив из массива [PoolByteArray].
			</description>
		</method>
		<method name="append">
			<argument index="0" name="value" type="Variant" />
			<description>
				Добавляет элемент в конец массива (alias of [method push_back]).
			</description>
		</method>
		<method name="append_array">
			<argument index="0" name="array" type="Array" />
			<description>
				Добавляет другой массив в конец данного массива.
				[codeblock].
				var array1 = [1, 2, 3]
				var array2 = [4, 5, 6]
				array1.append_array(array2)
				print(array1) # Prints [1, 2, 3, 4, 5, 6].
				[/codeblock].
			</description>
		</method>
		<method name="back">
			<return type="Variant" />
			<description>
				Возвращает последний элемент массива. Выдает ошибку и возвращает [code]null[/code], если массив пуст.
				[b]Примечание:[/b] Вызов этой функции не то же самое, что запись [code]array[-1][/code]. Если массив пуст, то обращение к нему по индексу приведет к приостановке выполнения проекта при запуске из редактора.
			</description>
		</method>
		<method name="bsearch">
			<return type="int" />
			<argument index="0" name="value" type="Variant" />
			<argument index="1" name="before" type="bool" default="true" />
			<description>
				Находит индекс существующего значения (или индекс вставки, сохраняющий порядок сортировки, если значение еще не присутствует в массиве) с помощью двоичного поиска. Опционально может быть передан спецификатор [code]before[/code]. Если [code]false[/code], то возвращаемый индекс идет после всех существующих записей значения в массиве.
				[b]Примечание:[/b] Вызов [метода bsearch] на несортированном массиве приводит к неожиданному поведению.
			</description>
		</method>
		<method name="bsearch_custom">
			<return type="int" />
			<argument index="0" name="value" type="Variant" />
			<argument index="1" name="obj" type="Object" />
			<argument index="2" name="func" type="String" />
			<argument index="3" name="before" type="bool" default="true" />
			<description>
				Находит индекс существующего значения (или индекс вставки, сохраняющий порядок сортировки, если значение еще не присутствует в массиве), используя двоичный поиск и собственный метод сравнения, объявленный в [code]obj[/code]. Опционально может быть передан спецификатор [code]before[/code]. Если [code]false[/code], то возвращаемый индекс идет после всех существующих записей значения в массиве. Пользовательский метод получает два аргумента (элемент из массива и искомое значение) и должен возвращать [code]true[/code], если первый аргумент меньше второго, и [code]false[/code] в противном случае.
				[codeblock].
				func cardinal_to_algebraic(a):
				    match a:
				        "one":
				            return 1
				        "two":
				            возврат 2
				        "three":
				            возврат 3
				        "four":
				            возврат 4
				        _:
				            return 0

				func compare(a, b):
				    return cardinal_to_algebraic(a) &lt; cardinal_to_algebraic(b)

				func _ready():
				    var a = ["one", "two", "three", "four"].
				    # `compare` определен в этом объекте, поэтому мы используем `self` в качестве параметра `obj`.
				    print(a.bsearch_custom("three", self, "compare", true)) # Ожидаемое значение - 2.
				[/codeblock]
				[b]Примечание:[/b] Вызов [метода bsearch_custom] на несортированном массиве приводит к неожиданному поведению.
			</description>
		</method>
		<method name="clear">
			<description>
				Очищает массив. Это эквивалентно использованию [method resize] с размером [code]0[/code].
			</description>
		</method>
		<method name="count">
			<return type="int" />
			<argument index="0" name="value" type="Variant" />
			<description>
				Возвращает количество раз, которое элемент находится в массиве.
			</description>
		</method>
		<method name="duplicate">
			<return type="Array" />
			<argument index="0" name="deep" type="bool" default="false" />
			<description>
				Возвращает копию массива.
				Если [code]deep[/code] равно [code]true[/code], то выполняется глубокое копирование: все вложенные массивы и словари дублируются и не будут использоваться совместно с исходным массивом. Если [code]false[/code], то выполняется неглубокое копирование, при этом ссылки на исходные вложенные массивы и словари сохраняются, так что изменение вложенного массива или словаря в копии повлияет и на те, на которые имеются ссылки в исходном массиве.
			</description>
		</method>
		<method name="empty">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если массив пуст.
			</description>
		</method>
		<method name="erase">
			<argument index="0" name="value" type="Variant" />
			<description>
				Удаляет из массива первое вхождение значения. Если значение не существует в массиве, то ничего не происходит. Для удаления элемента по индексу вместо этого используйте [method remove].
				[b]Примечание:[/b] Этот метод работает in-place и не возвращает значение.
				[b]Примечание:[/b] В больших массивах этот метод будет работать медленнее, если удаляемый элемент находится близко к началу массива (индекс 0). Это связано с тем, что все элементы, расположенные после удаленного элемента, должны быть переиндексированы.
			</description>
		</method>
		<method name="fill">
			<argument index="0" name="value" type="Variant" />
			<description>
				Присваивает заданное значение всем элементам массива. Обычно используется вместе с [method resize] для создания массива с заданным размером и инициализированными элементами:
				[codeblock]
				var array = []
				array.resize(10)
				array.fill(0) # Инициализация 10 элементов в 0.
				[/codeblock]
				[b]Примечание:[/b] Если [code]value[/code] имеет ссылочный тип ([Object]-производное, [Array], [Dictionary] и т.д.), то массив заполняется ссылками на один и тот же объект, т.е. дубликаты не создаются.
			</description>
		</method>
		<method name="find">
			<return type="int" />
			<argument index="0" name="what" type="Variant" />
			<argument index="1" name="from" type="int" default="0" />
			<description>
				Выполняет поиск значения в массиве и возвращает его индекс или [code]-1[/code], если значение не найдено. Опционально может быть передан начальный индекс поиска. Возвращает [code]-1[/code], если [code]from[/code] выходит за границы.
			</description>
		</method>
		<method name="find_last">
			<return type="int" />
			<argument index="0" name="value" type="Variant" />
			<description>
				Выполняет поиск значения в массиве в обратном порядке и возвращает его индекс или [code]-1[/code], если значение не найдено.
			</description>
		</method>
		<method name="front">
			<return type="Variant" />
			<description>
				Возвращает первый элемент массива. Выдает ошибку и возвращает [code]null[/code], если массив пуст.
				[b]Примечание:[/b] Вызов этой функции не то же самое, что запись [code]array[0][/code]. Если массив пуст, то обращение к нему по индексу приведет к приостановке выполнения проекта при запуске из редактора.
			</description>
		</method>
		<method name="has">
			<return type="bool" />
			<argument index="0" name="value" type="Variant" />
			<description>
				Возвращает [code]true[/code], если массив содержит заданное значение.
				[codeblock]
				["inside", 7].has("inside") # True
				["inside", 7].has("outside") # False
				["inside", 7].has(7) # True
				["inside", 7].has("7") # False
				[/codeblock]
				[b]Примечание:[/b] Это эквивалентно использованию оператора [code]in[/code] следующим образом:
				[codeblock]
				# Оценивается в `true`.
				if 2 in [2, 4, 6, 8]:
				    pass
				[/codeblock]
			</description>
		</method>
		<method name="hash">
			<return type="int" />
			<description>
				Возвращает хэшированное 32-битное целочисленное значение, представляющее массив и его содержимое.
				[b]Примечание:[/b] [Array] с одинаковым содержимым всегда будут давать одинаковые хэш-значения. Однако обратное не верно. Возвращение одинаковых хэш-значений не означает, что массивы равны, поскольку из-за хэш-коллизий разные массивы могут иметь одинаковые хэш-значения.
			</description>
		</method>
		<method name="insert">
			<argument index="0" name="position" type="int" />
			<argument index="1" name="value" type="Variant" />
			<description>
				Вставляет новый элемент в заданную позицию массива. Позиция должна быть действительной или находиться в конце массива ([code]pos == size()[/code]).
				[b]Примечание:[/b] Этот метод работает in-place и не возвращает значения.
				[b]Примечание:[/b] В больших массивах этот метод будет работать медленнее, если вставляемый элемент находится близко к началу массива (индекс 0). Это связано с тем, что все элементы, расположенные после только что вставленного элемента, должны быть переиндексированы.
			</description>
		</method>
		<method name="invert">
			<description>
				Изменяет порядок следования элементов в массиве.
			</description>
		</method>
		<method name="max">
			<return type="Variant" />
			<description>
				Возвращает максимальное значение, содержащееся в массиве, если все элементы имеют сравнимые типы. Если элементы не могут быть сопоставлены, то возвращается [code]null[/code].
			</description>
		</method>
		<method name="min">
			<return type="Variant" />
			<description>
				Возвращает минимальное значение, содержащееся в массиве, если все элементы имеют сравнимые типы. Если элементы не могут быть сопоставлены, то возвращается [code]null[/code].
			</description>
		</method>
		<method name="pop_at">
			<return type="Variant" />
			<argument index="0" name="position" type="int" />
			<description>
				Удаляет и возвращает элемент массива с индексом [code]position[/code]. Если индекс отрицательный, то [code]position[/code] считается относительно конца массива. Оставляет массив нетронутым и возвращает [code]null[/code], если массив пуст или обращение к нему вышло за границы. При обращении к массиву за пределами границ выводится сообщение об ошибке, а при обращении к пустому массиву - нет.
				[b]Примечание:[/b] На больших массивах этот метод может работать медленнее, чем [method pop_back], так как при этом происходит переиндексация элементов массива, расположенных после удаленного элемента. Чем больше массив и чем меньше индекс удаляемого элемента, тем медленнее будет работать [method pop_at].
			</description>
		</method>
		<method name="pop_back">
			<return type="Variant" />
			<description>
				Удаляет и возвращает последний элемент массива. Возвращает [code]null[/code], если массив пуст, без вывода сообщения об ошибке. См. также [method pop_front].
			</description>
		</method>
		<method name="pop_front">
			<return type="Variant" />
			<description>
				Удаляет и возвращает первый элемент массива. Возвращает [code]null[/code], если массив пуст, без вывода сообщения об ошибке. См. также [method pop_back].
				[b]Примечание:[/b] На больших массивах этот метод работает гораздо медленнее, чем [method pop_back], так как при каждом вызове он будет переиндексировать все элементы массива. Чем больше массив, тем медленнее будет работать [method pop_front].
			</description>
		</method>
		<method name="push_back">
			<argument index="0" name="value" type="Variant" />
			<description>
				Добавляет элемент в конец массива. См. также [method push_front].
			</description>
		</method>
		<method name="push_front">
			<argument index="0" name="value" type="Variant" />
			<description>
				Добавляет элемент в начало массива. См. также [method push_back].
				[b]Примечание:[/b] На больших массивах этот метод работает гораздо медленнее, чем [method push_back], так как при каждом вызове он будет переиндексировать все элементы массива. Чем больше массив, тем медленнее будет работать [method push_front].
			</description>
		</method>
		<method name="remove">
			<argument index="0" name="position" type="int" />
			<description>
				Удаляет элемент из массива по индексу. Если индекс не существует в массиве, то ничего не происходит. Для удаления элемента путем поиска его значения вместо этого используйте [метод erase].
				[b]Примечание:[/b] Этот метод работает in-place и не возвращает значения.
				[b]Примечание:[/b] В больших массивах этот метод будет работать медленнее, если удаляемый элемент находится близко к началу массива (индекс 0). Это связано с тем, что все элементы, расположенные после удаленного элемента, должны быть переиндексированы.
			</description>
		</method>
		<method name="resize">
			<argument index="0" name="size" type="int" />
			<description>
				Изменяет размер массива, чтобы он содержал другое количество элементов. Если размер массива меньше, то элементы очищаются, если больше, то новые элементы [code]null[/code].
			</description>
		</method>
		<method name="rfind">
			<return type="int" />
			<argument index="0" name="what" type="Variant" />
			<argument index="1" name="from" type="int" default="-1" />
			<description>
				Выполняет поиск в массиве в обратном порядке. Опционально может быть передан начальный индекс поиска. Если он отрицательный, то начальный индекс считается относительно конца массива. Если заданный начальный индекс выходит за границы, то метод выполняет поиск с конца массива.
			</description>
		</method>
		<method name="shuffle">
			<description>
				Перемешивает массив таким образом, что элементы располагаются в случайном порядке. Этот метод использует глобальный генератор случайных чисел, характерный для таких методов, как [method @GDScript.randi]. Если требуется невоспроизводимое перемешивание, вызовите [method @GDScript.randomize], чтобы гарантировать, что каждый раз будет использоваться новое зерно.
			</description>
		</method>
		<method name="size">
			<return type="int" />
			<description>
				Возвращает количество элементов в массиве.
			</description>
		</method>
		<method name="slice">
			<return type="Array" />
			<argument index="0" name="begin" type="int" />
			<argument index="1" name="end" type="int" />
			<argument index="2" name="step" type="int" default="1" />
			<argument index="3" name="deep" type="bool" default="false" />
			<description>
				Дублирует подмножество, описанное в функции, и возвращает его в массиве, глубоко копируя массив, если [code]deep[/code] равно [code]true[/code]. Нижний и верхний индекс указаны включительно, а [code]step[/code] описывает изменение между индексами в процессе нарезки.
			</description>
		</method>
		<method name="sort">
			<description>
				Сортирует массив.
				[b]Примечание:[/b] Используемый алгоритм сортировки не является [url=https://en.wikipedia.org/wiki/Sorting_algorithm#Stability]стабильным[/url]. Это означает, что при использовании [метода sort] порядок значений, считающихся одинаковыми, может измениться.
				[b]Примечание:[/b] Строки сортируются в алфавитном порядке (в отличие от естественного порядка). Это может привести к неожиданному поведению при сортировке массива строк, заканчивающегося последовательностью цифр. Рассмотрим следующий пример:
				[codeblock].
				var strings = ["string1", "string2", "string10", "string11"].
				strings.sort()
				print(strings) # Выводит [string1, string10, string11, string2]
				[/codeblock]
			</description>
		</method>
		<method name="sort_custom">
			<argument index="0" name="obj" type="Object" />
			<argument index="1" name="func" type="String" />
			<description>
				Сортирует массив с помощью пользовательского метода. Аргументами являются объект, в котором хранится метод, и имя этого метода. Пользовательский метод получает два аргумента (пару элементов из массива) и должен возвращать либо [code]true[/code], либо [code]false[/code].
				Для двух элементов [code]a[/code] и [code]b[/code], если данный метод возвращает [code]true[/code], то элемент [code]b[/code] будет находиться после элемента [code]a[/code] в массиве.
				[b]Примечание:[/b] Используемый алгоритм сортировки не является [url=https://en.wikipedia.org/wiki/Sorting_algorithm#Stability]стабильным[/url]. Это означает, что при использовании [method sort_custom] порядок значений, считающихся одинаковыми, может измениться.
				[b]Примечание:[/b] Нельзя рандомизировать возвращаемое значение, поскольку алгоритм heapsort ожидает детерминированного результата. Рандомизация возвращаемого значения приведет к неожиданному поведению.
				[codeblock]
				class MyCustomSorter:
				    static func sort_ascending(a, b):
				        if a[0] &lt; b[0]:
				            return true
				        возврат false

				var my_items = [[5, "Картофель"], [9, "Рис"], [4, "Помидор"]].
				my_items.sort_custom(MyCustomSorter, "sort_ascending")
				print(my_items) # Печатает [[4, "Помидор"], [5, "Картофель"], [9, "Рис"]].
				[/codeblock]
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
