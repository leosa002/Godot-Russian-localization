<?xml version="1.0" encoding="UTF-8" ?>
<class name="MainLoop" inherits="Object" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Абстрактный базовый класс для главного цикла игры.
	</brief_description>
	<description>
		[MainLoop] - это абстрактный базовый класс для игрового цикла проекта Godot. Он наследуется от [SceneTree], который является реализацией игрового цикла по умолчанию, используемой в проектах Godot, хотя также можно написать и использовать собственный подкласс [MainLoop] вместо дерева сцен.
		При запуске приложения ОС должна быть предоставлена реализация [MainLoop], в противном случае приложение завершится. Это происходит автоматически (и создается [SceneTree]), если только основной [Script] не предоставляется из командной строки (например, [code]godot -s my_loop.gd[/code]), который должен быть реализацией [MainLoop].
		Вот пример скрипта, реализующего простой [MainLoop]:
		[codeblock]
		extends MainLoop

		var time_elapsed = 0
		var keys_typed = []
		var quit = false

		func _initialize():
		    print("Initialized:")
		    print("  Starting time: %s" % str(time_elapsed))

		func _idle(delta):
		    time_elapsed += delta
		    # Возвращает true для завершения основного цикла.
		    return quit

		func _input_event(event):
		    # Клавиши для записи.
		    if event is InputEventKey and event.pressed and !event.echo:
		        keys_typed.append(OS.get_scancode_string(event.scancode))
		        # Выйдите из игры при нажатии Escape.
		        if event.scancode == KEY_ESCAPE:
		            quit = true
		    # Выход по любому щелчку мыши.
		    if event is InputEventMouseButton:
		        quit = true

		func _finalize():
		    print("Finalized:")
		    print("  End time: %s" % str(time_elapsed))
		    print("  Keys typed: %s" % var2str(keys_typed))
		[/codeblock]
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_drop_files" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="files" type="PoolStringArray" />
			<argument index="1" name="from_screen" type="int" />
			<description>
				Вызывается при перетаскивании файлов из файлового менеджера ОС в окно игры. Аргументами являются список путей к файлам и идентификатор экрана, на котором произошло перетаскивание.
			</description>
		</method>
		<method name="_finalize" qualifiers="virtual">
			<return type="void" />
			<description>
				Вызывается перед выходом из программы.
			</description>
		</method>
		<method name="_global_menu_action" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="id" type="Variant" />
			<argument index="1" name="meta" type="Variant" />
			<description>
				Вызывается, когда пользователь выполняет действие в глобальном меню системы (например, в строке меню Mac OS).
			</description>
		</method>
		<method name="_idle" qualifiers="virtual">
			<return type="bool" />
			<argument index="0" name="delta" type="float" />
			<description>
				Вызывается каждый холостой кадр с указанием в качестве аргумента времени, прошедшего с момента последнего холостого кадра (в секундах). Эквивалентно [методу Node._process].
				Если метод реализован, он должен возвращать булево значение. [code]true[/code] завершает основной цикл, а [code]false[/code] позволяет перейти к следующему кадру.
			</description>
		</method>
		<method name="_initialize" qualifiers="virtual">
			<return type="void" />
			<description>
				Вызывается один раз во время инициализации.
			</description>
		</method>
		<method name="_input_event" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="event" type="InputEvent" />
			<description>
				Вызывается всякий раз, когда в главный цикл поступает событие [InputEvent].
			</description>
		</method>
		<method name="_input_text" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="text" type="String" />
			<description>
				Устаревший обратный вызов, ничего не делает. Используйте [метод _input_event] для разбора вводимого текста. Будет удален в Godot 4.0.
			</description>
		</method>
		<method name="_iteration" qualifiers="virtual">
			<return type="bool" />
			<argument index="0" name="delta" type="float" />
			<description>
				Вызывает каждый физический кадр с указанием в качестве аргумента времени, прошедшего с момента последнего физического кадра ([code]delta[/code], в секундах). Эквивалентно [методу Node._physics_process].
				Если метод реализован, он должен возвращать булево значение. [code]true[/code] завершает основной цикл, а [code]false[/code] позволяет перейти к следующему кадру.
			</description>
		</method>
		<method name="finish">
			<return type="void" />
			<description>
				Не следует вызывать вручную, вместо этого переопределите [метод _finalize]. Будет удален в Godot 4.0.
			</description>
		</method>
		<method name="idle">
			<return type="bool" />
			<argument index="0" name="delta" type="float" />
			<description>
				Не следует вызывать вручную, вместо этого переопределите [метод _idle]. Будет удален в Godot 4.0.
			</description>
		</method>
		<method name="init">
			<return type="void" />
			<description>
				Не следует вызывать вручную, вместо этого переопределите [метод _initialize]. Будет удален в версии Godot 4.0.
			</description>
		</method>
		<method name="input_event">
			<return type="void" />
			<argument index="0" name="event" type="InputEvent" />
			<description>
				Не следует вызывать вручную, вместо этого переопределите [метод _input_event]. Будет удален в версии Godot 4.0.
			</description>
		</method>
		<method name="input_text">
			<return type="void" />
			<argument index="0" name="text" type="String" />
			<description>
				Не следует вызывать вручную, вместо этого переопределите [метод _input_text]. Будет удален в версии Godot 4.0.
			</description>
		</method>
		<method name="iteration">
			<return type="bool" />
			<argument index="0" name="delta" type="float" />
			<description>
				Не следует вызывать вручную, вместо этого переопределите [метод _iteration]. Будет удален в Godot 4.0.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="on_request_permissions_result">
			<argument index="0" name="permission" type="String" />
			<argument index="1" name="granted" type="bool" />
			<description>
				Выдается, когда пользователь отвечает на запрос разрешения.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_WM_MOUSE_ENTER" value="1002">
			Уведомление, получаемое от ОС, когда мышь попадает в игровое окно.
			Реализовано на настольных и веб-платформах.
		</constant>
		<constant name="NOTIFICATION_WM_MOUSE_EXIT" value="1003">
			Уведомление, получаемое от ОС, когда мышь покидает игровое окно.
			Реализовано на настольных и веб-платформах.
		</constant>
		<constant name="NOTIFICATION_WM_FOCUS_IN" value="1004">
			Уведомление, получаемое от ОС при фокусировке окна игры.
			Реализовано на всех платформах.
		</constant>
		<constant name="NOTIFICATION_WM_FOCUS_OUT" value="1005">
			Уведомление, получаемое от ОС при расфокусировке окна игры.
			Реализовано на всех платформах.
		</constant>
		<constant name="NOTIFICATION_WM_QUIT_REQUEST" value="1006">
			Уведомление, получаемое от ОС при отправке запроса на выход (например, закрытие окна с помощью кнопки "Закрыть" или Alt+F4).
			Реализовано на настольных платформах.
		</constant>
		<constant name="NOTIFICATION_WM_GO_BACK_REQUEST" value="1007">
			Уведомление, получаемое от ОС при отправке запроса на возврат (например, нажатие кнопки "Назад" на Android).
			Специфично для платформы Android.
		</constant>
		<constant name="NOTIFICATION_WM_UNFOCUS_REQUEST" value="1008">
			Уведомление, получаемое от ОС, когда отправляется запрос на расфокусировку (например, другое окно ОС хочет захватить фокус).
			В настоящее время ни одна из поддерживаемых платформ не отправляет это уведомление.
		</constant>
		<constant name="NOTIFICATION_OS_MEMORY_WARNING" value="1009">
			Уведомление, получаемое от ОС, когда приложение превышает выделенную ему память.
			Специфично для платформы iOS.
		</constant>
		<constant name="NOTIFICATION_TRANSLATION_CHANGED" value="1010">
			Уведомление о возможном изменении перевода. Может быть вызвано изменением локали пользователем. Может использоваться для реагирования на изменение языка, например, для изменения строк пользовательского интерфейса на лету. Полезно при работе со встроенной поддержкой переводов, например [метод Object.tr].
		</constant>
		<constant name="NOTIFICATION_WM_ABOUT" value="1011">
			Уведомление, получаемое от ОС при отправке запроса на информацию "О программе".
			Специфично для платформы macOS.
		</constant>
		<constant name="NOTIFICATION_CRASH" value="1012">
			Уведомление, получаемое от обработчика сбоев Godot, когда движок вот-вот упадет.
			Реализовано на настольных платформах, если обработчик сбоев включен.
		</constant>
		<constant name="NOTIFICATION_OS_IME_UPDATE" value="1013">
			Уведомление, получаемое от ОС при обновлении механизма метода ввода (например, изменение положения курсора IME или строки композиции).
			Специфично для платформы macOS.
		</constant>
		<constant name="NOTIFICATION_APP_RESUMED" value="1014">
			Уведомление, получаемое от ОС при возобновлении работы приложения.
			Специфично для платформы Android.
		</constant>
		<constant name="NOTIFICATION_APP_PAUSED" value="1015">
			Уведомление, получаемое от ОС, когда приложение приостанавливается.
			Специфично для платформы Android.
		</constant>
	</constants>
</class>
