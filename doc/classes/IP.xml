<?xml version="1.0" encoding="UTF-8" ?>
<class name="IP" inherits="Object" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Функции поддержки интернет-протокола (IP), такие как разрешение DNS.
	</brief_description>
	<description>
		IP содержит функции поддержки Интернет-протокола (IP). Поддержка TCP/IP относится к различным классам (см. [StreamPeerTCP] и [TCP_Server]). IP обеспечивает поддержку разрешения имен хостов DNS, как блокирующую, так и потоковую.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear_cache">
			<return type="void" />
			<argument index="0" name="hostname" type="String" default="&quot;&quot;" />
			<description>
				Удаляет все кэшированные ссылки на [code]hostname[/code]. Если имя [code]hostname[/code] не указано, удаляются все кэшированные IP-адреса.
			</description>
		</method>
		<method name="erase_resolve_item">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<description>
				Удаляет все кэшированные ссылки на [code]hostname[/code]. Если имя [code]hostname[/code] не указано, удаляются все кэшированные IP-адреса.
			</description>
		</method>
		<method name="get_local_addresses" qualifiers="const">
			<return type="Array" />
			<description>
				Возвращает все текущие IPv4- и IPv6-адреса пользователя в виде массива.
			</description>
		</method>
		<method name="get_local_interfaces" qualifiers="const">
			<return type="Array" />
			<description>
				Возвращает все сетевые адаптеры в виде массива.
				Каждый адаптер представляет собой словарь вида:
				[codeblock]
				{
				    "index": "1", # Индекс интерфейса.
				    "name": "eth0", # Имя интерфейса.
				    "friendly": "Ethernet One", # Дружеское имя (может быть пустым).
				    "addresses": ["192.168.1.101"], # Массив IP-адресов, связанных с этим интерфейсом.
				}
				[/codeblock]
			</description>
		</method>
		<method name="get_resolve_item_address" qualifiers="const">
			<return type="String" />
			<argument index="0" name="id" type="int" />
			<description>
				Возвращает IP-адрес поставленного в очередь имени хоста, учитывая [code]id[/code] очереди. Возвращает пустую строку при ошибке или если разрешение еще не произошло (см. [метод get_resolve_item_status]).
			</description>
		</method>
		<method name="get_resolve_item_addresses" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="id" type="int" />
			<description>
				Возвращает разрешенные адреса или пустой массив, если произошла ошибка или разрешение еще не произошло (см. [метод get_resolve_item_status]).
			</description>
		</method>
		<method name="get_resolve_item_status" qualifiers="const">
			<return type="int" enum="IP.ResolverStatus" />
			<argument index="0" name="id" type="int" />
			<description>
				Возвращает статус имени хоста в очереди в виде константы [enum ResolverStatus], учитывая [code]id[/code] очереди.
			</description>
		</method>
		<method name="resolve_hostname">
			<return type="String" />
			<argument index="0" name="host" type="String" />
			<argument index="1" name="ip_type" type="int" enum="IP.Type" default="3" />
			<description>
				Возвращает IPv4- или IPv6-адрес заданного имени хоста при его разрешении (метод блокирующего типа). Тип возвращаемого адреса зависит от константы [enum Type], заданной как [code]ip_type[/code].
			</description>
		</method>
		<method name="resolve_hostname_addresses">
			<return type="Array" />
			<argument index="0" name="host" type="String" />
			<argument index="1" name="ip_type" type="int" enum="IP.Type" default="3" />
			<description>
				Разрешает заданное имя хоста блокирующим способом. Адреса возвращаются в виде [Array] IPv4 или IPv6 в зависимости от [code]ip_type[/code].
			</description>
		</method>
		<method name="resolve_hostname_queue_item">
			<return type="int" />
			<argument index="0" name="host" type="String" />
			<argument index="1" name="ip_type" type="int" enum="IP.Type" default="3" />
			<description>
				Создает элемент очереди для преобразования имени хоста в адрес IPv4 или IPv6 в зависимости от константы [enum Type], заданной как [code]ip_type[/code]. Возвращает идентификатор очереди в случае успеха или [константу RESOLVER_INVALID_ID] в случае ошибки.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="RESOLVER_STATUS_NONE" value="0" enum="ResolverStatus">
			Состояние DNS-резольвера имен хостов: Нет статуса.
		</constant>
		<constant name="RESOLVER_STATUS_WAITING" value="1" enum="ResolverStatus">
			Состояние разрешителя имен хостов DNS: Ожидание.
		</constant>
		<constant name="RESOLVER_STATUS_DONE" value="2" enum="ResolverStatus">
			Состояние резольвера имен хостов DNS: Выполнено.
		</constant>
		<constant name="RESOLVER_STATUS_ERROR" value="3" enum="ResolverStatus">
			Состояние резолвера имен хостов DNS: Ошибка.
		</constant>
		<constant name="RESOLVER_MAX_QUERIES" value="256">
			Максимально допустимое количество одновременных запросов к DNS-резольверу, при превышении возвращается [константа RESOLVER_INVALID_ID].
		</constant>
		<constant name="RESOLVER_INVALID_ID" value="-1">
			Неверная константа идентификатора. Возвращается, если превышена [константа RESOLVER_MAX_QUERIES].
		</constant>
		<constant name="TYPE_NONE" value="0" enum="Type">
			Тип адреса: Нет.
		</constant>
		<constant name="TYPE_IPV4" value="1" enum="Type">
			Тип адреса: Протокол Интернета версии 4 (IPv4).
		</constant>
		<constant name="TYPE_IPV6" value="2" enum="Type">
			Тип адреса: Протокол Интернета версии 6 (IPv6).
		</constant>
		<constant name="TYPE_ANY" value="3" enum="Type">
			Тип адреса: Любой.
		</constant>
	</constants>
</class>
