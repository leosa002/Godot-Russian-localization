<?xml version="1.0" encoding="UTF-8" ?>
<class name="EditorSettings" inherits="Resource" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Объект, содержащий независимые от проекта настройки редактора.
	</brief_description>
	<description>
		Объект, хранящий независимые от проекта настройки редактора. Эти настройки обычно видны в меню [b]Editor &gt; Editor Settings[/b].
		В именах свойств используются косые разделители для разграничения секций. Значения параметров могут быть любого типа [Variant]. Рекомендуется использовать [code]snake_case[/code] для настроек редактора, чтобы они соответствовали самому редактору Godot.
		Доступ к настройкам можно получить следующими способами, например:
		[codeblock]
		# `Settings.set("some/property", value)` также работает, поскольку этот класс переопределяет `_set()` внутренне.
		settings.set_setting("some/property",value)

		# `Settings.get("some/property", value)` также работает, поскольку этот класс переопределяет `_get()` внутренне.
		settings.get_setting("some/property")

		var list_of_settings = settings.get_property_list()
		[/codeblock]
		[b]Примечание:[/b] Этот класс не следует создавать(инстанцировать) напрямую. Вместо этого обращайтесь к синглтону с помощью [метода EditorInterface.get_editor_settings].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_property_info">
			<return type="void" />
			<argument index="0" name="info" type="Dictionary" />
			<description>
				Добавляет пользовательскую информацию о свойстве к свойству. Словарь должен содержать:
				- [code]name[/code]: [String] (имя свойства)
				- [code]type[/code]: [int] (см. [enum Variant.Type])
				- опционально [code]hint[/code]: [int] (см. [enum PropertyHint]) и [code]hint_string[/code]: [String].
				[b]Пример:[/b]
				[codeblock]
				editor_settings.set("category/property_name", 0)

				var property_info = {
				    "name": "category/property_name",
				    "type": TYPE_INT,
				    "hint": PROPERTY_HINT_ENUM,
				    "hint_string": "one,two,three"
				}

				editor_settings.add_property_info(property_info)
				[/codeblock]
			</description>
		</method>
		<method name="erase">
			<return type="void" />
			<argument index="0" name="property" type="String" />
			<description>
				Стирает настройку, имя которой указано в [code]property[/code].
			</description>
		</method>
		<method name="get_favorites" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Возвращает список избранных файлов и каталогов для этого проекта.
			</description>
		</method>
		<method name="get_project_metadata" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="section" type="String" />
			<argument index="1" name="key" type="String" />
			<argument index="2" name="default" type="Variant" default="null" />
			<description>
				Возвращает метаданные конкретного проекта для указанных [code]section[/code] и [code]key[/code]. Если метаданные не существуют, вместо них будет возвращено [code]default[/code]. См. также [метод set_project_metadata].
			</description>
		</method>
		<method name="get_project_settings_dir" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает путь к настройкам конкретного проекта. Все проекты имеют уникальный подкаталог внутри пути настроек, в котором сохраняются настройки конкретного проекта.
			</description>
		</method>
		<method name="get_recent_dirs" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Возвращает список недавно посещенных папок в файловом диалоге для данного проекта.
			</description>
		</method>
		<method name="get_setting" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="name" type="String" />
			<description>
				Возвращает значение настройки, указанной [code]name[/code]. Это эквивалентно использованию [метода Object.get] для экземпляра EditorSettings.
			</description>
		</method>
		<method name="get_settings_dir" qualifiers="const">
			<return type="String" />
			<description>
				Получает путь к глобальным настройкам движка. Внутри этого пути вы можете найти некоторые стандартные пути, такие как:
				[code]settings/tmp[/code] - используется для временного хранения файлов
				[code]settings/templates[/code] - место расположения шаблонов экспорта
			</description>
		</method>
		<method name="has_setting" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="name" type="String" />
			<description>
				Возвращает [code]true[/code], если настройка, указанная [code]name[/code], существует, [code]false[/code] - в противном случае.
			</description>
		</method>
		<method name="property_can_revert">
			<return type="bool" />
			<argument index="0" name="name" type="String" />
			<description>
				Возвращает [code]true[/code], если для настройки, указанной [code]name[/code], можно вернуть значение по умолчанию, [code]false[/code] - в противном случае. Когда этот метод возвращает [code]true[/code], рядом с настройкой в Настройках редактора появится кнопка Revert.
			</description>
		</method>
		<method name="property_get_revert">
			<return type="Variant" />
			<argument index="0" name="name" type="String" />
			<description>
				Возвращает значение по умолчанию для настройки, указанной [code]name[/code]. Это значение, которое будет применено при нажатии кнопки "Вернуть" в настройках редактора.
			</description>
		</method>
		<method name="set_favorites">
			<return type="void" />
			<argument index="0" name="dirs" type="PoolStringArray" />
			<description>
				Устанавливает список избранных файлов и каталогов для этого проекта.
			</description>
		</method>
		<method name="set_initial_value">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="value" type="Variant" />
			<argument index="2" name="update_current" type="bool" />
			<description>
				Устанавливает начальное значение параметра, указанного [code]name[/code], на [code]value[/code]. Это значение используется для кнопки "Revert" в настройках редактора. Если [code]update_current[/code] равен true, текущее значение параметра также будет установлено в [code]value[/code].
			</description>
		</method>
		<method name="set_project_metadata">
			<return type="void" />
			<argument index="0" name="section" type="String" />
			<argument index="1" name="key" type="String" />
			<argument index="2" name="data" type="Variant" />
			<description>
				Устанавливает метаданные для конкретного проекта с указанными [code]section[/code], [code]key[/code] и [code]data[/code]. Эти метаданные хранятся вне папки проекта и поэтому не будут проверяться в системе контроля версий. См. также [метод get_project_metadata].
			</description>
		</method>
		<method name="set_recent_dirs">
			<return type="void" />
			<argument index="0" name="dirs" type="PoolStringArray" />
			<description>
				Устанавливает список недавно посещенных папок в файловом диалоге для этого проекта.
			</description>
		</method>
		<method name="set_setting">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="value" type="Variant" />
			<description>
				Устанавливает [code]значение[/code] настройки, указанной [code]name[/code]. Это эквивалентно использованию [метода Object.set] для экземпляра EditorSettings.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="settings_changed">
			<description>
				Выдается после изменения любой настройки редактора.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_EDITOR_SETTINGS_CHANGED" value="10000">
			Выдается после изменения каких-либо настроек редактора. Используется различными плагинами редактора для обновления визуального оформления при изменении темы или логики при изменении конфигурации.
		</constant>
	</constants>
</class>
