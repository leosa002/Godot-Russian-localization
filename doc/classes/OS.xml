<?xml version="1.0" encoding="UTF-8" ?>
<class name="OS" inherits="Object" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Функции операционной системы.
	</brief_description>
	<description>
		Функции операционной системы. В ОС упакованы наиболее распространенные функции для взаимодействия с операционной системой хоста, такие как буфер обмена, видеодрайвер, дата и время, таймеры, переменные окружения, выполнение двоичных файлов, командная строка и т.д.
	</description>
	<tutorials>
		<link title="OS Test Demo">https://godotengine.org/asset-library/asset/677</link>
	</tutorials>
	<methods>
		<method name="alert">
			<return type="void" />
			<argument index="0" name="text" type="String" />
			<argument index="1" name="title" type="String" default="&quot;Alert!&quot;" />
			<description>
				Отображает модальное диалоговое окно, используя средства хостовой ОС. Выполнение блокируется до тех пор, пока диалог не будет закрыт.
			</description>
		</method>
		<method name="can_draw" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если ОС хоста разрешает рисование.
			</description>
		</method>
		<method name="can_use_threads" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если текущая хост-платформа использует несколько потоков.
			</description>
		</method>
		<method name="center_window">
			<return type="void" />
			<description>
				Центрирует окно на экране в оконном режиме.
			</description>
		</method>
		<method name="close_midi_inputs">
			<return type="void" />
			<description>
				Отключает системный MIDI-драйвер.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="crash">
			<return type="void" />
			<argument index="0" name="message" type="String" />
			<description>
				Вызывает краш движка (или редактора, если он вызывается в [code]tool[/code] скрипте). Это должно использоваться [i]только[/i] для тестирования обработчика сбоев системы, а не для каких-либо других целей. Для общего сообщения об ошибках используйте (в порядке предпочтения) [метод @GDScript.assert], [метод @GDScript.push_error] или [метод alert]. См. также [method kill].
			</description>
		</method>
		<method name="delay_msec" qualifiers="const">
			<return type="void" />
			<argument index="0" name="msec" type="int" />
			<description>
				Задерживает выполнение текущего потока на [code]msec[/code] миллисекунд. [code]msec[/code] должно быть больше или равно [code]0[/code]. В противном случае [метод delay_msec] ничего не сделает и выведет сообщение об ошибке.
				[b]Примечание:[/b] [метод delay_msec] - это [i]блокирующий[/i] способ задержки выполнения кода. Чтобы задержать выполнение кода неблокирующим способом, смотрите [method SceneTree.create_timer]. Уступка с помощью [method SceneTree.create_timer] задержит выполнение кода, расположенного ниже [code]yield[/code], не влияя на остальную часть проекта (или редактора, для [EditorPlugin]ов и [EditorScript]ов).
				[b]Примечание:[/b] Если [метод delay_msec] вызывается в главном потоке, он замораживает проект и не позволяет ему перерисовывать и регистрировать ввод, пока не пройдет задержка. При использовании [method delay_msec] как части [EditorPlugin] или [EditorScript], он заморозит редактор, но не заморозит проект, если он запущен в данный момент (поскольку проект является независимым дочерним процессом).
			</description>
		</method>
		<method name="delay_usec" qualifiers="const">
			<return type="void" />
			<argument index="0" name="usec" type="int" />
			<description>
				Задерживает выполнение текущего потока на [code]usec[/code] микросекунд. [code]usec[/code] должно быть больше или равно [code]0[/code]. В противном случае [метод delay_usec] ничего не сделает и выведет сообщение об ошибке.
				[b]Примечание:[/b] [метод delay_usec] - это [i]блокирующий[/i] способ отложить выполнение кода. Чтобы задержать выполнение кода неблокирующим способом, смотрите [method SceneTree.create_timer]. Уступка с помощью [method SceneTree.create_timer] задержит выполнение кода, расположенного ниже [code]yield[/code], не влияя на остальную часть проекта (или редактора, для [EditorPlugin]ов и [EditorScript]ов).
				[b]Примечание:[/b] Когда [метод delay_usec] вызывается в главном потоке, он замораживает проект и не позволяет ему перерисовывать и регистрировать ввод, пока не пройдет задержка. При использовании [method delay_usec] как части [EditorPlugin] или [EditorScript], он заморозит редактор, но не заморозит проект, если он запущен в данный момент (поскольку проект является независимым дочерним процессом).
			</description>
		</method>
		<method name="dump_memory_to_file">
			<return type="void" />
			<argument index="0" name="file" type="String" />
			<description>
				Выгружает кольцевой список распределения памяти в файл (работает только в режиме отладки).
				Формат записи в строке: "Адрес - Размер - Описание".
			</description>
		</method>
		<method name="dump_resources_to_file">
			<return type="void" />
			<argument index="0" name="file" type="String" />
			<description>
				Сбрасывает все использованные ресурсы в файл (работает только в режиме отладки).
				Формат записи в строке: "Тип ресурса : Расположение ресурса".
				В конце файла приводится статистика всех использованных типов ресурсов.
			</description>
		</method>
		<method name="execute">
			<return type="int" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="arguments" type="PoolStringArray" />
			<argument index="2" name="blocking" type="bool" default="true" />
			<argument index="3" name="output" type="Array" default="[  ]" />
			<argument index="4" name="read_stderr" type="bool" default="false" />
			<argument index="5" name="open_console" type="bool" default="false" />
			<description>
				Выполняет файл по указанному пути с аргументами, переданными в виде массива строк. Будет выполнено разрешение пути платформы. Разрешенный файл должен существовать и быть исполняемым.
				Аргументы используются в указанном порядке и разделяются пробелом, поэтому [code]OS.execute("ping", ["-w", "3", "godotengine.org"], false)[/code] разрешит [code]ping -w 3 godotengine.org[/code] в оболочке системы.
				Этот метод ведет себя несколько иначе в зависимости от того, включен ли режим [code]блокировки[/code].
				Если [code]blocking[/code] - [code]true[/code], поток Godot приостановит свое выполнение в ожидании завершения процесса. Вывод оболочки процесса будет записан в массив [code]output[/code] в виде одной строки. Когда процесс завершится, поток Godot возобновит выполнение.
				Если [code]blocking[/code] равен [code]false[/code], поток Godot продолжит выполнение, пока выполняется новый процесс. В неблокирующем режиме невозможно получить вывод оболочки, поэтому [code]output[/code] будет пустым.
				В Windows, если [code]open_console[/code] имеет значение [code]true[/code] и процесс является консольным приложением, будет открыто новое окно терминала, на других платформах это игнорируется.
				Возвращаемое значение также зависит от режима блокировки. В блокирующем режиме метод возвращает код завершения процесса. В неблокирующем режиме метод возвращает идентификатор процесса, который вы можете использовать для мониторинга процесса (и потенциального завершения его с помощью [method kill]). Если форкинг (неблокирующий) или открытие (блокирующий) процесса завершились неудачно, метод вернет [code]-1[/code] или другой код выхода.
				Пример блокирующего режима и получения вывода оболочки:
				[codeblock]
				var output = []
				var exit_code = OS.execute("ls", ["-l", "/tmp"], true, output)
				[/codeblock]
				Пример неблокирующего режима, когда запускается другой экземпляр проекта и сохраняется идентификатор/ID его процесса:
				[codeblock]
				var pid = OS.execute(OS.get_executable_path(), [], false)
				[/codeblock]
				Если вы хотите получить доступ к встроенной оболочке или выполнить составную команду, можно вызвать оболочку, специфичную для данной платформы. Например:
				[codeblock]
				OS.execute("CMD.exe", ["/C", "cd %TEMP% &amp;&amp; dir"], true, output)
				[/codeblock]
				[b]Примечание:[/b] Этот метод реализован на Android, iOS, Linux, macOS и Windows.
				[b]Примечание:[/b] Чтобы выполнить встроенную команду командного интерпретатора Windows, укажите [code]cmd.exe[/code] в [code]path[/code], [code]/c[/code] в качестве первого аргумента и желаемую команду в качестве второго аргумента.
				[b]Примечание:[/b] Чтобы выполнить встроенную команду PowerShell, укажите [code]powershell.exe[/code] в [code]path[/code], [code]-Command[/code] в качестве первого аргумента и желаемую команду в качестве второго аргумента.
				[b]Примечание:[/b] Чтобы выполнить встроенную команду оболочки Unix, укажите имя исполняемого файла оболочки в [code]path[/code], [code]-c[/code] в качестве первого аргумента, а желаемую команду - в качестве второго аргумента.
			</description>
		</method>
		<method name="find_scancode_from_string" qualifiers="const">
			<return type="int" />
			<argument index="0" name="string" type="String" />
			<description>
				Возвращает сканкод заданной строки (например, "Escape").
			</description>
		</method>
		<method name="get_audio_driver_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает общее количество доступных аудиодрайверов.
			</description>
		</method>
		<method name="get_audio_driver_name" qualifiers="const">
			<return type="String" />
			<argument index="0" name="driver" type="int" />
			<description>
				Возвращает имя аудиодрайвера для заданного индекса.
			</description>
		</method>
		<method name="get_cache_dir" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает каталог [i]глобального[/i] кэша данных в соответствии со стандартами операционной системы. В Linux этот путь можно переопределить, установив переменную окружения [code]XDG_CACHE_HOME[/code] перед запуском проекта. Дополнительную информацию см. в документации [url=$DOCS_URL/tutorials/io/data_paths.html]Пути к файлам в проектах Godot[/url]. См. также [method get_config_dir] и [method get_data_dir].
				Не путать с [method get_user_data_dir], который возвращает [i]специфический для проекта[/i] путь к пользовательским данным.
			</description>
		</method>
		<method name="get_cmdline_args">
			<return type="PoolStringArray" />
			<description>
				Возвращает аргументы командной строки, переданные движку.
				Аргументы командной строки могут быть записаны в любой форме, включая [code]--key value[/code] и [code]--key=value[/code], чтобы они могли быть правильно разобраны, при условии, что пользовательские аргументы командной строки не конфликтуют с аргументами движка.
				Вы также можете включить переменные окружения, используя метод [method get_environment].
				Вы можете установить [member ProjectSettings.editor/main_run_args], чтобы определить аргументы командной строки, которые будут передаваться редактору при запуске проекта.
				Вот минимальный пример того, как разобрать аргументы командной строки в словарь, используя форму [code]--key=value[/code] для аргументов:
				[codeblock]
				var arguments = {}
				for argument in OS.get_cmdline_args():
				    if argument.find("=") &gt; -1:
				        var key_value = argument.split("=")
				        arguments[key_value[0].lstrip("--")] = key_value[1]
				    else:
				        # Опции без аргумента будут присутствовать в словаре,
				        # со значением, установленным в пустую строку.
				        arguments[argument.lstrip("--")] = ""
				[/codeblock]
			</description>
		</method>
		<method name="get_config_dir" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает [i]глобальный[/i] каталог конфигурации пользователя в соответствии со стандартами операционной системы. В Linux этот путь можно переопределить, установив переменную окружения [code]XDG_CONFIG_HOME[/code] перед запуском проекта. Дополнительную информацию см. в документации [url=$DOCS_URL/tutorials/io/data_paths.html]Пути к файлам в проектах Godot[/url]. См. также [method get_cache_dir] и [method get_data_dir].
				Не путать с [method get_user_data_dir], который возвращает [i]специфический для проекта[/i] путь к пользовательским данным.
			</description>
		</method>
		<method name="get_connected_midi_inputs">
			<return type="PoolStringArray" />
			<description>
				Возвращает массив имен MIDI-устройств.
				Возвращаемый массив будет пустым, если системный MIDI-драйвер не был ранее инициализирован с помощью [метода open_midi_inputs].
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="get_current_video_driver" qualifiers="const">
			<return type="int" enum="OS.VideoDriver" />
			<description>
				Возвращает текущий используемый видеодрайвер, используя одно из значений из [enum VideoDriver].
			</description>
		</method>
		<method name="get_data_dir" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает [i]глобальный[/i] каталог пользовательских данных в соответствии со стандартами операционной системы. В Linux этот путь можно переопределить, установив переменную окружения [code]XDG_DATA_HOME[/code] перед запуском проекта. Дополнительную информацию см. в документации [url=$DOCS_URL/tutorials/io/data_paths.html]Пути к файлам в проектах Godot[/url]. См. также [method get_cache_dir] и [method get_config_dir].
				Не путать с [method get_user_data_dir], который возвращает [i]специфический для проекта[/i] путь к пользовательским данным.
			</description>
		</method>
		<method name="get_date" qualifiers="const">
			<return type="Dictionary" />
			<argument index="0" name="utc" type="bool" default="false" />
			<description>
				Утратил актуальность, вместо него используйте [метод Time.get_date_dict_from_system].
				Возвращает текущую дату в виде словаря с ключами: [code]year[/code], [code]month[/code], [code]day[/code], [code]weekday[/code], [code]dst[/code] (Daylight Savings Time).
			</description>
		</method>
		<method name="get_datetime" qualifiers="const">
			<return type="Dictionary" />
			<argument index="0" name="utc" type="bool" default="false" />
			<description>
				Утратил актуальность, вместо него используйте [метод Time.get_datetime_dict_from_system].
				Возвращает текущее время даты в виде словаря с ключами: [code]year[/code], [code]month[/code], [code]day[/code], [code]weekday[/code], [code]dst[/code] (летнее время), [code]hour[/code], [code]minute[/code], [code]second[/code].
			</description>
		</method>
		<method name="get_datetime_from_unix_time" qualifiers="const">
			<return type="Dictionary" />
			<argument index="0" name="unix_time_val" type="int" />
			<description>
				Утратил актуальность, вместо него используйте [метод Time.get_datetime_dict_from_unix_time].
				Получает словарь значений времени, соответствующих заданному времени эпохи UNIX (в секундах).
				Возвращаемый словарь будет содержать те же значения, что и [метод get_datetime], за исключением летнего времени, так как оно не может быть определено из эпохи.
			</description>
		</method>
		<method name="get_display_cutouts" qualifiers="const">
			<return type="Array" />
			<description>
				Возвращает [Массив] из [Rect2], каждый из которых является ограничивающим прямоугольником для выреза дисплея или выемки. Это нефункциональные области на экранах, расположенных от края до края, используемые камерами и датчиками. Возвращает пустой массив, если устройство не имеет вырезов. См. также [метод get_window_safe_area].
				[b]Примечание:[/b] В настоящее время реализовано только на Android. Другие платформы вернут пустой массив, даже если у них есть вырезы или выемки на дисплее.
			</description>
		</method>
		<method name="get_dynamic_memory_usage" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает общий объем используемой динамической памяти (работает только в режиме отладки).
			</description>
		</method>
		<method name="get_environment" qualifiers="const">
			<return type="String" />
			<argument index="0" name="variable" type="String" />
			<description>
				Возвращает значение переменной окружения. Возвращает пустую строку, если переменная окружения не существует.
				[b]Примечание:[/b] Дважды проверьте регистр [code]variable[/code]. Имена переменных окружения чувствительны к регистру на всех платформах, кроме Windows.
			</description>
		</method>
		<method name="get_executable_path" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает путь к текущему исполняемому файлу движка.
			</description>
		</method>
		<method name="get_granted_permissions" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				С помощью этой функции можно получить список опасных разрешений, которые были предоставлены приложению Android.
				[b]Примечание:[/b] Этот метод реализован на Android.
			</description>
		</method>
		<method name="get_ime_selection" qualifiers="const">
			<return type="Vector2" />
			<description>
				Возвращает позицию курсора IME (редактируемой в данный момент части строки) относительно символов в композиционной строке.
				[constant MainLoop.NOTIFICATION_OS_IME_UPDATE] отправляется приложению, чтобы уведомить его об изменении позиции курсора IME.
				[b]Примечание:[/b] Этот метод реализован на macOS.
			</description>
		</method>
		<method name="get_ime_text" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает промежуточную композиционную строку IME.
				[constant MainLoop.NOTIFICATION_OS_IME_UPDATE] отправляется приложению, чтобы уведомить его об изменениях в строке состава IME.
				[b]Примечание:[/b] Этот метод реализован на macOS.
			</description>
		</method>
		<method name="get_latin_keyboard_variant" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает текущий вариант латинской клавиатуры в виде строки.
				Возможные возвращаемые значения: [code]"QWERTY"[/code], [code]"AZERTY"[/code], [code]"QZERTY"[/code], [code]"DVORAK"[/code], [code]"NEO"[/code], [code]"COLEMAK"[/code] или [code]"ERROR"[/code].
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows. На неподдерживаемых платформах возвращает [code]"QWERTY"[/code].
			</description>
		</method>
		<method name="get_locale" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает локаль хостовой ОС в виде строки вида [code]language_Script_COUNTRY_VARIANT@extra[/code]. Если вам нужен только код языка, а не полностью указанная локаль ОС, вы можете использовать [метод get_locale_language].
				[code]language[/code] - 2-х или 3-х буквенный [url=https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes]код языка[/url], в нижнем регистре.
				[code]Script[/code] - необязательно, 4-буквенный [url=https://en.wikipedia.org/wiki/ISO_15924]код скрипта[/url], в заглавном регистре.
				[code]COUNTRY[/code] - необязательно, 2- или 3-буквенный [url=https://en.wikipedia.org/wiki/ISO_3166-1]код страны[/url], в верхнем регистре.
				[code]VARIANT[/code] - опционально, вариант языка, регион и порядок сортировки. Вариант может содержать любое количество подчеркнутых ключевых слов.
				[code]extra[/code] - опционально, список дополнительных ключевых слов, разделенных точкой с запятой. Информация о валюте, календаре, порядке сортировки и системе нумерации.
			</description>
		</method>
		<method name="get_locale_language" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает двух- или трехбуквенный [url=https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes]код языка[/url] локали хостовой ОС в виде строки, которая должна быть последовательной на всех платформах. Это эквивалентно извлечению части [code]language[/code] из строки [method get_locale].
				Это можно использовать для сужения полностью заданных строк локалей только до "общего" кода языка, когда вам не нужна дополнительная информация о коде страны или вариантах. Например, для пользователя из Французской Канады с локалью [code]fr_CA[/code] это вернет [code]fr[/code].
			</description>
		</method>
		<method name="get_main_thread_id" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает идентификатор(ID) главного потока. Смотрите [метод get_thread_caller_id].
				[b]Примечание:[/b] Идентификаторы(ID) потоков не являются детерминированными и могут использоваться повторно при перезапуске приложения.
			</description>
		</method>
		<method name="get_model_name" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает название модели текущего устройства.
				[b]Примечание:[/b] Этот метод реализован на Android и iOS. На неподдерживаемых платформах возвращается [code]"GenericDevice"[/code].
			</description>
		</method>
		<method name="get_name" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает имя операционной системы хоста. Возможные значения: [code]"Android"[/code], [code]"iOS"[/code], [code]"HTML5"[/code], [code]"OSX"[/code], [code]"Server"[/code], [code]"Windows"[/code], [code]"UWP"[/code], [code]"X11"[/code].
			</description>
		</method>
		<method name="get_native_handle">
			<return type="int" />
			<argument index="0" name="handle_type" type="int" enum="OS.HandleType" />
			<description>
				Возвращает указатели внутренних структур для использования в плагинах GDNative.
				[b]Примечание:[/b] Этот метод реализован в Linux и Windows (другие ОС скоро будут поддерживаться).
			</description>
		</method>
		<method name="get_power_percent_left">
			<return type="int" />
			<description>
				Возвращает количество оставшегося в устройстве заряда батареи в процентах. Возвращает [code]-1[/code], если состояние питания неизвестно.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="get_power_seconds_left">
			<return type="int" />
			<description>
				Возвращает оценку времени в секундах, оставшегося до того, как устройство разрядит батарею. Возвращает [code]-1[/code], если состояние питания неизвестно.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="get_power_state">
			<return type="int" enum="OS.PowerState" />
			<description>
				Возвращает текущее состояние устройства относительно батареи и питания. См. константы [enum PowerState].
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="get_process_id" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает идентификатор процесса проекта.
				[b]Примечание:[/b] Этот метод реализован на Android, iOS, Linux, macOS и Windows.
			</description>
		</method>
		<method name="get_processor_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество [i]логических[/i] ядер процессора, доступных на хост-машине. На процессорах с включенной технологией HyperThreading это число будет больше, чем число [i]физических[/i] ядер процессора.
			</description>
		</method>
		<method name="get_processor_name" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает название модели процессора на хост-машине (например, "Intel(R) Core(TM) i7-6700K CPU @ 4.00GHz").
				[b]Примечание:[/b] Этот метод реализован только в Windows, macOS, Linux и iOS. В Android, HTML5 и UWP [метод get_processor_name] возвращает пустую строку.
			</description>
		</method>
		<method name="get_real_window_size" qualifiers="const">
			<return type="Vector2" />
			<description>
				Возвращает размер окна с учетом декоративных элементов, таких как границы окна.
			</description>
		</method>
		<method name="get_scancode_string" qualifiers="const">
			<return type="String" />
			<argument index="0" name="code" type="int" />
			<description>
				Возвращает заданный сканкод в виде строки (например, возвращаемые значения: [code]"Escape"[/code], [code]"Shift+Escape"[/code]).
				См. также [member InputEventKey.scancode] и [method InputEventKey.get_scancode_with_modifiers].
			</description>
		</method>
		<method name="get_screen_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество дисплеев, подключенных к хост-машине.
			</description>
		</method>
		<method name="get_screen_dpi" qualifiers="const">
			<return type="int" />
			<argument index="0" name="screen" type="int" default="-1" />
			<description>
				Возвращает плотность точек на дюйм для указанного экрана. Если [code]screen[/code] равен [code]-1[/code] (значение по умолчанию), будет использоваться текущий экран.
				[b]Примечание:[/b] В macOS возвращаемое значение будет неточным, если используется режим дробного масштабирования дисплея.
				[b]Примечание:[/b] На устройствах Android фактические плотности экрана сгруппированы в шесть обобщенных плотностей:
				[codeblock]
				   ldpi - 120 dpi
				   mdpi - 160 dpi
				   hdpi - 240 dpi
				  xhdpi - 320 dpi
				 xxhdpi - 480 dpi
				xxxhdpi - 640 dpi
				[/codeblock]
				[b]Примечание:[/b] Этот метод реализован на Android, Linux, macOS и Windows. На неподдерживаемых платформах возвращается [code]72[/code].
			</description>
		</method>
		<method name="get_screen_max_scale" qualifiers="const">
			<return type="float" />
			<description>
				Возвращает наибольший масштабный коэффициент для всех экранов.
				[b]Примечание:[/b] В macOS возвращаемое значение равно [code]2.0[/code], если в системе есть хотя бы один экран hiDPI (Retina), и [code]1.0[/code] во всех остальных случаях.
				[b]Примечание:[/b] Этот метод реализован на macOS.
			</description>
		</method>
		<method name="get_screen_position" qualifiers="const">
			<return type="Vector2" />
			<argument index="0" name="screen" type="int" default="-1" />
			<description>
				Возвращает позицию указанного экрана по индексу. Если [code]screen[/code] равен [code]-1[/code] (значение по умолчанию), будет использоваться текущий экран.
			</description>
		</method>
		<method name="get_screen_refresh_rate" qualifiers="const">
			<return type="float" />
			<argument index="0" name="screen" type="int" default="-1" />
			<description>
				Возвращает текущую частоту обновления указанного экрана. Если [code]screen[/code] равен [code]-1[/code] (значение по умолчанию), будет использоваться текущий экран.
				[b]Примечание:[/b] Возвращает [code]-1.0[/code], если Godot не смог найти частоту обновления для указанного экрана. На HTML5 [метод get_screen_refresh_rate] всегда будет возвращать [code]-1.0[/code], так как на этой платформе нет возможности получить частоту обновления.
				Чтобы вернуться к частоте обновления по умолчанию, если метод не сработал, попробуйте:
				[codeblock].
				var refresh_rate = OS.get_screen_refresh_rate()
				если refresh_rate < 0:
				    refresh_rate = 60.0
				[/codeblock]
			</description>
		</method>
		<method name="get_screen_scale" qualifiers="const">
			<return type="float" />
			<argument index="0" name="screen" type="int" default="-1" />
			<description>
				Возвращает масштабный коэффициент указанного экрана по индексу. Если [code]screen[/code] равен [code]-1[/code] (значение по умолчанию), то будет использоваться текущий экран.
				[b]Примечание:[/b] В macOS возвращаемое значение равно [code]2.0[/code] для экрана hiDPI (Retina) и [code]1.0[/code] для всех остальных случаев.
				[b]Примечание:[/b] Этот метод реализован на macOS.
			</description>
		</method>
		<method name="get_screen_size" qualifiers="const">
			<return type="Vector2" />
			<argument index="0" name="screen" type="int" default="-1" />
			<description>
				Возвращает размеры в пикселях указанного экрана. Если [code]screen[/code] равен [code]-1[/code] (значение по умолчанию), будет использоваться текущий экран.
			</description>
		</method>
		<method name="get_splash_tick_msec" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество времени в миллисекундах, которое потребовалось для появления логотипа загрузки.
			</description>
		</method>
		<method name="get_static_memory_peak_usage" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает максимальный объем используемой статической памяти (работает только в режиме отладки).
			</description>
		</method>
		<method name="get_static_memory_usage" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает объем статической памяти, используемой программой, в байтах (работает только в режиме отладки).
			</description>
		</method>
		<method name="get_system_dir" qualifiers="const">
			<return type="String" />
			<argument index="0" name="dir" type="int" enum="OS.SystemDir" />
			<argument index="1" name="shared_storage" type="bool" default="true" />
			<description>
				Возвращает фактический путь к часто используемым папкам на разных платформах. Доступные расположения указаны в [enum SystemDir].
				[b]Примечание:[/b] Этот метод реализован в Android, Linux, macOS и Windows.
				[b]Примечание:[/b] Общее хранилище реализовано в Android и позволяет различать каталоги, предназначенные только для приложений, и общие каталоги. Общие каталоги имеют дополнительные ограничения в Android.
			</description>
		</method>
		<method name="get_system_time_msecs" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает время эпохи операционной системы в миллисекундах.
			</description>
		</method>
		<method name="get_system_time_secs" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает время эпохи операционной системы в секундах.
			</description>
		</method>
		<method name="get_tablet_driver_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает общее количество доступных драйверов для планшетов.
				[b]Примечание:[/b] Этот метод реализован на Windows.
			</description>
		</method>
		<method name="get_tablet_driver_name" qualifiers="const">
			<return type="String" />
			<argument index="0" name="idx" type="int" />
			<description>
				Возвращает имя драйвера планшета для заданного индекса.
				[b]Примечание:[/b] Этот метод реализован в Windows.
			</description>
		</method>
		<method name="get_thread_caller_id" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает идентификатор текущего потока. Это может быть использовано в логах для облегчения отладки многопоточных приложений.
				[b]Примечание:[/b] Идентификаторы потоков не являются детерминированными и могут использоваться повторно при перезапуске приложения.
			</description>
		</method>
		<method name="get_ticks_msec" qualifiers="const">
			<return type="int" />
			<description>
				Утратил актуальность, вместо него используйте [метод Time.get_ticks_msec].
				Возвращает количество времени, прошедшего в миллисекундах с момента запуска двигателя.
			</description>
		</method>
		<method name="get_ticks_usec" qualifiers="const">
			<return type="int" />
			<description>
				Утратил актуальность, вместо него используйте [метод Time.get_ticks_usec].
				Возвращает количество времени, прошедшего в микросекундах с момента запуска двигателя.
			</description>
		</method>
		<method name="get_time" qualifiers="const">
			<return type="Dictionary" />
			<argument index="0" name="utc" type="bool" default="false" />
			<description>
				Утратил актуальность, вместо него используйте [метод Time.get_time_dict_from_system].
				Возвращает текущее время в виде словаря с ключами: час, минута, секунда.
			</description>
		</method>
		<method name="get_time_zone_info" qualifiers="const">
			<return type="Dictionary" />
			<description>
				Возвращает текущий часовой пояс в виде словаря с ключами: bias и name.
			</description>
		</method>
		<method name="get_unique_id" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает строку, уникальную для данного устройства.
				[b]Примечание:[/b] Эта строка может измениться без предупреждения, если пользователь переустановит/обновит свою операционную систему или изменит аппаратное обеспечение. Это означает, что ее не следует использовать для шифрования постоянных данных, поскольку данные, сохраненные до неожиданного изменения идентификатора, станут недоступными. Возвращаемая строка также может быть подделана с помощью внешних программ, поэтому не стоит полагаться на строку, возвращаемую [методом get_unique_id], в целях безопасности.
				[b]Примечание:[/b] Возвращает пустую строку на HTML5 и UWP, так как этот метод еще не реализован на этих платформах.
			</description>
		</method>
		<method name="get_unix_time" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает текущую временную метку эпохи UNIX в секундах.
				[b]Важно:[/b] Это системные часы, которые пользователь может установить вручную. [b]Никогда не используйте[/b] этот метод для вычисления точного времени, поскольку его результаты также подвержены автоматической корректировке операционной системой. [b]Всегда используйте[/b] [метод get_ticks_usec] или [метод get_ticks_msec] для расчета точного времени, поскольку они гарантированно монотонны (т.е. никогда не уменьшаются).
				[b]Примечание:[/b] Чтобы получить временную метку с плавающей точкой с субсекундной точностью, используйте [метод Time.get_unix_time_from_system].
			</description>
		</method>
		<method name="get_unix_time_from_datetime" qualifiers="const">
			<return type="int" />
			<argument index="0" name="datetime" type="Dictionary" />
			<description>
				Получает значение эпохального времени из словаря временных значений.
				[code]datetime[/code] должен быть заполнен следующими ключами: [code]year[/code], [code]month[/code], [code]day[/code], [code]hour[/code], [code]minute[/code], [code]second[/code].
				Если словарь пуст, возвращается [code]0[/code]. Если некоторые ключи опущены, то по умолчанию они принимают эквивалентные значения для временной метки эпохи UNIX 0 (1970-01-01 в 00:00:00 UTC).
				Вы можете передать вывод из [метода get_datetime_from_unix_time] непосредственно в эту функцию. Летнее время ([code]dst[/code]), если оно присутствует, игнорируется.
			</description>
		</method>
		<method name="get_user_data_dir" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает абсолютный путь к каталогу, в котором записаны данные пользователя ([code]user://[/code]).
				В Linux это [code]~/.local/share/godot/app_userdata/[имя_проекта][/code], или [code]~/.local/share/[имя_пользователя][/code], если установлено [code]use_custom_user_dir[/code].
				В macOS это [code]~/Library/Application Support/Godot/app_userdata/[project_name][/code], или [code]~/Library/Application Support/[custom_name][/code], если [code]use_custom_user_dir[/code] установлен.
				В Windows это [code]%APPDATA%\Godot\app_userdata\[имя_проекта][/code], или [code]%APPDATA%\[имя_настройки][/code], если задан [code]use_custom_user_dir[/code]. [code]%APPDATA%[/code] расширяется до [code]%USERPROFILE%\AppData\Roaming[/code].
				Если имя проекта пустое, [code]user://[/code] возвращается к [code]res://[/code].
				Не следует путать с [методом get_data_dir], который возвращает [i]глобальный[/i] (не зависящий от проекта) каталог данных пользователя.
			</description>
		</method>
		<method name="get_video_driver_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество видеодрайверов, поддерживаемых на текущей платформе.
			</description>
		</method>
		<method name="get_video_driver_name" qualifiers="const">
			<return type="String" />
			<argument index="0" name="driver" type="int" enum="OS.VideoDriver" />
			<description>
				Возвращает имя видеодрайвера, соответствующего заданному [code]driver[/code] индексу. Этот индекс является значением из [enum VideoDriver], и вы можете использовать [метод get_current_video_driver], чтобы получить индекс текущего бэкенда.
			</description>
		</method>
		<method name="get_virtual_keyboard_height">
			<return type="int" />
			<description>
				Возвращает высоту экранной клавиатуры в пикселях. Возвращает 0, если клавиатура отсутствует или если она в данный момент скрыта.
			</description>
		</method>
		<method name="get_window_safe_area" qualifiers="const">
			<return type="Rect2" />
			<description>
				Возвращает незатененную область окна, в которой должны быть отображены интерактивные элементы управления.
			</description>
		</method>
		<method name="global_menu_add_item">
			<return type="void" />
			<argument index="0" name="menu" type="String" />
			<argument index="1" name="label" type="String" />
			<argument index="2" name="id" type="Variant" />
			<argument index="3" name="meta" type="Variant" />
			<description>
				Добавьте новый пункт с текстом "label" в глобальное меню. Используйте меню "_dock", чтобы добавить пункт в меню значка дока macOS.
				[b]Примечание:[/b] Этот метод реализован на macOS.
			</description>
		</method>
		<method name="global_menu_add_separator">
			<return type="void" />
			<argument index="0" name="menu" type="String" />
			<description>
				Добавьте разделитель между элементами. Разделители также занимают индекс.
				[b]Примечание:[/b] Этот метод реализован на macOS.
			</description>
		</method>
		<method name="global_menu_clear">
			<return type="void" />
			<argument index="0" name="menu" type="String" />
			<description>
				Очистить глобальное меню, фактически удалив все пункты.
				[b]Примечание:[/b] Этот метод реализован на macOS.
			</description>
		</method>
		<method name="global_menu_remove_item">
			<return type="void" />
			<argument index="0" name="menu" type="String" />
			<argument index="1" name="idx" type="int" />
			<description>
				Удаляет пункт с индексом "idx" из глобального меню. Обратите внимание, что индексы пунктов после удаленного будут сдвинуты на единицу.
				[b]Примечание:[/b] Этот метод реализован на macOS.
			</description>
		</method>
		<method name="has_clipboard" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если в буфере обмена есть содержимое.
			</description>
		</method>
		<method name="has_environment" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="variable" type="String" />
			<description>
				Возвращает [code]true[/code], если переменная окружения с именем [code]variable[/code] существует.
				[b]Примечание:[/b] Дважды проверьте регистр [code]variable[/code]. Имена переменных окружения чувствительны к регистру на всех платформах, кроме Windows.
			</description>
		</method>
		<method name="has_feature" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="tag_name" type="String" />
			<description>
				Возвращает [code]true[/code], если функция для заданного тега feature поддерживается в текущем запущенном экземпляре, в зависимости от платформы, сборки и т. д. Может использоваться для проверки того, запущена ли в данный момент отладочная сборка, на определенной платформе или арке и т. д. Более подробную информацию см. в документации [url=$DOCS_URL/tutorials/export/feature_tags.html]Feature Tags[/url].
				[b]Примечание:[/b] Имена тегов чувствительны к регистру.
			</description>
		</method>
		<method name="has_touchscreen_ui_hint" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если устройство имеет сенсорный экран или эмулирует его.
			</description>
		</method>
		<method name="has_virtual_keyboard" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если платформа имеет виртуальную клавиатуру, [code]false[/code] - в противном случае.
			</description>
		</method>
		<method name="hide_virtual_keyboard">
			<return type="void" />
			<description>
				Скрывает виртуальную клавиатуру, если она отображается, в противном случае ничего не делает.
			</description>
		</method>
		<method name="is_debug_build" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если двоичный файл Godot, используемый для запуска проекта, является экспортным шаблоном [i]debug[/i], или при запуске в редакторе.
				Возвращает [code]false[/code], если двоичный файл Godot, используемый для запуска проекта, является экспортным шаблоном [i]release[/i].
				Чтобы проверить, является ли двоичный файл Godot, используемый для запуска проекта, экспортным шаблоном (отладочным или релизным), используйте [code]OS.has_feature("standalone")[/code] вместо этого.
			</description>
		</method>
		<method name="is_ok_left_and_cancel_right" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если кнопка [b]OK[/b] должна отображаться слева, а [b]Cancel[/b] - справа.
			</description>
		</method>
		<method name="is_process_running" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="pid" type="int" />
			<description>
				Возвращает [code]true[/code], если идентификатор дочернего процесса ([code]pid[/code]) все еще работает, или [code]false[/code], если он завершился.
				Должен быть действительный идентификатор, сгенерированный из [метода execute].
				[b]Примечание:[/b] Этот метод реализован на Android, iOS, Linux, macOS и Windows.
			</description>
		</method>
		<method name="is_scancode_unicode" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="code" type="int" />
			<description>
				Возвращает [code]true[/code], если введенный сканкод соответствует символу Юникода.
			</description>
		</method>
		<method name="is_stdout_verbose" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если движок был выполнен с [code]-v[/code] (verbose stdout).
			</description>
		</method>
		<method name="is_userfs_persistent" qualifiers="const">
			<return type="bool" />
			<description>
				Если [code]true[/code], то файловая система [code]user://[/code] является постоянной, так что ее состояние не изменится после того, как игрок выйдет из игры и начнет ее заново. Актуально для платформы HTML5, где такое постоянство может быть недоступно.
			</description>
		</method>
		<method name="is_window_always_on_top" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если окно всегда должно быть поверх других окон.
			</description>
		</method>
		<method name="is_window_focused" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если окно в данный момент сфокусировано.
				[b]Примечание:[/b] Реализовано только на настольных платформах. На других платформах он всегда будет возвращать [code]true[/code].
			</description>
		</method>
		<method name="keyboard_get_current_layout" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает индекс активной раскладки клавиатуры.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="keyboard_get_layout_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество раскладок клавиатуры.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="keyboard_get_layout_language" qualifiers="const">
			<return type="String" />
			<argument index="0" name="index" type="int" />
			<description>
				Возвращает код языка ISO-639/BCP-47 раскладки клавиатуры в позиции [code]index[/code].
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="keyboard_get_layout_name" qualifiers="const">
			<return type="String" />
			<argument index="0" name="index" type="int" />
			<description>
				Возвращает локализованное название раскладки клавиатуры в позиции [code]index[/code].
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="keyboard_get_scancode_from_physical" qualifiers="const">
			<return type="int" />
			<argument index="0" name="scancode" type="int" />
			<description>
				Преобразует физический (US QWERTY) [code]scancode[/code] в таковой в активной раскладке клавиатуры.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="keyboard_set_current_layout">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<description>
				Устанавливает активную раскладку клавиатуры.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="kill">
			<return type="int" enum="Error" />
			<argument index="0" name="pid" type="int" />
			<description>
				Убить (завершить) процесс, идентифицируемый заданным идентификатором процесса ([code]pid[/code]), например, процесс, возвращаемый [method execute] в неблокирующем режиме. См. также [method crash].
				[b]Примечание:[/b] Этот метод также может быть использован для уничтожения процессов, которые не были порождены игрой.
				[b]Примечание:[/b] Этот метод реализован на Android, iOS, Linux, macOS и Windows.
			</description>
		</method>
		<method name="move_to_trash" qualifiers="const">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Перемещает файл или каталог в системную корзину. См. также [метод Directory.remove].
				Метод принимает только глобальные пути, поэтому вам может понадобиться использовать [метод ProjectSettings.globalize_path]. Не используйте его для файлов в [code]res://[/code], так как он не будет работать в экспортированном проекте.
				[b]Примечание:[/b] Если в системе пользователя отключена корзина, файл будет удален навсегда.
				[codeblock]
				var file_to_remove = "user://slot1.sav"
				OS.move_to_trash(ProjectSettings.globalize_path(file_to_remove))
				[/codeblock]
			</description>
		</method>
		<method name="move_window_to_foreground">
			<return type="void" />
			<description>
				Перемещает окно на передний план.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="native_video_is_playing">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если воспроизводится родное видео.
				[b]Примечание:[/b] Этот метод реализован только на iOS.
			</description>
		</method>
		<method name="native_video_pause">
			<return type="void" />
			<description>
				Приостанавливает воспроизведение родного видео.
				[b]Примечание:[/b] Этот метод реализован только на iOS.
			</description>
		</method>
		<method name="native_video_play">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="volume" type="float" />
			<argument index="2" name="audio_track" type="String" />
			<argument index="3" name="subtitle_track" type="String" />
			<description>
				Воспроизводит родное видео с указанного пути, с заданной громкостью, с аудио и субтитрами.
				[b]Примечание:[/b] Этот метод реализован только на iOS.
			</description>
		</method>
		<method name="native_video_stop">
			<return type="void" />
			<description>
				Остановка воспроизведения встроенного видео.
				[b]Примечание:[/b] Этот метод реализован на iOS.
			</description>
		</method>
		<method name="native_video_unpause">
			<return type="void" />
			<description>
				Возобновляет воспроизведение родного видео.
				[b]Примечание:[/b] Этот метод реализован на iOS.
			</description>
		</method>
		<method name="open_midi_inputs">
			<return type="void" />
			<description>
				Инициализирует синглтон для системного MIDI-драйвера.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="print_all_resources">
			<return type="void" />
			<argument index="0" name="tofile" type="String" default="&quot;&quot;" />
			<description>
				Показывает все ресурсы в игре. По желанию список можно записать в файл, указав путь к файлу в [code]tofile[/code].
			</description>
		</method>
		<method name="print_all_textures_by_size">
			<return type="void" />
			<description>
				Показывает список загруженных текстур, отсортированных по размеру в памяти.
			</description>
		</method>
		<method name="print_resources_by_type">
			<return type="void" />
			<argument index="0" name="types" type="PoolStringArray" />
			<description>
				Показывает количество загруженных игрой ресурсов заданных типов.
			</description>
		</method>
		<method name="print_resources_in_use">
			<return type="void" />
			<argument index="0" name="short" type="bool" default="false" />
			<description>
				Показывает все ресурсы, используемые игрой в данный момент.
			</description>
		</method>
		<method name="request_attention">
			<return type="void" />
			<description>
				Привлеките внимание пользователя к окну. Это будет мигающая кнопка панели задач в Windows или прыгающий значок дока в OSX.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="request_permission">
			<return type="bool" />
			<argument index="0" name="name" type="String" />
			<description>
				На данный момент эта функция используется только [code]AudioDriverOpenSL[/code] для запроса разрешения на [code]RECORD_AUDIO[/code] на Android.
			</description>
		</method>
		<method name="request_permissions">
			<return type="bool" />
			<description>
				С помощью этой функции вы можете запрашивать опасные разрешения, поскольку обычные разрешения автоматически предоставляются при установке в приложениях Android.
				[b]Примечание:[/b] Этот метод реализован на Android.
			</description>
		</method>
		<method name="set_environment" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="variable" type="String" />
			<argument index="1" name="value" type="String" />
			<description>
				Устанавливает значение переменной окружения [code]variable[/code] в [code]value[/code]. Переменная окружения будет установлена для процесса Godot и любого процесса, выполняемого с помощью [method execute] после выполнения [method set_environment]. Переменная окружения [i]не[/i] сохранится для процессов, запущенных после завершения процесса Godot.
				[b]Примечание:[/b] Дважды проверьте регистр [code]переменной[/code]. Имена переменных окружения чувствительны к регистру на всех платформах, кроме Windows.
			</description>
		</method>
		<method name="set_icon">
			<return type="void" />
			<argument index="0" name="icon" type="Image" />
			<description>
				Устанавливает иконку игры, используя ресурс [Image].
				Одно и то же изображение используется для надписи окна, панели задач/дока и диалога выбора окна. Изображение масштабируется по мере необходимости.
				[b]Примечание:[/b] Этот метод реализован на HTML5, Linux, macOS и Windows.
			</description>
		</method>
		<method name="set_ime_active">
			<return type="void" />
			<argument index="0" name="active" type="bool" />
			<description>
				Устанавливает, должен ли быть включен режим ввода IME.
				Если режим активен, IME обрабатывает ключевые события раньше приложения и создает строку композиции и список предложений.
				Приложение может получить статус композиции с помощью функций [method get_ime_selection] и [method get_ime_text].
				Завершенная композиционная строка фиксируется по окончании ввода.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="set_ime_position">
			<return type="void" />
			<argument index="0" name="position" type="Vector2" />
			<description>
				Устанавливает позицию всплывающего списка предложений IME (в координатах окна).
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="set_native_icon">
			<return type="void" />
			<argument index="0" name="filename" type="String" />
			<description>
				Устанавливает иконку игры, используя многоразмерный файл иконок для конкретной платформы ([code]*.ico[/code] для Windows и [code]*.icns[/code] для macOS).
				Для надписи окна, панели задач/дока и диалога выбора окна используются суб-иконы соответствующего размера.
				[b]Примечание:[/b] Этот метод реализован на macOS и Windows.
			</description>
		</method>
		<method name="set_thread_name">
			<return type="int" enum="Error" />
			<argument index="0" name="name" type="String" />
			<description>
				Устанавливает имя текущего потока.
			</description>
		</method>
		<method name="set_use_file_access_save_and_swap">
			<return type="void" />
			<argument index="0" name="enabled" type="bool" />
			<description>
				Включает сохранение резервных копий, если [code]enabled[/code] имеет значение [code]true[/code].
			</description>
		</method>
		<method name="set_window_always_on_top">
			<return type="void" />
			<argument index="0" name="enabled" type="bool" />
			<description>
				Устанавливает, должно ли окно всегда находиться сверху.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="set_window_mouse_passthrough">
			<return type="void" />
			<argument index="0" name="region" type="PoolVector2Array" />
			<description>
				Задает полигональную область окна, принимающую события мыши. События мыши за пределами области будут пропускаться.
				Передача пустого массива отключит поддержку прохода (все события мыши будут перехватываться окном, что является поведением по умолчанию).
				[codeblock]
				# Устанавливаем регион, используя узел Path2D.
				OS.set_window_mouse_passthrough($Path2D.curve.get_baked_points())

				# Установите регион, используя узел Polygon2D.
				OS.set_window_mouse_passthrough($Polygon2D.polygon)

				# Сбросьте регион на значение по умолчанию.
				OS.set_window_mouse_passthrough([])
				[/codeblock]
				[b]Примечание:[/b] В Windows часть окна, находящаяся за пределами региона, не отрисовывается, а в Linux и macOS - отрисовывается.
				[b]Примечание:[/b] Этот метод реализован в Linux, macOS и Windows.
			</description>
		</method>
		<method name="set_window_title">
			<return type="void" />
			<argument index="0" name="title" type="String" />
			<description>
				Устанавливает заголовок окна в указанную строку.
				[b]Примечание:[/b] Этот параметр следует использовать эпизодически. Не устанавливайте его каждый кадр, так как это негативно скажется на производительности некоторых оконных менеджеров.
				[b]Примечание:[/b] Этот метод реализован на HTML5, Linux, macOS и Windows.
			</description>
		</method>
		<method name="shell_open">
			<return type="int" enum="Error" />
			<argument index="0" name="uri" type="String" />
			<description>
				Просит ОС открыть ресурс с помощью наиболее подходящей программы. Например:
				- [code]OS.shell_open("C:\\Users\name\Downloads")[/code] в Windows открывает проводник файлов в папке Downloads пользователя.
				- [code]OS.shell_open("https://godotengine.org")[/code] открывает веб-браузер по умолчанию на официальном сайте Godot.
				- [code]OS.shell_open("mailto:example@example.com")[/code] открывает почтовый клиент по умолчанию с полем "Кому", установленным на [code]example@example.com[/code]. Список полей, которые можно добавить, см. в [url=https://datatracker.ietf.org/doc/html/rfc2368]RFC 2368 - The [code]mailto[/code] URL scheme[/url].
				Используйте [метод ProjectSettings.globalize_path] для преобразования пути [code]res://[/code] или [code]user://[/code] в системный путь для использования с этим методом.
				[b]Примечание:[/b] Используйте [метод String.percent_encode] для кодирования символов в URL безопасным для URL переносимым способом. Это особенно необходимо для переноса строк. В противном случае [метод shell_open] может работать некорректно в проекте, экспортируемом на веб-платформу.
				[b]Примечание:[/b] Этот метод реализован на Android, iOS, HTML5, Linux, macOS и Windows.
			</description>
		</method>
		<method name="show_virtual_keyboard">
			<return type="void" />
			<argument index="0" name="existing_text" type="String" default="&quot;&quot;" />
			<argument index="1" name="multiline" type="bool" default="false" />
			<description>
				Показывает виртуальную клавиатуру, если она есть на платформе.
				Параметр [code]existing_text[/code] полезен при реализации собственных [LineEdit] или [TextEdit], так как он сообщает виртуальной клавиатуре, какой текст уже был набран (виртуальная клавиатура использует его для автокоррекции и предсказания).
				Параметр [code]multiline[/code] должен быть установлен в [code]true[/code], чтобы иметь возможность вводить несколько строк текста, как в [TextEdit].
				[b]Примечание:[/b] Этот метод реализован на Android, iOS и UWP.
			</description>
		</method>
	</methods>
	<members>
		<member name="clipboard" type="String" setter="set_clipboard" getter="get_clipboard" default="&quot;&quot;">
			Буфер обмена из основной ОС. Может быть недоступен на некоторых платформах.
		</member>
		<member name="current_screen" type="int" setter="set_current_screen" getter="get_current_screen" default="0">
			Текущий индекс экрана (начиная с 0).
		</member>
		<member name="delta_smoothing" type="bool" setter="set_delta_smoothing" getter="is_delta_smoothing_enabled" default="true">
			Если [code]true[/code], движок фильтрует временную дельту, измеренную между каждым кадром, и пытается компенсировать случайные отклонения. Это будет работать только в системах, где активна функция V-Sync.
		</member>
		<member name="exit_code" type="int" setter="set_exit_code" getter="get_exit_code" default="0">
			Код выхода, передаваемый ОС при выходе из главного цикла. По условию, код выхода, равный [code]0[/code], означает успех, в то время как ненулевой код выхода означает ошибку. По соображениям переносимости код выхода должен быть установлен в диапазоне от 0 до 125 (включительно).
			[b]Примечание:[/b] Это значение будет игнорироваться при использовании [метода SceneTree.quit] с переданным аргументом [code]exit_code[/code].
		</member>
		<member name="keep_screen_on" type="bool" setter="set_keep_screen_on" getter="is_keep_screen_on" default="true">
			Если [code]true[/code], движок пытается удержать экран включенным во время игры. Полезно для мобильных устройств.
		</member>
		<member name="low_processor_usage_mode" type="bool" setter="set_low_processor_usage_mode" getter="is_in_low_processor_usage_mode" default="false">
			Если [code]true[/code], движок оптимизирует использование процессора, обновляя экран только при необходимости. Это может улучшить расход батареи на мобильных устройствах.
		</member>
		<member name="low_processor_usage_mode_sleep_usec" type="int" setter="set_low_processor_usage_mode_sleep_usec" getter="get_low_processor_usage_mode_sleep_usec" default="6900">
			Время сна между кадрами при включенном режиме низкого использования процессора (в микросекундах). Более высокие значения приводят к снижению использования процессора.
		</member>
		<member name="max_window_size" type="Vector2" setter="set_max_window_size" getter="get_max_window_size" default="Vector2( 0, 0 )">
			Максимальный размер окна (без учета украшений оконного менеджера). Не влияет на полноэкранный режим. Установите значение [code](0, 0)[/code] для сброса к системному значению по умолчанию.
		</member>
		<member name="min_window_size" type="Vector2" setter="set_min_window_size" getter="get_min_window_size" default="Vector2( 0, 0 )">
			Минимальный размер окна в пикселях (без учета украшений оконного менеджера). Не влияет на полноэкранный режим. Установите значение [code](0, 0)[/code] для сброса к значению системы по умолчанию.
			[b]Примечание:[/b] По умолчанию окно проекта имеет минимальный размер [code]Vector2(64, 64)[/code]. Это предотвращает проблемы, которые могут возникнуть при изменении размера окна до почти нулевого.
		</member>
		<member name="screen_orientation" type="int" setter="set_screen_orientation" getter="get_screen_orientation" enum="OS.ScreenOrientation" default="0">
			Текущая ориентация экрана.
		</member>
		<member name="tablet_driver" type="String" setter="set_current_tablet_driver" getter="get_current_tablet_driver" default="&quot;&quot;">
			Текущий используемый драйвер планшета.
		</member>
		<member name="vsync_enabled" type="bool" setter="set_use_vsync" getter="is_vsync_enabled" default="true">
			Если [code]true[/code], вертикальная синхронизация (Vsync) включена.
		</member>
		<member name="vsync_via_compositor" type="bool" setter="set_vsync_via_compositor" getter="is_vsync_via_compositor_enabled" default="false">
			Если [code]true[/code] и [code]vsync_enabled[/code] равны true, то для vsync будет использоваться оконный композитор операционной системы, когда композитор включен и игра находится в оконном режиме.
			[b]Примечание:[/b] Эта опция является экспериментальной и предназначена для уменьшения заикания, с которым сталкиваются некоторые пользователи. Однако у некоторых пользователей при ее использовании наблюдается снижение частоты кадров Vsync вдвое (например, с 60 FPS до 30 FPS).
			[b]Примечание:[/b] Это свойство реализовано только в Windows.
		</member>
		<member name="window_borderless" type="bool" setter="set_borderless_window" getter="get_borderless_window" default="false">
			Если [code]true[/code], убирает рамку окна.
			[b]Примечание:[/b] Установка [code]window_borderless[/code] в [code]false[/code] отключает попиксельную прозрачность.
		</member>
		<member name="window_fullscreen" type="bool" setter="set_window_fullscreen" getter="is_window_fullscreen" default="false">
			Если [code]true[/code], то окно будет полноэкранным.
		</member>
		<member name="window_maximized" type="bool" setter="set_window_maximized" getter="is_window_maximized" default="false">
			Если [code]true[/code], окно будет максимизировано.
		</member>
		<member name="window_minimized" type="bool" setter="set_window_minimized" getter="is_window_minimized" default="false">
			Если [code]true[/code], окно сворачивается.
		</member>
		<member name="window_per_pixel_transparency_enabled" type="bool" setter="set_window_per_pixel_transparency_enabled" getter="get_window_per_pixel_transparency_enabled" default="false">
			Если [code]true[/code], фон окна становится прозрачным, а рамка окна удаляется.
			Используйте [code]get_tree().get_root().set_transparent_background(true)[/code], чтобы отключить отрисовку фона главного окна просмотра.
			[b]Примечание:[/b] Это свойство не имеет эффекта, если параметр [member ProjectSettings.display/window/per_pixel_transparency/allowed] отключен.
			[b]Примечание:[/b] Это свойство реализовано в HTML5, Linux, macOS, Windows и Android. Для Android оно не может быть изменено во время выполнения. Вместо этого используйте [member ProjectSettings.display/window/per_pixel_transparency/enabled], чтобы установить его при запуске.
		</member>
		<member name="window_position" type="Vector2" setter="set_window_position" getter="get_window_position" default="Vector2( 0, 0 )">
			Положение окна относительно экрана, начало координат - левый верхний угол, ось +Y идет вниз, а ось +X - вправо.
		</member>
		<member name="window_resizable" type="bool" setter="set_window_resizable" getter="is_window_resizable" default="true">
			Если [code]true[/code], то окно может быть изменено пользователем по размеру.
		</member>
		<member name="window_size" type="Vector2" setter="set_window_size" getter="get_window_size" default="Vector2( 0, 0 )">
			Размер окна (без учета украшений оконного менеджера).
		</member>
	</members>
	<constants>
		<constant name="VIDEO_DRIVER_GLES2" value="1" enum="VideoDriver">
			Бэкэнд рендеринга GLES2. Он использует OpenGL ES 2.0 на мобильных устройствах, OpenGL 2.1 на настольных платформах и WebGL 1.0 в Интернете.
		</constant>
		<constant name="VIDEO_DRIVER_GLES3" value="0" enum="VideoDriver">
			Бэкэнд рендеринга GLES3. Он использует OpenGL ES 3.0 на мобильных устройствах, OpenGL 3.3 на настольных платформах и WebGL 2.0 в Интернете.
		</constant>
		<constant name="DAY_SUNDAY" value="0" enum="Weekday">
			Воскресенье.
		</constant>
		<constant name="DAY_MONDAY" value="1" enum="Weekday">
			Понедельник.
		</constant>
		<constant name="DAY_TUESDAY" value="2" enum="Weekday">
			Вторник.
		</constant>
		<constant name="DAY_WEDNESDAY" value="3" enum="Weekday">
			Среда.
		</constant>
		<constant name="DAY_THURSDAY" value="4" enum="Weekday">
			Четверг.
		</constant>
		<constant name="DAY_FRIDAY" value="5" enum="Weekday">
			Пятница.
		</constant>
		<constant name="DAY_SATURDAY" value="6" enum="Weekday">
			Суббота.
		</constant>
		<constant name="MONTH_JANUARY" value="1" enum="Month">
			Январь.
		</constant>
		<constant name="MONTH_FEBRUARY" value="2" enum="Month">
			Февраль.
		</constant>
		<constant name="MONTH_MARCH" value="3" enum="Month">
			Март.
		</constant>
		<constant name="MONTH_APRIL" value="4" enum="Month">
			Апрель.
		</constant>
		<constant name="MONTH_MAY" value="5" enum="Month">
			Май.
		</constant>
		<constant name="MONTH_JUNE" value="6" enum="Month">
			Июнь.
		</constant>
		<constant name="MONTH_JULY" value="7" enum="Month">
			Июль.
		</constant>
		<constant name="MONTH_AUGUST" value="8" enum="Month">
			Август.
		</constant>
		<constant name="MONTH_SEPTEMBER" value="9" enum="Month">
			Сентябрь.
		</constant>
		<constant name="MONTH_OCTOBER" value="10" enum="Month">
			Октябрь.
		</constant>
		<constant name="MONTH_NOVEMBER" value="11" enum="Month">
			Ноябрь.
		</constant>
		<constant name="MONTH_DECEMBER" value="12" enum="Month">
			Декабрь.
		</constant>
		<constant name="APPLICATION_HANDLE" value="0" enum="HandleType">
			Ручка приложения:
			- Windows: [code]HINSTANCE[/code] приложения
			- MacOS: [code]NSApplication*[/code] приложения (пока не реализовано)
			- Android: [code]JNIEnv*[/code] приложения (пока не реализовано)
		</constant>
		<constant name="DISPLAY_HANDLE" value="1" enum="HandleType">
			Ручка дисплея:
			- Linux: [code]X11::Display*[/code] для дисплея
		</constant>
		<constant name="WINDOW_HANDLE" value="2" enum="HandleType">
			Оконная ручка:
			- Windows: [code]HWND[/code] главного окна
			- Linux: [code]X11::Window*[/code] главного окна
			- MacOS: [code]NSWindow*[/code] главного окна (пока не реализовано)
			- Android: [code]jObject[/code] основной активности андроида (пока не реализовано)
		</constant>
		<constant name="WINDOW_VIEW" value="3" enum="HandleType">
			Вид из окна:
			- Окна: [code]HDC[/code] контекста рисования главного окна
			- MacOS: [code]NSView*[/code] представления главного окна (пока не реализовано)
		</constant>
		<constant name="OPENGL_CONTEXT" value="4" enum="HandleType">
			Контекст OpenGL:
			- Windows: [code]HGLRC[/code]
			- Linux: [code]X11::GLXContext[/code]
			- MacOS: [code]NSOpenGLContext*[/code] (пока не реализовано)
		</constant>
		<constant name="SCREEN_ORIENTATION_LANDSCAPE" value="0" enum="ScreenOrientation">
			Landscape screen orientation.
		</constant>
		<constant name="SCREEN_ORIENTATION_PORTRAIT" value="1" enum="ScreenOrientation">
			Портретная ориентация экрана.
		</constant>
		<constant name="SCREEN_ORIENTATION_REVERSE_LANDSCAPE" value="2" enum="ScreenOrientation">
			Обратная альбомная ориентация экрана.
		</constant>
		<constant name="SCREEN_ORIENTATION_REVERSE_PORTRAIT" value="3" enum="ScreenOrientation">
			Обратная портретная ориентация экрана.
		</constant>
		<constant name="SCREEN_ORIENTATION_SENSOR_LANDSCAPE" value="4" enum="ScreenOrientation">
			Используется пейзаж или обратный пейзаж в зависимости от аппаратного датчика.
		</constant>
		<constant name="SCREEN_ORIENTATION_SENSOR_PORTRAIT" value="5" enum="ScreenOrientation">
			Используется портрет или обратный портрет в зависимости от аппаратного датчика.
		</constant>
		<constant name="SCREEN_ORIENTATION_SENSOR" value="6" enum="ScreenOrientation">
			Использует наиболее подходящую ориентацию на основе аппаратного датчика.
		</constant>
		<constant name="SYSTEM_DIR_DESKTOP" value="0" enum="SystemDir">
			Путь к каталогу рабочего стола.
		</constant>
		<constant name="SYSTEM_DIR_DCIM" value="1" enum="SystemDir">
			Путь к каталогу DCIM (изображения с цифровой камеры).
		</constant>
		<constant name="SYSTEM_DIR_DOCUMENTS" value="2" enum="SystemDir">
			Путь к каталогу документов.
		</constant>
		<constant name="SYSTEM_DIR_DOWNLOADS" value="3" enum="SystemDir">
			Downloads directory path.
		</constant>
		<constant name="SYSTEM_DIR_MOVIES" value="4" enum="SystemDir">
			Путь к каталогу фильмов.
		</constant>
		<constant name="SYSTEM_DIR_MUSIC" value="5" enum="SystemDir">
			Путь к музыкальному каталогу.
		</constant>
		<constant name="SYSTEM_DIR_PICTURES" value="6" enum="SystemDir">
			Путь к каталогу изображений.
		</constant>
		<constant name="SYSTEM_DIR_RINGTONES" value="7" enum="SystemDir">
			Путь к каталогу рингтонов.
		</constant>
		<constant name="POWERSTATE_UNKNOWN" value="0" enum="PowerState">
			Неизвестное состояние питания.
		</constant>
		<constant name="POWERSTATE_ON_BATTERY" value="1" enum="PowerState">
			Отключен от сети, работает от аккумулятора.
		</constant>
		<constant name="POWERSTATE_NO_BATTERY" value="2" enum="PowerState">
			Подключен к сети, батарея отсутствует.
		</constant>
		<constant name="POWERSTATE_CHARGING" value="3" enum="PowerState">
			Подключен к сети, аккумулятор заряжается.
		</constant>
		<constant name="POWERSTATE_CHARGED" value="4" enum="PowerState">
			Подключен к сети, аккумулятор полностью заряжен.
		</constant>
	</constants>
</class>
