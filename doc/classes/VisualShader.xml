<?xml version="1.0" encoding="UTF-8" ?>
<class name="VisualShader" inherits="Shader" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Пользовательская программа для создания шейдеров с визуальным редактором.
	</brief_description>
	<description>
		Этот класс позволяет определить пользовательскую программу шейдеров, которая может быть использована для различных материалов при рендеринге объектов.
		Визуальный редактор шейдеров создает шейдер.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_node">
			<return type="void" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<argument index="1" name="node" type="VisualShaderNode" />
			<argument index="2" name="position" type="Vector2" />
			<argument index="3" name="id" type="int" />
			<description>
				Добавляет указанный узел в шейдер.
			</description>
		</method>
		<method name="can_connect_nodes" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<argument index="1" name="from_node" type="int" />
			<argument index="2" name="from_port" type="int" />
			<argument index="3" name="to_node" type="int" />
			<argument index="4" name="to_port" type="int" />
			<description>
				Возвращает [code]true[/code], если указанные узлы и порты могут быть соединены вместе.
			</description>
		</method>
		<method name="connect_nodes">
			<return type="int" enum="Error" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<argument index="1" name="from_node" type="int" />
			<argument index="2" name="from_port" type="int" />
			<argument index="3" name="to_node" type="int" />
			<argument index="4" name="to_port" type="int" />
			<description>
				Соединяет указанные узлы и порты.
			</description>
		</method>
		<method name="connect_nodes_forced">
			<return type="void" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<argument index="1" name="from_node" type="int" />
			<argument index="2" name="from_port" type="int" />
			<argument index="3" name="to_node" type="int" />
			<argument index="4" name="to_port" type="int" />
			<description>
				Подключает указанные узлы и порты, даже если они не могут быть подключены. Такое соединение является недействительным и не будет работать должным образом.
			</description>
		</method>
		<method name="disconnect_nodes">
			<return type="void" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<argument index="1" name="from_node" type="int" />
			<argument index="2" name="from_port" type="int" />
			<argument index="3" name="to_node" type="int" />
			<argument index="4" name="to_port" type="int" />
			<description>
				Соединяет указанные узлы и порты.
			</description>
		</method>
		<method name="get_node" qualifiers="const">
			<return type="VisualShaderNode" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<argument index="1" name="id" type="int" />
			<description>
				Возвращает экземпляр шейдерного узла с указанными [code]type[/code] и [code]id[/code].
			</description>
		</method>
		<method name="get_node_connections" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<description>
				Возвращает список связанных узлов с указанным типом.
			</description>
		</method>
		<method name="get_node_list" qualifiers="const">
			<return type="PoolIntArray" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<description>
				Возвращает список всех узлов в шейдере с указанным типом.
			</description>
		</method>
		<method name="get_node_position" qualifiers="const">
			<return type="Vector2" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<argument index="1" name="id" type="int" />
			<description>
				Возвращает позицию указанного узла в шейдерном графе.
			</description>
		</method>
		<method name="get_valid_node_id" qualifiers="const">
			<return type="int" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<description>
			</description>
		</method>
		<method name="is_node_connection" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<argument index="1" name="from_node" type="int" />
			<argument index="2" name="from_port" type="int" />
			<argument index="3" name="to_node" type="int" />
			<argument index="4" name="to_port" type="int" />
			<description>
				Возвращает [code]true[/code], если указанное соединение узла и порта существует.
			</description>
		</method>
		<method name="remove_node">
			<return type="void" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<argument index="1" name="id" type="int" />
			<description>
				Удаляет указанный узел из шейдера.
			</description>
		</method>
		<method name="set_mode">
			<return type="void" />
			<argument index="0" name="mode" type="int" enum="Shader.Mode" />
			<description>
				Устанавливает режим работы этого шейдера.
			</description>
		</method>
		<method name="set_node_position">
			<return type="void" />
			<argument index="0" name="type" type="int" enum="VisualShader.Type" />
			<argument index="1" name="id" type="int" />
			<argument index="2" name="position" type="Vector2" />
			<description>
				Устанавливает позицию указанного узла.
			</description>
		</method>
	</methods>
	<members>
		<member name="graph_offset" type="Vector2" setter="set_graph_offset" getter="get_graph_offset" default="Vector2( 0, 0 )">
			Вектор смещения всего графика.
		</member>
	</members>
	<constants>
		<constant name="TYPE_VERTEX" value="0" enum="Type">
			Вершинный шейдер, работающий с вершинами.
		</constant>
		<constant name="TYPE_FRAGMENT" value="1" enum="Type">
			Фрагментный шейдер, работающий с фрагментами (пикселями).
		</constant>
		<constant name="TYPE_LIGHT" value="2" enum="Type">
			Шейдер для расчета освещенности.
		</constant>
		<constant name="TYPE_MAX" value="3" enum="Type">
			Представляет размер перечисления [enum Type].
		</constant>
		<constant name="NODE_ID_INVALID" value="-1">
		</constant>
		<constant name="NODE_ID_OUTPUT" value="0">
		</constant>
	</constants>
</class>
