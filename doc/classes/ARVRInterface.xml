<?xml version="1.0" encoding="UTF-8" ?>
<class name="ARVRInterface" inherits="Reference" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Базовый класс для реализации интерфейса AR/VR.
	</brief_description>
	<description>
		Этот класс необходимо реализовать, чтобы сделать AR- или VR-платформу доступной для Godot, и они должны быть реализованы как модули C++ или модули GDNative (обратите внимание, что для GDNative следует использовать подкласс ARVRScriptInterface). Часть интерфейса передается в GDScript, чтобы можно было обнаружить, включить и настроить AR- или VR-платформу.
		Интерфейсы должны быть написаны таким образом, чтобы простое их включение давало нам рабочую установку. Доступные интерфейсы можно запросить через [ARVRServer].
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/vr/index.html</link>
	</tutorials>
	<methods>
		<method name="get_camera_feed_id">
			<return type="int" />
			<description>
				Если это AR-интерфейс, требующий отображения ленты камеры в качестве фона, то данный метод возвращает идентификатор ленты в [CameraServer] для этого интерфейса.
			</description>
		</method>
		<method name="get_capabilities" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает комбинацию флагов [enum Capabilities], предоставляющих информацию о возможностях данного интерфейса.
			</description>
		</method>
		<method name="get_name" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает название данного интерфейса (OpenVR, OpenHMD, ARKit и т.д.).
			</description>
		</method>
		<method name="get_render_targetsize">
			<return type="Vector2" />
			<description>
				Возвращает разрешение, в котором мы должны выводить наши промежуточные результаты, прежде чем такие вещи, как искажение объектива, будут применены платформой VR.
			</description>
		</method>
		<method name="get_tracking_status" qualifiers="const">
			<return type="int" enum="ARVRInterface.Tracking_status" />
			<description>
				Если поддерживается, возвращает статус отслеживания. Это позволит предоставить пользователю обратную связь о наличии проблем с позиционным отслеживанием.
			</description>
		</method>
		<method name="initialize">
			<return type="bool" />
			<description>
				Вызов этой функции инициализирует данный интерфейс. Первый инициализированный интерфейс определяется как основной и будет использоваться для вывода рендеринга.
				После инициализации используемого интерфейса необходимо включить режим AR/VR на видовом экране, и рендеринг начнется.
				[b]Примечание:[/b] Вы должны включить режим AR/VR на основном видовом экране для любого устройства, использующего основной вывод Godot, например для мобильного VR.
				Если это сделать для платформы, которая использует собственный выход (например, OpenVR), то Godot будет показывать на экране только один глаз без искажений. В качестве альтернативы можно добавить в сцену отдельный узел видового экрана и включить AR/VR на этом видовом экране. Он будет использоваться для вывода на HMD, оставляя вам возможность делать все, что угодно в основном окне, например, использовать отдельную камеру в качестве камеры зрителя или рендерить что-то совершенно другое.
				В настоящее время дополнительные интерфейсы не используются, но их можно активизировать. Это может понадобиться, если вы хотите отслеживать работу контроллеров с других платформ. Однако на данный момент только один интерфейс может быть отображен на HMD.
			</description>
		</method>
		<method name="is_stereo">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если текущий выход данного интерфейса является стереофоническим.
			</description>
		</method>
		<method name="uninitialize">
			<return type="void" />
			<description>
				Выключает интерфейс.
			</description>
		</method>
	</methods>
	<members>
		<member name="ar_is_anchor_detection_enabled" type="bool" setter="set_anchor_detection_is_enabled" getter="get_anchor_detection_is_enabled" default="false">
			На интерфейсе AR [code]true[/code], если обнаружение якорей включено.
		</member>
		<member name="interface_is_initialized" type="bool" setter="set_is_initialized" getter="is_initialized" default="false">
			[code]true[/code], если данный интерфейс был инициализирован.
		</member>
		<member name="interface_is_primary" type="bool" setter="set_is_primary" getter="is_primary" default="false">
			[code]true[/code], если это основной интерфейс.
		</member>
	</members>
	<constants>
		<constant name="ARVR_NONE" value="0" enum="Capabilities">
			Отсутствуют возможности ARVR.
		</constant>
		<constant name="ARVR_MONO" value="1" enum="Capabilities">
			Этот интерфейс может работать с обычным рендерингом (AR без HMD).
		</constant>
		<constant name="ARVR_STEREO" value="2" enum="Capabilities">
			Этот интерфейс поддерживает стереоскопический рендеринг.
		</constant>
		<constant name="ARVR_AR" value="4" enum="Capabilities">
			Этот интерфейс поддерживает AR (видеофон и отслеживание реального мира)
		</constant>
		<constant name="ARVR_EXTERNAL" value="8" enum="Capabilities">
			Данный интерфейс осуществляет вывод на внешнее устройство. Если используется основной видовой экран, то на экран выводится немодифицированный буфер левого или правого глаза (растянутый, если размер видового экрана не изменен на то же соотношение сторон [method get_render_targetsize]). Использование отдельного узла видового экрана позволяет освободить основной видовой экран для других целей.
		</constant>
		<constant name="EYE_MONO" value="0" enum="Eyes">
			Монофонический вывод используется в основном для получения информации о позиционировании узла камеры или когда не поддерживается стереоскопический рендеринг.
		</constant>
		<constant name="EYE_LEFT" value="1" enum="Eyes">
			Вывод для левого глаза, используется в основном для внутреннего рендеринга изображения для левого глаза и получения информации о позиционировании и проекции.
		</constant>
		<constant name="EYE_RIGHT" value="2" enum="Eyes">
			Выход для правого глаза, используется в основном для внутреннего рендеринга изображения для правого глаза и получения информации о позиционировании и проекции.
		</constant>
		<constant name="ARVR_NORMAL_TRACKING" value="0" enum="Tracking_status">
			Трекинг ведет себя так, как и ожидалось.
		</constant>
		<constant name="ARVR_EXCESSIVE_MOTION" value="1" enum="Tracking_status">
			Отслеживание затруднено из-за чрезмерной подвижности (игрок движется быстрее, чем успевает отследит
		</constant>
		<constant name="ARVR_INSUFFICIENT_FEATURES" value="2" enum="Tracking_status">
			Слежению мешают недостаточные характеристики, слишком темно (для слежения с помощью камеры), игрок заблокирован и т.д.
		</constant>
		<constant name="ARVR_UNKNOWN_TRACKING" value="3" enum="Tracking_status">
			Мы не знаем статус отслеживания или этот интерфейс не обеспечивает обратной связи.
		</constant>
		<constant name="ARVR_NOT_TRACKING" value="4" enum="Tracking_status">
			Слежение не функционирует (камера не подключена или заслонена, маяки выключены и т.д.).
		</constant>
	</constants>
</class>
