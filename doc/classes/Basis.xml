<?xml version="1.0" encoding="UTF-8" ?>
<class name="Basis" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Тип данных матрицы 3×3.
	</brief_description>
	<description>
		Матрица 3×3, используемая для трехмерного вращения и масштабирования. Практически всегда используется в качестве ортогонального базиса преобразования.
		Содержит в качестве столбцов 3 векторных поля X, Y и Z, которые обычно интерпретируются как локальные базисные векторы преобразования. Для такого использования она состоит из матрицы масштабирования и матрицы вращения, причем в таком порядке (M = R.S).
		Также может быть использован как массив трехмерных векторов. Эти векторы обычно ортогональны друг другу, но не обязательно нормализованы (из-за масштабирования).
		Более подробную информацию можно найти в статье документации "Матрицы и преобразования".
	</description>
	<tutorials>
		<link title="Math tutorial index">$DOCS_URL/tutorials/math/index.html</link>
		<link title="Matrices and transforms">$DOCS_URL/tutorials/math/matrices_and_transforms.html</link>
		<link title="Using 3D transforms">$DOCS_URL/tutorials/3d/using_transforms.html</link>
		<link title="Matrix Transform Demo">https://godotengine.org/asset-library/asset/584</link>
		<link title="3D Platformer Demo">https://godotengine.org/asset-library/asset/125</link>
		<link title="3D Voxel Demo">https://godotengine.org/asset-library/asset/676</link>
		<link title="2.5D Demo">https://godotengine.org/asset-library/asset/583</link>
	</tutorials>
	<methods>
		<method name="Basis">
			<return type="Basis" />
			<argument index="0" name="from" type="Quat" />
			<description>
				Строит чистую базисную матрицу вращения из заданного кватерниона.
			</description>
		</method>
		<method name="Basis">
			<return type="Basis" />
			<argument index="0" name="from" type="Vector3" />
			<description>
				Строит чистую матрицу базиса вращения из заданных углов Эйлера (в соответствии с YXZ: при *композиции* сначала Y, затем X, и в последнюю очередь Z), заданных в векторном формате (угол X, угол Y, угол Z).
				Вместо этого можно использовать конструктор [Quat], в котором вместо углов Эйлера используется кватернион.
			</description>
		</method>
		<method name="Basis">
			<return type="Basis" />
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="angle" type="float" />
			<description>
				Строит базисную матрицу чистого вращения, повернутую вокруг заданной [code]axis[/code] на [code]angle[/code] (в радианах). Ось должна быть нормализованным вектором.
			</description>
		</method>
		<method name="Basis">
			<return type="Basis" />
			<argument index="0" name="x_axis" type="Vector3" />
			<argument index="1" name="y_axis" type="Vector3" />
			<argument index="2" name="z_axis" type="Vector3" />
			<description>
				Строит базисную матрицу из 3 осевых векторов (столбцов матрицы).
			</description>
		</method>
		<method name="determinant">
			<return type="float" />
			<description>
				Возвращает определитель матрицы базиса. Если базис равномерно масштабирован, то его определитель равен квадрату масштаба.
				Отрицательный определитель означает, что базис имеет отрицательный масштаб. Нулевой определитель означает, что базис не является инвертируемым, и обычно считается недействительным.
			</description>
		</method>
		<method name="get_euler">
			<return type="Vector3" />
			<description>
				Возвращает вращение базиса в виде углов Эйлера (по схеме YXZ: при разложении сначала Z, затем X и в последнюю очередь Y). Возвращаемый вектор содержит углы поворота в формате (угол X, угол Y, угол Z).
				Вместо него можно использовать метод [method get_rotation_quat], который вместо углов Эйлера возвращает кватернион [Quat].
			</description>
		</method>
		<method name="get_orthogonal_index">
			<return type="int" />
			<description>
				Эта функция рассматривает дискретизацию вращений на 24 точки на единичной сфере, лежащие вдоль векторов (x,y,z), каждая из которых равна либо -1, либо 0, либо 1, и возвращает индекс точки, наилучшим образом представляющей ориентацию объекта. В основном используется в редакторе [GridMap]. Более подробная информация приведена в исходном коде Godot.
			</description>
		</method>
		<method name="get_rotation_quat">
			<return type="Quat" />
			<description>
				Возвращает вращение базиса в виде кватерниона. Если вам нужны углы Эйлера, смотрите [method get_euler], но имейте в виду, что кватернионы, как правило, предпочтительнее углов Эйлера.
			</description>
		</method>
		<method name="get_scale">
			<return type="Vector3" />
			<description>
				Предполагая, что матрица представляет собой комбинацию вращения и масштабирования, верните абсолютное значение коэффициентов масштабирования по каждой оси.
			</description>
		</method>
		<method name="inverse">
			<return type="Basis" />
			<description>
				Возвращает обратную величину матрицы.
			</description>
		</method>
		<method name="is_equal_approx">
			<return type="bool" />
			<argument index="0" name="b" type="Basis" />
			<argument index="1" name="epsilon" type="float" default="1e-05" />
			<description>
				Возвращает [code]true[/code], если данный базис и [code]b[/code] приблизительно равны, путем вызова [code]is_equal_approx[/code] для каждой компоненты.
				[b]Примечание:[/b] По сложным причинам аргумент epsilon всегда отбрасывается. Не используйте аргумент epsilon, он ничего не дает.
			</description>
		</method>
		<method name="orthonormalized">
			<return type="Basis" />
			<description>
				Возвращает ортонормированную версию матрицы (полезно вызывать время от времени, чтобы избежать ошибки округления для ортогональных матриц). При этом выполняется ортонормирование по Граму-Шмидту по базису матрицы.
			</description>
		</method>
		<method name="rotated">
			<return type="Basis" />
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="angle" type="float" />
			<description>
				Вводит дополнительное вращение вокруг заданной оси на [code]angle[/code] (в радианах). Ось должна быть нормализованным вектором.
			</description>
		</method>
		<method name="scaled">
			<return type="Basis" />
			<argument index="0" name="scale" type="Vector3" />
			<description>
				Ввести дополнительное масштабирование, задаваемое заданным коэффициентом масштабирования 3D.
			</description>
		</method>
		<method name="slerp">
			<return type="Basis" />
			<argument index="0" name="to" type="Basis" />
			<argument index="1" name="weight" type="float" />
			<description>
				Предполагая, что матрица является правильной матрицей вращения, slerp выполняет сферолинейную интерполяцию с другой матрицей вращения.
			</description>
		</method>
		<method name="tdotx">
			<return type="float" />
			<argument index="0" name="with" type="Vector3" />
			<description>
				Транспонированное точечное произведение с осью X матрицы.
			</description>
		</method>
		<method name="tdoty">
			<return type="float" />
			<argument index="0" name="with" type="Vector3" />
			<description>
				Транспонированное точечное произведение с осью Y матрицы.
			</description>
		</method>
		<method name="tdotz">
			<return type="float" />
			<argument index="0" name="with" type="Vector3" />
			<description>
				Транспонированное точечное произведение с осью Z матрицы.
			</description>
		</method>
		<method name="transposed">
			<return type="Basis" />
			<description>
				Возвращает транспонированную версию матрицы
			</description>
		</method>
		<method name="xform">
			<return type="Vector3" />
			<argument index="0" name="v" type="Vector3" />
			<description>
				Возвращает вектор, преобразованный (умноженный) на матрицу.
			</description>
		</method>
		<method name="xform_inv">
			<return type="Vector3" />
			<argument index="0" name="v" type="Vector3" />
			<description>
				Возвращает вектор, преобразованный (умноженный) на транспонированную базисную матрицу.
				[b]Примечание:[/b] Это приводит к умножению на обратную матрицу только в том случае, если она представляет собой вращение-отражение.
			</description>
		</method>
	</methods>
	<members>
		<member name="x" type="Vector3" setter="" getter="" default="Vector3( 1, 0, 0 )">
			Вектор X базисной матрицы (столбец 0). Эквивалентен индексу массива [code]0[/code].
		</member>
		<member name="y" type="Vector3" setter="" getter="" default="Vector3( 0, 1, 0 )">
			Вектор Y базисной матрицы (столбец 1). Эквивалентен индексу массива [code]1[/code].
		</member>
		<member name="z" type="Vector3" setter="" getter="" default="Vector3( 0, 0, 1 )">
			Вектор Z базисной матрицы (столбец 2). Эквивалентен индексу массива [code]2[/code].
		</member>
	</members>
	<constants>
		<constant name="IDENTITY" value="Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )">
			Базис тождества, без применения вращения и масштабирования.
			Это идентично вызову [code]Basis()[/code] без каких-либо параметров. Эта константа может быть использована для повышения ясности кода, а также для согласованности с C#.
		</constant>
		<constant name="FLIP_X" value="Basis( -1, 0, 0, 0, 1, 0, 0, 0, 1 )">
			Основа, которая будет переворачивать что-либо по оси X при использовании в преобразовании.
		</constant>
		<constant name="FLIP_Y" value="Basis( 1, 0, 0, 0, -1, 0, 0, 0, 1 )">
			Основа, которая будет переворачивать что-либо по оси Y при использовании в преобразовании.
		</constant>
		<constant name="FLIP_Z" value="Basis( 1, 0, 0, 0, 1, 0, 0, 0, -1 )">
			Основа, которая будет переворачивать что-либо по оси Z при использовании в преобразовании.
		</constant>
	</constants>
</class>
