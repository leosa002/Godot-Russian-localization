<?xml version="1.0" encoding="UTF-8" ?>
<class name="AABB" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Граничная область с выравниванием по оси.
	</brief_description>
	<description>
		[AABB] состоит из позиции, размера и нескольких полезных функций. Обычно он используется для быстрых тестов на перекрытие.
		В нем используются координаты с плавающей точкой. Двумерным аналогом [AABB] является [Rect2].
		[b]Примечание:[/b] В отличие от [Rect2], в [AABB] нет варианта, использующего целочисленные координаты.
	</description>
	<tutorials>
		<link title="Math tutorial index">$DOCS_URL/tutorials/math/index.html</link>
		<link title="Vector math">$DOCS_URL/tutorials/math/vector_math.html</link>
		<link title="Advanced vector math">$DOCS_URL/tutorials/math/vectors_advanced.html</link>
	</tutorials>
	<methods>
		<method name="AABB">
			<return type="AABB" />
			<argument index="0" name="position" type="Vector3" />
			<argument index="1" name="size" type="Vector3" />
			<description>
				Конструирует [AABB] из позиции и размера.
			</description>
		</method>
		<method name="abs">
			<return type="AABB" />
			<description>
				Возвращает AABB с эквивалентной позицией и размером, модифицированный таким образом, что наиболее отрицательный угол является началом координат, а размер - положительным.
			</description>
		</method>
		<method name="encloses">
			<return type="bool" />
			<argument index="0" name="with" type="AABB" />
			<description>
				Возвращает [code]true[/code], если данный [AABB] полностью окружает другой.
			</description>
		</method>
		<method name="expand">
			<return type="AABB" />
			<argument index="0" name="to_point" type="Vector3" />
			<description>
				Возвращает копию данного [AABB], расширенную для включения заданной точки.
				[b]Пример:[/b]
				[codeblock]
				# position (-3, 2, 0), size (1, 1, 1)
				var box = AABB(Vector3(-3, 2, 0), Vector3(1, 1, 1))
				# position (-3, -1, 0), size (3, 4, 2), это подходит как к исходному AABB, так и к Vector3(0, -1, 2)
				var box2 = box.expand(Vector3(0, -1, 2))
				[/codeblock]
			</description>
		</method>
		<method name="get_area">
			<return type="float" />
			<description>
				Возвращает значение [AABB].
			</description>
		</method>
		<method name="get_center">
			<return type="Vector3" />
			<description>
				Возвращает центр [AABB], равный [member position] + ([member size] / 2).
			</description>
		</method>
		<method name="get_endpoint">
			<return type="Vector3" />
			<argument index="0" name="idx" type="int" />
			<description>
				Получает положение 8 конечных точек [AABB] в пространстве.
			</description>
		</method>
		<method name="get_longest_axis">
			<return type="Vector3" />
			<description>
				Возвращает нормализованную самую длинную ось [AABB].
			</description>
		</method>
		<method name="get_longest_axis_index">
			<return type="int" />
			<description>
				Возвращает индекс самой длинной оси [AABB] (в соответствии с константами [code]AXIS_*[/code] в [Vector3]).
			</description>
		</method>
		<method name="get_longest_axis_size">
			<return type="float" />
			<description>
				Возвращает скалярную длину самой длинной оси [AABB].
			</description>
		</method>
		<method name="get_shortest_axis">
			<return type="Vector3" />
			<description>
				Возвращает нормированную кратчайшую ось [AABB].
			</description>
		</method>
		<method name="get_shortest_axis_index">
			<return type="int" />
			<description>
				Возвращает индекс кратчайшей оси [AABB] (в соответствии с перечислением [Vector3]::AXIS*enum).
			</description>
		</method>
		<method name="get_shortest_axis_size">
			<return type="float" />
			<description>
				Возвращает скалярную длину кратчайшей оси отрезка [AABB].
			</description>
		</method>
		<method name="get_support">
			<return type="Vector3" />
			<argument index="0" name="dir" type="Vector3" />
			<description>
				Возвращает точку опоры в заданном направлении. Это полезно для алгоритмов обнаружения столкновений.
			</description>
		</method>
		<method name="grow">
			<return type="AABB" />
			<argument index="0" name="by" type="float" />
			<description>
				Возвращает копию [AABB], увеличенную на заданное количество единиц в сторону всех сторон.
			</description>
		</method>
		<method name="has_no_area">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если [AABB] плоский или пустой.
			</description>
		</method>
		<method name="has_no_surface">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если [AABB] пуст.
			</description>
		</method>
		<method name="has_point">
			<return type="bool" />
			<argument index="0" name="point" type="Vector3" />
			<description>
				Возвращает [code]true[/code], если [AABB] содержит точку.
			</description>
		</method>
		<method name="intersection">
			<return type="AABB" />
			<argument index="0" name="with" type="AABB" />
			<description>
				Возвращает пересечение двух [AABB]. В случае неудачи возвращается пустой AABB (size 0,0,0).
			</description>
		</method>
		<method name="intersects">
			<return type="bool" />
			<argument index="0" name="with" type="AABB" />
			<description>
				Возвращает [code]true[/code], если [AABB] пересекается с другим.
			</description>
		</method>
		<method name="intersects_plane">
			<return type="bool" />
			<argument index="0" name="plane" type="Plane" />
			<description>
				Возвращает [code]true[/code], если [AABB] находится по обе стороны от плоскости.
			</description>
		</method>
		<method name="intersects_segment">
			<return type="bool" />
			<argument index="0" name="from" type="Vector3" />
			<argument index="1" name="to" type="Vector3" />
			<description>
				Возвращает [code]true[/code], если [AABB] пересекает отрезок прямой между [code]from[/code] и [code]to[/code].
			</description>
		</method>
		<method name="is_equal_approx">
			<return type="bool" />
			<argument index="0" name="aabb" type="AABB" />
			<description>
				Возвращает [code]true[/code], если данный [AABB] и [code]aabb[/code] приблизительно равны, путем вызова [method @GDScript.is_equal_approx] для каждого компонента.
			</description>
		</method>
		<method name="merge">
			<return type="AABB" />
			<argument index="0" name="with" type="AABB" />
			<description>
				Возвращает больший [AABB], содержащий как данный [AABB], так и [code]with[/code].
			</description>
		</method>
	</methods>
	<members>
		<member name="end" type="Vector3" setter="" getter="" default="Vector3( 0, 0, 0 )">
			Конечный угол. Вычисляется как [code]position + size[/code]. Установка этого значения приводит к изменению размера.
		</member>
		<member name="position" type="Vector3" setter="" getter="" default="Vector3( 0, 0, 0 )">
			Начальный угол. Обычно имеет значения меньше, чем [member end].
		</member>
		<member name="size" type="Vector3" setter="" getter="" default="Vector3( 0, 0, 0 )">
			Размер от [member position] до [member end]. Как правило, все компоненты положительны.
			Если размер отрицательный, то для его исправления можно использовать [method abs].
		</member>
	</members>
	<constants>
	</constants>
</class>