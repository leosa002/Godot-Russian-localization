<?xml version="1.0" encoding="UTF-8" ?>
<class name="Object" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Базовый класс для всех не встроенных типов.
	</brief_description>
	<description>
		Каждый класс, не являющийся встроенным типом, наследуется от этого класса.
		Объекты можно создавать из скриптовых языков, используя [code]Object.new()[/code] в GDScript, [code]new Object[/code] в C# или узел "Construct Object" в VisualScript.
		Объекты не управляют памятью. Если класс наследуется от Object, вам придется удалять его экземпляры вручную. Для этого вызовите метод [method free] из вашего скрипта или удалите экземпляр из C++.
		Некоторые классы, расширяющие Object, добавляют управление памятью. Это относится к [Reference], который подсчитывает ссылки и автоматически удаляет себя, когда на него больше не ссылаются. [Node], еще один фундаментальный тип, удаляет все свои дочерние элементы при освобождении памяти.
		Объекты экспортируют свойства, которые в основном полезны для хранения и редактирования, но не так важны в программировании. Свойства экспортируются в [method _get_property_list] и обрабатываются в [method _get] и [method _set]. Однако скриптовые языки и C++ имеют более простые средства для их экспорта.
		Принадлежность к свойствам можно проверить непосредственно в GDScript с помощью [code]in[/code]:
		[codeblock]
		var n = Node2D.new()
		print("position" in n) # Печатает "True".
		print("other_property" in n) # Печатает "False".
		[/codeblock]
		Оператор [code]in[/code] будет оцениваться как [code]true[/code] до тех пор, пока существует ключ, даже если значение [code]null[/code].
		Объекты также получают уведомления. Уведомления - это простой способ оповестить объект о различных событиях, чтобы их можно было обработать все вместе. См. раздел [метод _notification].
		[b]Примечание:[/b] В отличие от ссылок на [Reference], ссылки на объект, хранящиеся в переменной, могут стать недействительными без предупреждения. Поэтому для классов данных рекомендуется использовать [Reference], а не [Object].
		[b]Примечание:[/b] Из-за ошибки вы не можете создать "простой" объект с помощью [code]Object.new()[/code]. Вместо этого используйте [code]ClassDB.instance("Object")[/code]. Эта ошибка относится только к самому Object, а не к его потомкам, таким как [Reference].
	</description>
	<tutorials>
		<link title="When and how to avoid using nodes for everything">$DOCS_URL/tutorials/best_practices/node_alternatives.html</link>
		<link title="Advanced exports using _get_property_list()">$DOCS_URL/tutorials/scripting/gdscript/gdscript_exports.html#advanced-exports</link>
	</tutorials>
	<methods>
		<method name="_get" qualifiers="virtual">
			<return type="Variant" />
			<argument index="0" name="property" type="String" />
			<description>
				Виртуальный метод, который можно переопределить, чтобы настроить возвращаемое значение [метода get].
				Возвращает заданное свойство. Возвращает [code]null[/code], если [code]свойство[/code] не существует.
			</description>
		</method>
		<method name="_get_property_list" qualifiers="virtual">
			<return type="Array" />
			<description>
				Виртуальный метод, который можно переопределить, чтобы настроить возвращаемое значение [метода get_property_list].
				Возвращает список свойств объекта в виде [Array] словарей.
				Каждый словарь [Dictionary] должен содержать как минимум [code]name: String[/code] и [code]type: int[/code] (см. [enum Variant.Type]) записей. Опционально он также может включать [code]hint: int[/code] (см. [enum PropertyHint]), [code]hint_string: String[/code], и [code]usage: int[/code] (см. [enum PropertyUsageFlags]).
			</description>
		</method>
		<method name="_init" qualifiers="virtual">
			<return type="void" />
			<description>
				Вызывается при инициализации объекта в памяти. Может быть определен, чтобы принимать параметры, которые передаются при конструировании.
				[b]Примечание:[/b] Если [метод _init] определен с требуемыми параметрами, то явное конструирование является единственным допустимым средством создания объекта класса. Если используется любой другой способ (например, [метод PackedScene.instance]), то инициализация будет неудачной.
			</description>
		</method>
		<method name="_notification" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="what" type="int" />
			<description>
				Вызывается всякий раз, когда объект получает уведомление, которое обозначается в [code]what[/code] константой. Базовый [Object] имеет две константы [constant NOTIFICATION_POSTINITIALIZE] и [constant NOTIFICATION_PREDELETE], но подклассы, такие как [Node], определяют гораздо больше уведомлений, которые также принимаются этим методом.
			</description>
		</method>
		<method name="_set" qualifiers="virtual">
			<return type="bool" />
			<argument index="0" name="property" type="String" />
			<argument index="1" name="value" type="Variant" />
			<description>
				Виртуальный метод, который можно переопределить, чтобы настроить возвращаемое значение [метода set].
				Устанавливает свойство. Возвращает [code]true[/code], если [code]свойство[/code] существует.
			</description>
		</method>
		<method name="_to_string" qualifiers="virtual">
			<return type="String" />
			<description>
				Виртуальный метод, который можно переопределить, чтобы настроить возвращаемое значение [метода to_string] и, таким образом, представление объекта, когда он преобразуется в строку, например, с помощью [code]print(obj)[/code].
				Возвращает [String], представляющий объект. Если не переопределено, по умолчанию возвращается [code]"[ClassName:RID]"[/code].
			</description>
		</method>
		<method name="add_user_signal">
			<return type="void" />
			<argument index="0" name="signal" type="String" />
			<argument index="1" name="arguments" type="Array" default="[  ]" />
			<description>
				Добавляет определяемый пользователем [code]сигнал[/code]. Аргументы необязательны, но могут быть добавлены в виде [массива] словарей, каждый из которых содержит записи [code]name: String[/code] и [code]type: int[/code] (см. [enum Variant.Type]).
			</description>
		</method>
		<method name="call" qualifiers="vararg">
			<return type="Variant" />
			<argument index="0" name="method" type="String" />
			<description>
				Вызывает [code]метод[/code] на объекте и возвращает результат. Этот метод поддерживает переменное количество аргументов, поэтому параметры передаются в виде списка, разделенного запятыми. Пример:
				[codeblock]
				call("set", "position", Vector2(42.0, 0.0))
				[/codeblock]
				[b]Примечание:[/b] В C# имя метода должно быть указано как snake_case, если он определен встроенным узлом Godot. Это не относится к пользовательским методам, где следует использовать то же соглашение, что и в исходном тексте C# (обычно PascalCase).
			</description>
		</method>
		<method name="call_deferred" qualifiers="vararg">
			<return type="void" />
			<argument index="0" name="method" type="String" />
			<description>
				Вызывает [code]метод[/code] объекта во время простоя. Этот метод поддерживает переменное количество аргументов, поэтому параметры передаются в виде списка, разделенного запятыми. Пример:
				[codeblock]
				call_deferred("set", "position", Vector2(42.0, 0.0))
				[/codeblock]
				[b]Примечание:[/b] В C# имя метода должно быть указано как snake_case, если он определен встроенным узлом Godot. Это не относится к пользовательским методам, где следует использовать то же соглашение, что и в исходном тексте C# (обычно PascalCase).
			</description>
		</method>
		<method name="callv">
			<return type="Variant" />
			<argument index="0" name="method" type="String" />
			<argument index="1" name="arg_array" type="Array" />
			<description>
				Вызывает [code]метод[/code] на объекте и возвращает результат. В отличие от [вызова метода], этот метод не поддерживает переменное количество аргументов, а ожидает, что все параметры будут через один [Array].
				[codeblock]
				callv("set", [ "position", Vector2(42.0, 0.0) ])
				[/codeblock]
			</description>
		</method>
		<method name="can_translate_messages" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если объект может переводить строки. Смотрите [метод set_message_translation] и [метод tr].
			</description>
		</method>
		<method name="connect">
			<return type="int" enum="Error" />
			<argument index="0" name="signal" type="String" />
			<argument index="1" name="target" type="Object" />
			<argument index="2" name="method" type="String" />
			<argument index="3" name="binds" type="Array" default="[  ]" />
			<argument index="4" name="flags" type="int" default="0" />
			<description>
				Подключает [code]сигнал[/code] к [code]методу[/code] на [code]целевом[/code] объекте. Передайте необязательные [code]привязки[/code] в вызов в виде [Array] параметров. Эти параметры будут переданы методу после любого параметра, используемого в вызове [method emit_signal]. Используйте [code]флаги[/code] для установки отложенных или одноразовых соединений. См. константы [enum ConnectFlags].
				Сигнал [code]signal[/code] может быть подключен к [code]методу[/code] только один раз. Если сигнал уже подключен, будет выведена ошибка, если только он не был подключен с помощью [константы CONNECT_REFERENCE_COUNTED]. Чтобы избежать этого, сначала используйте [метод is_connected] для проверки существующих соединений.
				Если [code]цель[/code] будет уничтожена в жизненном цикле игры, соединение будет потеряно.
				Примеры:
				[codeblock]
				connect("pressed", self, "_on_Button_pressed") # BaseButton signal
				connect("text_entered", self, "_on_LineEdit_text_entered") # LineEdit signal
				connect("hit", self, "_on_Player_hit", [ weapon_type, damage ]) # Определяемые пользователем signal
				[/codeblock]
				Пример связи между [code]привязками[/code], переданными в [method connect], и параметрами, используемыми при вызове [method emit_signal]:
				[codeblock]
				connect("hit", self, "_on_Player_hit", [ weapon_type, damage ]) # weapon_type и damage передаются последними
				emit_signal("hit", "Dark lord", 5) # "Dark lord" и 5 передаются первыми
				func _on_Player_hit(hit_by, level, weapon_type, damage):
				    print("Hit by %s (lvl %d) with weapon %s for %d damage" % [hit_by, level, weapon_type, damage])
				[/codeblock]
			</description>
		</method>
		<method name="disconnect">
			<return type="void" />
			<argument index="0" name="signal" type="String" />
			<argument index="1" name="target" type="Object" />
			<argument index="2" name="method" type="String" />
			<description>
				Отключает [code]сигнал[/code] от [code]метода[/code] на заданной [code]цели[/code].
				Если вы попытаетесь отключить несуществующее соединение, метод выведет ошибку. Используйте [method is_connected], чтобы убедиться, что соединение существует.
			</description>
		</method>
		<method name="emit_signal" qualifiers="vararg">
			<return type="void" />
			<argument index="0" name="signal" type="String" />
			<description>
				Выдает заданный [code]сигнал[/code]. Сигнал должен существовать, поэтому он должен быть встроенным сигналом этого класса или одного из его родительских классов, либо определенным пользователем. Этот метод поддерживает переменное количество аргументов, поэтому параметры передаются в виде списка, разделенного запятыми. Пример:
				[codeblock]
				emit_signal("hit", weapon_type, damage)
				emit_signal("game_over")
				[/codeblock]
			</description>
		</method>
		<method name="free">
			<return type="void" />
			<description>
				Немедленно удаляет объект из памяти. Для [Node]ов вы можете использовать [метод Node.queue_free], чтобы поставить узел в очередь на безопасное удаление в конце текущего кадра.
				[b]Важно:[/b] Если у вас есть переменная, указывающая на объект, она [i]не[/i] будет присвоена [code]null[/code] после освобождения объекта. Вместо этого она будет указывать на [i]ранее освобожденный экземпляр[/i], и вы должны подтвердить ее с помощью [метода @GDScript.is_instance_valid], прежде чем пытаться вызвать ее методы или получить доступ к ее свойствам.
			</description>
		</method>
		<method name="get" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="property" type="String" />
			<description>
				Возвращает значение [Variant] данного [code]свойства[/code]. Если [code]свойство[/code] не существует, возвращается [code]null[/code].
				[b]Примечание:[/b] В C# имя свойства должно быть указано как snake_case, если оно определено встроенным узлом Godot. Это не относится к пользовательским свойствам, где следует использовать то же соглашение, что и в исходном тексте C# (обычно PascalCase).
			</description>
		</method>
		<method name="get_class" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает класс объекта в виде [String]. См. также [метод is_class].
				[b]Примечание:[/b] [метод get_class] не учитывает объявления [code]class_name[/code]. Если у объекта определено [code]class_name[/code], вместо него будет возвращено имя базового класса.
			</description>
		</method>
		<method name="get_incoming_connections" qualifiers="const">
			<return type="Array" />
			<description>
				Возвращает [Array] словарей с информацией о сигналах, подключенных к объекту.
				Каждый [Dictionary] содержит три записи String:
				- [code]source[/code] - ссылка на излучатель сигнала.
				- [code]signal_name[/code] - имя подключенного сигнала.
				- [code]method_name[/code] - имя метода, к которому подключен сигнал.
			</description>
		</method>
		<method name="get_indexed" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="property" type="NodePath" />
			<description>
				Получает свойство объекта, проиндексированное по заданному [NodePath]. Путь узла должен быть относительным к текущему объекту и может использовать символ двоеточия ([code]:[/code]) для доступа к вложенным свойствам. Примеры: [code]"position:x"[/code] или [code]"material:next_pass:blend_mode"[/code].
				[b]Примечание:[/b] Несмотря на то, что метод принимает аргумент [NodePath], он не поддерживает фактические пути к [Node]ам в дереве сцены, только пути к вложенным свойствам, разделенные двоеточием. Для получения узлов вместо этого используйте [метод Node.get_node_and_resource].
			</description>
		</method>
		<method name="get_instance_id" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает уникальный идентификатор экземпляра объекта.
				Этот идентификатор можно сохранить в [EncodedObjectAsID] и использовать для извлечения экземпляра объекта с помощью [метода @GDScript.instance_from_id].
			</description>
		</method>
		<method name="get_meta" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="default" type="Variant" default="null" />
			<description>
				Возвращает запись метаданных объекта для заданного [code]name[/code].
				Выбрасывает ошибку, если запись не существует, если только [code]default[/code] не [code]null[/code] (в этом случае будет возвращено значение по умолчанию).
			</description>
		</method>
		<method name="get_meta_list" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Возвращает метаданные объекта в виде массива [PoolStringArray].
			</description>
		</method>
		<method name="get_method_list" qualifiers="const">
			<return type="Array" />
			<description>
				Возвращает методы объекта и их сигнатуры в виде [Array].
			</description>
		</method>
		<method name="get_property_list" qualifiers="const">
			<return type="Array" />
			<description>
				Возвращает список свойств объекта в виде [Array] словарей.
				Словарь каждого свойства содержит как минимум [code]name: String[/code] и [code]type: int[/code] (см. [enum Variant.Type]) записей. Опционально он также может включать [code]hint: int[/code] (см. [enum PropertyHint]), [code]hint_string: String[/code], и [code]usage: int[/code] (см. [enum PropertyUsageFlags]).
			</description>
		</method>
		<method name="get_script" qualifiers="const">
			<return type="Reference" />
			<description>
				Возвращает экземпляр [Script] объекта, или [code]null[/code], если он не назначен.
			</description>
		</method>
		<method name="get_signal_connection_list" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="signal" type="String" />
			<description>
				Возвращает [Array] соединений для заданного [code]сигнала[/code].
			</description>
		</method>
		<method name="get_signal_list" qualifiers="const">
			<return type="Array" />
			<description>
				Возвращает список сигналов в виде [Array] словарей.
			</description>
		</method>
		<method name="has_meta" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="name" type="String" />
			<description>
				Возвращает [code]true[/code], если найдена запись метаданных с заданным [code]именем[/code].
			</description>
		</method>
		<method name="has_method" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="method" type="String" />
			<description>
				Возвращает [code]true[/code], если объект содержит данный [code]метод[/code].
			</description>
		</method>
		<method name="has_signal" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="signal" type="String" />
			<description>
				Возвращает [code]true[/code], если данный [code]сигнал[/code] существует.
			</description>
		</method>
		<method name="has_user_signal" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="signal" type="String" />
			<description>
				Возвращает [code]true[/code], если данный пользовательский [code]сигнал[/code] существует. Учитываются только сигналы, добавленные с помощью [метода add_user_signal].
			</description>
		</method>
		<method name="is_blocking_signals" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если блокировка излучения сигнала включена.
			</description>
		</method>
		<method name="is_class" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="class" type="String" />
			<description>
				Возвращает [code]true[/code], если объект наследует от данного [code]класса[/code]. См. также [метод get_class].
				[b]Примечание:[/b] [метод is_class] не учитывает объявления [code]class_name[/code]. Если для объекта определено [code]имя_класса[/code], то [метод is_class] вернет [code]false[/code] для этого имени.
			</description>
		</method>
		<method name="is_connected" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="signal" type="String" />
			<argument index="1" name="target" type="Object" />
			<argument index="2" name="method" type="String" />
			<description>
				Возвращает [code]true[/code], если для заданного [code]сигнала[/code], [code]цели[/code] и [code]метода[/code] существует соединение.
			</description>
		</method>
		<method name="is_queued_for_deletion" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если для объекта был вызван метод [method Node.queue_free].
			</description>
		</method>
		<method name="notification">
			<return type="void" />
			<argument index="0" name="what" type="int" />
			<argument index="1" name="reversed" type="bool" default="false" />
			<description>
				Отправьте объекту заданное уведомление, которое также вызовет метод [method _notification] всех классов, от которых наследует объект.
				Если [code]reversed[/code] имеет значение [code]true[/code], [method _notification] вызывается сначала в собственном классе объекта, а затем в его последовательных родительских классах. Если [code]reversed[/code] равно [code]false[/code], то [метод _notification] вызывается сначала на самом старшем предке (самом [Object]), а затем до последующих наследующих классов.
			</description>
		</method>
		<method name="property_list_changed_notify">
			<return type="void" />
			<description>
				Уведомляет редактор об изменении списка свойств, чтобы плагины редактора могли принять во внимание новые значения. Ничего не делает при экспорте сборки.
			</description>
		</method>
		<method name="remove_meta">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<description>
				Удаляет заданную запись из метаданных объекта. См. также [метод set_meta].
			</description>
		</method>
		<method name="set">
			<return type="void" />
			<argument index="0" name="property" type="String" />
			<argument index="1" name="value" type="Variant" />
			<description>
				Присваивает новое значение заданному свойству. Если [code]свойство[/code] не существует или тип заданного значения не совпадает, ничего не произойдет.
				[b]Примечание:[/b] В C# имя свойства должно быть указано как snake_case, если оно определено встроенным узлом Godot. Это не относится к пользовательским свойствам, где следует использовать то же соглашение, что и в исходном тексте C# (обычно PascalCase).
			</description>
		</method>
		<method name="set_block_signals">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				Если установлено значение [code]true[/code], излучение сигнала блокируется.
			</description>
		</method>
		<method name="set_deferred">
			<return type="void" />
			<argument index="0" name="property" type="String" />
			<argument index="1" name="value" type="Variant" />
			<description>
				Присваивает новое значение заданному свойству после шага физики текущего кадра. Это эквивалентно вызову [метода set] через [метод call_deferred], т. е. [code]call_deferred("set", property, value)[/code].
				[b]Примечание:[/b] В C# имя свойства должно быть указано как snake_case, если оно определено встроенным узлом Godot. Это не относится к пользовательским свойствам, где следует использовать то же соглашение, что и в исходном тексте C# (обычно PascalCase).
			</description>
		</method>
		<method name="set_indexed">
			<return type="void" />
			<argument index="0" name="property" type="NodePath" />
			<argument index="1" name="value" type="Variant" />
			<description>
				Присваивает новое значение свойству, указанному в [NodePath]. Путь узла должен быть относительным к текущему объекту и может использовать символ двоеточия ([code]:[/code]) для доступа к вложенным свойствам. Пример:
				[codeblock]
				set_indexed("position", Vector2(42, 0))
				set_indexed("position:y", -10)
				print(position) # (42, -10)
				[/codeblock]
			</description>
		</method>
		<method name="set_message_translation">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				Определяет, может ли объект переводить строки (с помощью вызовов [метода tr]). По умолчанию включено.
			</description>
		</method>
		<method name="set_meta">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="value" type="Variant" />
			<description>
				Добавляет, изменяет или удаляет заданную запись в метаданных объекта. Метаданные сериализуются и могут принимать любое значение [Variant].
				Чтобы удалить заданную запись из метаданных объекта, используйте [метод remove_meta]. Метаданные также удаляются, если их значение установлено в [code]null[/code]. Это означает, что вы также можете использовать [code]set_meta("name", null)[/code] для удаления метаданных для [code]"name"[/code].
			</description>
		</method>
		<method name="set_script">
			<return type="void" />
			<argument index="0" name="script" type="Reference" />
			<description>
				Присваивает объекту скрипт. Каждому объекту может быть назначен один скрипт, который используется для расширения его функциональности.
				Если объект уже имел скрипт, предыдущий экземпляр скрипта будет освобожден, а его переменные и состояние будут потеряны. Будет вызван метод [method _init] нового скрипта.
			</description>
		</method>
		<method name="to_string">
			<return type="String" />
			<description>
				Возвращает [String], представляющий объект. Если не переопределено, по умолчанию возвращается [code]"[ClassName:RID]"[/code].
				Переопределите метод [method _to_string], чтобы настроить представление [String].
			</description>
		</method>
		<method name="tr" qualifiers="const">
			<return type="String" />
			<argument index="0" name="message" type="String" />
			<description>
				Переводит сообщение, используя каталоги переводов, настроенные в настройках проекта.
				Работает, только если перевод сообщения включен (по умолчанию), в противном случае возвращает [code]сообщение[/code] без изменений. Смотрите [метод set_message_translation].
			</description>
		</method>
	</methods>
	<signals>
		<signal name="script_changed">
			<description>
				Выдается при изменении сценария объекта.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_POSTINITIALIZE" value="0">
			Вызывается сразу после инициализации объекта. Недоступно в скрипте.
		</constant>
		<constant name="NOTIFICATION_PREDELETE" value="1">
			Вызывается перед тем, как объект будет удален.
		</constant>
		<constant name="CONNECT_DEFERRED" value="1" enum="ConnectFlags">
			Подключает сигнал в отложенном режиме. Таким образом, выбросы сигнала сохраняются в очереди, а затем устанавливаются на время простоя.
		</constant>
		<constant name="CONNECT_PERSIST" value="2" enum="ConnectFlags">
			Сохраняющиеся соединения сохраняются при сериализации объекта в файл.
		</constant>
		<constant name="CONNECT_ONESHOT" value="4" enum="ConnectFlags">
			Одноразовые соединения отключаются сами после эмиссии.
		</constant>
		<constant name="CONNECT_REFERENCE_COUNTED" value="8" enum="ConnectFlags">
			Подключите сигнал по ссылке. Это означает, что данный сигнал может быть подключен несколько раз к одной и той же цели и будет полностью отключен только после того, как не останется ссылок.
		</constant>
	</constants>
</class>
