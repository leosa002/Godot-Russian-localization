<?xml version="1.0" encoding="UTF-8" ?>
<class name="CanvasItem" inherits="Node" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Базовый класс всего 2D.
	</brief_description>
	<description>
		Базовый класс всего двумерного. Элементы Canvas располагаются в виде дерева; дочерние элементы наследуют и расширяют преобразования родительского элемента. [CanvasItem] расширяется на [Control] для всего, что связано с графическим интерфейсом, и на [Node2D] для всего, что связано с 2D-движком.
		Любой [CanvasItem] может рисовать. Для этого движок вызывает [method update], после чего в режиме простоя будет получена [constant NOTIFICATION_DRAW] для запроса перерисовки. Благодаря этому элементы холста не нужно перерисовывать на каждом кадре, что значительно повышает производительность. Для рисования на [CanvasItem] предусмотрено несколько функций (см. [code]functions draw_*[/code]). Однако их можно использовать только внутри [method _draw], соответствующего ему [method Object._notification] или методов, связанных с сигналом [signal draw].
		Элементы холста рисуются в порядке дерева. По умолчанию дочерние элементы располагаются поверх родительских, поэтому корневой [CanvasItem] будет рисоваться позади всех. Это поведение может быть изменено для каждого элемента.
		Элемент [CanvasItem] можно также скрыть, что приведет к скрытию его дочерних элементов. Он предоставляет множество способов изменения таких параметров, как модуляция (для себя и своих дочерних элементов) и самомодуляция (только для себя), а также режим наложения.
		Наконец, можно запросить уведомление о трансформации, которое сообщит узлу об изменении его глобальной позиции в случае изменения родительского дерева.
		[b]Примечание:[/b] Если не указано иное, то во всех методах, имеющих параметры угла, углы должны быть заданы в [i]радианах[/i]. Для преобразования градусов в радианы используйте [method @GDScript.deg2rad].
	</description>
	<tutorials>
		<link title="Viewport and canvas transforms">$DOCS_URL/tutorials/2d/2d_transforms.html</link>
		<link title="Custom drawing in 2D">$DOCS_URL/tutorials/2d/custom_drawing_in_2d.html</link>
		<link title="Audio Spectrum Demo">https://godotengine.org/asset-library/asset/528</link>
	</tutorials>
	<methods>
		<method name="_draw" qualifiers="virtual">
			<return type="void" />
			<description>
				Вызывается, когда [CanvasItem] был запрошен на перерисовку (при вызове [method update], вручную или движком).
				Соответствует [constant NOTIFICATION_DRAW] уведомления в [method Object._notification].
			</description>
		</method>
		<method name="draw_arc">
			<return type="void" />
			<argument index="0" name="center" type="Vector2" />
			<argument index="1" name="radius" type="float" />
			<argument index="2" name="start_angle" type="float" />
			<argument index="3" name="end_angle" type="float" />
			<argument index="4" name="point_count" type="int" />
			<argument index="5" name="color" type="Color" />
			<argument index="6" name="width" type="float" default="1.0" />
			<argument index="7" name="antialiased" type="bool" default="false" />
			<description>
				Рисует незаполненную дугу между заданными углами. Чем больше значение [code]point_count[/code], тем более плавной будет кривая. См. также [method draw_circle].
				[b]Примечание:[/b] Отрисовка линий не ускоряется за счет пакетной обработки, если [code]antialiased[/code] имеет значение [code]true[/code].
				[b]Примечание:[/b] Из-за особенностей работы встроенное сглаживание будет выглядеть некорректно для полупрозрачных линий и может не работать на некоторых платформах. В качестве обходного пути установите дополнение [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] и создайте узел AntialiasedRegularPolygon2D. Этот узел использует текстуру с пользовательскими mipmaps для выполнения сглаживания. 2D-пакет также по-прежнему поддерживается с этими сглаженными линиями.
			</description>
		</method>
		<method name="draw_char">
			<return type="float" />
			<argument index="0" name="font" type="Font" />
			<argument index="1" name="position" type="Vector2" />
			<argument index="2" name="char" type="String" />
			<argument index="3" name="next" type="String" />
			<argument index="4" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<description>
				Рисует строковый символ с использованием пользовательского шрифта. Возвращает опережение, зависящее от ширины и кернинга символа, с необязательным следующим символом.
			</description>
		</method>
		<method name="draw_circle">
			<return type="void" />
			<argument index="0" name="position" type="Vector2" />
			<argument index="1" name="radius" type="float" />
			<argument index="2" name="color" type="Color" />
			<description>
				Рисует цветную залитую окружность. См. также [method draw_arc], [method draw_polyline] и [method draw_polygon].
				[b]Примечание:[/b] Встроенное сглаживание для [method draw_circle] не предусмотрено. В качестве обходного пути установите дополнение [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] и создайте узел AntialiasedRegularPolygon2D. Этот узел использует текстуру с пользовательскими mipmaps для сглаживания.
			</description>
		</method>
		<method name="draw_colored_polygon">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="color" type="Color" />
			<argument index="2" name="uvs" type="PoolVector2Array" default="PoolVector2Array(  )" />
			<argument index="3" name="texture" type="Texture" default="null" />
			<argument index="4" name="normal_map" type="Texture" default="null" />
			<argument index="5" name="antialiased" type="bool" default="false" />
			<description>
				Рисует цветной многоугольник из произвольного количества точек, выпуклый или вогнутый. В отличие от [method draw_polygon], для всего многоугольника должен быть указан один цвет.
				[b]Примечание:[/b] Из-за особенностей работы встроенное сглаживание будет выглядеть некорректно для полупрозрачных полигонов и может не работать на некоторых платформах. В качестве обходного пути установите дополнение [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] и создайте узел AntialiasedPolygon2D. Этот узел использует текстуру с пользовательскими mipmaps для сглаживания.
			</description>
		</method>
		<method name="draw_line">
			<return type="void" />
			<argument index="0" name="from" type="Vector2" />
			<argument index="1" name="to" type="Vector2" />
			<argument index="2" name="color" type="Color" />
			<argument index="3" name="width" type="float" default="1.0" />
			<argument index="4" name="antialiased" type="bool" default="false" />
			<description>
				Рисует линию от двумерной точки к другой с заданным цветом и шириной. По желанию может быть сглажена. См. также [method draw_multiline] и [method draw_polyline].
				[b]Примечание:[/b] Рисование линий не ускоряется пакетной обработкой, если [code]antialiased[/code] имеет значение [code]true[/code].
				[b]Примечание:[/b] Из-за особенностей работы встроенное сглаживание будет выглядеть некорректно для полупрозрачных линий и может не работать на некоторых платформах. В качестве обходного пути установите дополнение [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] и создайте узел AntialiasedLine2D. Этот узел использует текстуру с пользовательскими mipmaps для выполнения сглаживания. 2D-пакет также по-прежнему поддерживается с этими сглаженными линиями.
			</description>
		</method>
		<method name="draw_mesh">
			<return type="void" />
			<argument index="0" name="mesh" type="Mesh" />
			<argument index="1" name="texture" type="Texture" />
			<argument index="2" name="normal_map" type="Texture" default="null" />
			<argument index="3" name="transform" type="Transform2D" default="Transform2D( 1, 0, 0, 1, 0, 0 )" />
			<argument index="4" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<description>
				Рисует [Mesh] в 2D, используя предоставленную текстуру. Соответствующая документация приведена в разделе [MeshInstance2D].
			</description>
		</method>
		<method name="draw_multiline">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="color" type="Color" />
			<argument index="2" name="width" type="float" default="1.0" />
			<argument index="3" name="antialiased" type="bool" default="false" />
			<description>
				Рисует несколько несвязных линий с единым [code]color[/code]. При рисовании большого количества линий это быстрее, чем использование отдельных вызовов [method draw_line]. Для рисования взаимосвязанных линий вместо этого используйте [method draw_polyline].
				[b]Примечание:[/b] [code]width[/code] и [code]antialiased[/code] в настоящее время не реализованы и не оказывают никакого влияния. В качестве обходного пути установите дополнение [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] и создайте узел AntialiasedLine2D. Этот узел использует текстуру с пользовательскими mipmaps для выполнения сглаживания. 2D-пакеты также поддерживаются с этими сглаженными линиями.
			</description>
		</method>
		<method name="draw_multiline_colors">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="colors" type="PoolColorArray" />
			<argument index="2" name="width" type="float" default="1.0" />
			<argument index="3" name="antialiased" type="bool" default="false" />
			<description>
				Рисует множество несвязных линий с равномерной [code]width[/code] и раскраской по сегментам. Цвета, назначенные сегментам линии, совпадают по индексу между [code]points[/code] и [code]colors[/code]. При рисовании большого количества линий это быстрее, чем использование отдельных вызовов [method draw_line]. Для рисования взаимосвязанных линий вместо этого используйте [method draw_polyline_colors].
				[b]Примечание:[/b] [code]width[/code] и [code]antialiased[/code] в настоящее время не реализованы и не оказывают никакого влияния. В качестве обходного пути установите дополнение [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] и создайте узел AntialiasedLine2D. Этот узел использует текстуру с пользовательскими mipmaps для сглаживания. 2D-пакет также по-прежнему поддерживается с этими сглаженными линиями.
			</description>
		</method>
		<method name="draw_multimesh">
			<return type="void" />
			<argument index="0" name="multimesh" type="MultiMesh" />
			<argument index="1" name="texture" type="Texture" />
			<argument index="2" name="normal_map" type="Texture" default="null" />
			<description>
				Рисует [MultiMesh] в 2D с предоставленной текстурой. Соответствующая документация приведена в разделе [MultiMeshInstance2D].
			</description>
		</method>
		<method name="draw_polygon">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="colors" type="PoolColorArray" />
			<argument index="2" name="uvs" type="PoolVector2Array" default="PoolVector2Array(  )" />
			<argument index="3" name="texture" type="Texture" default="null" />
			<argument index="4" name="normal_map" type="Texture" default="null" />
			<argument index="5" name="antialiased" type="bool" default="false" />
			<description>
				Рисует сплошной многоугольник из произвольного количества точек, выпуклый или вогнутый. В отличие от [method draw_colored_polygon], цвет каждой точки может быть изменен индивидуально. См. также [method draw_polyline] и [method draw_polyline_colors].
				[b]Примечание:[/b] Из-за особенностей работы встроенное сглаживание будет выглядеть некорректно для полупрозрачных полигонов и может не работать на некоторых платформах. В качестве обходного пути установите дополнение [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] и создайте узел AntialiasedPolygon2D. Этот узел использует текстуру с пользовательскими mipmaps для сглаживания.
			</description>
		</method>
		<method name="draw_polyline">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="color" type="Color" />
			<argument index="2" name="width" type="float" default="1.0" />
			<argument index="3" name="antialiased" type="bool" default="false" />
			<description>
				Рисует взаимосвязанные сегменты линий с единым [code]color[/code] и [code]width[/code] и дополнительным сглаживанием. При рисовании большого количества линий это быстрее, чем использование отдельных вызовов [method draw_line]. Для рисования несвязных линий вместо этого используйте [method draw_multiline]. См. также [method draw_polygon].
				[b]Примечание:[/b] Из-за особенностей работы встроенное сглаживание будет выглядеть некорректно для полупрозрачных полигонов и может не работать на некоторых платформах. В качестве обходного пути установите дополнение [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] и создайте узел AntialiasedPolygon2D. Этот узел использует текстуру с пользовательскими mipmaps для сглаживания.
			</description>
		</method>
		<method name="draw_polyline_colors">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="colors" type="PoolColorArray" />
			<argument index="2" name="width" type="float" default="1.0" />
			<argument index="3" name="antialiased" type="bool" default="false" />
			<description>
				Рисует взаимосвязанные сегменты линий с равномерной [code]width[/code] и сегментной раскраской, а также с дополнительным сглаживанием. Цвета, назначенные сегментам линий, совпадают по индексу между [code]points[/code] и [code]colors[/code]. При рисовании большого количества линий это быстрее, чем использование отдельных вызовов [method draw_line]. Для рисования несвязных линий вместо этого используйте [method draw_multiline_colors]. См. также [method draw_polygon].
				[b]Примечание:[/b] Из-за особенностей работы встроенное сглаживание будет выглядеть некорректно для полупрозрачных полигонов и может не работать на некоторых платформах. В качестве обходного пути установите дополнение [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] и создайте узел AntialiasedPolygon2D. Этот узел использует текстуру с пользовательскими mipmaps для сглаживания.
			</description>
		</method>
		<method name="draw_primitive">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="colors" type="PoolColorArray" />
			<argument index="2" name="uvs" type="PoolVector2Array" />
			<argument index="3" name="texture" type="Texture" default="null" />
			<argument index="4" name="width" type="float" default="1.0" />
			<argument index="5" name="normal_map" type="Texture" default="null" />
			<description>
				Строит пользовательский примитив. 1 точка - точка, 2 точки - линия, 3 точки - треугольник, 4 точки - четырехугольник. Если указано 0 точек или более 4 точек, то ничего не будет нарисовано и будет выведено сообщение об ошибке. См. также [method draw_line], [method draw_polyline], [method draw_polygon] и [method draw_rect].
			</description>
		</method>
		<method name="draw_rect">
			<return type="void" />
			<argument index="0" name="rect" type="Rect2" />
			<argument index="1" name="color" type="Color" />
			<argument index="2" name="filled" type="bool" default="true" />
			<argument index="3" name="width" type="float" default="1.0" />
			<argument index="4" name="antialiased" type="bool" default="false" />
			<description>
				Рисует прямоугольник. Если [code]filled[/code] - [code]true[/code], то прямоугольник будет залит указанным [code]color[/code]. Если [code]filled[/code] - [code]false[/code], то прямоугольник будет нарисован в виде штриха с заданными [code]color[/code] и [code]width[/code]. Если [code]antialiased[/code] имеет значение [code]true[/code], то линии будут пытаться выполнить сглаживание с помощью сглаживания линий OpenGL.
				[b]Примечание:[/b] [code]width[/code] и [code]antialiased[/code] действуют только в том случае, если [code]filled[/code] равно [code]false[/code].
				[b]Примечание:[/b] Из-за особенностей работы встроенное сглаживание будет выглядеть некорректно для полупрозрачных полигонов и может не работать на некоторых платформах. В качестве обходного пути установите дополнение [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] и создайте узел AntialiasedPolygon2D. Этот узел использует текстуру с пользовательскими mipmaps для сглаживания.
			</description>
		</method>
		<method name="draw_set_transform">
			<return type="void" />
			<argument index="0" name="position" type="Vector2" />
			<argument index="1" name="rotation" type="float" />
			<argument index="2" name="scale" type="Vector2" />
			<description>
				Устанавливает пользовательское преобразование для отрисовки через компоненты. Все, что будет нарисовано после этого, будет преобразовано с помощью этого преобразования.
			</description>
		</method>
		<method name="draw_set_transform_matrix">
			<return type="void" />
			<argument index="0" name="xform" type="Transform2D" />
			<description>
				Устанавливает пользовательское преобразование для рисования через матрицу. Все, что будет нарисовано после этого, будет преобразовано с помощью этого преобразования.
			</description>
		</method>
		<method name="draw_string">
			<return type="void" />
			<argument index="0" name="font" type="Font" />
			<argument index="1" name="position" type="Vector2" />
			<argument index="2" name="text" type="String" />
			<argument index="3" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="4" name="clip_w" type="int" default="-1" />
			<description>
				Рисует [code]text[/code] указанным [code]font[/code] в [code]position[/code] (левый нижний угол с использованием базовой линии шрифта). Цвет текста будет умножен на [code]modulate[/code]. Если [code]clip_w[/code] больше или равно 0, то текст будет обрезан, если он превышает указанную ширину.
				[b]Пример с использованием проектного шрифта по умолчанию:[/b]
				[codeblock]
				# При использовании этого метода в скрипте, который постоянно перерисовывает текст, переместите значение
				# объявление `default_font` в переменную-член, назначаемую в `_ready()`
				# чтобы Control создавался только один раз.
				var default_font = Control.new().get_font("font")
				draw_string(default_font, Vector2(64, 64), "Привет мир")
				[/codeblock]
				См. также [method Font.draw].
			</description>
		</method>
		<method name="draw_style_box">
			<return type="void" />
			<argument index="0" name="style_box" type="StyleBox" />
			<argument index="1" name="rect" type="Rect2" />
			<description>
				Draws a styled rectangle.
			</description>
		</method>
		<method name="draw_texture">
			<return type="void" />
			<argument index="0" name="texture" type="Texture" />
			<argument index="1" name="position" type="Vector2" />
			<argument index="2" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="3" name="normal_map" type="Texture" default="null" />
			<description>
				Рисует текстуру в заданной позиции.
			</description>
		</method>
		<method name="draw_texture_rect">
			<return type="void" />
			<argument index="0" name="texture" type="Texture" />
			<argument index="1" name="rect" type="Rect2" />
			<argument index="2" name="tile" type="bool" />
			<argument index="3" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="4" name="transpose" type="bool" default="false" />
			<argument index="5" name="normal_map" type="Texture" default="null" />
			<description>
				Рисует прямоугольник с текстурой в заданной позиции, опционально модулированный цветом. Если [code]transpose[/code] имеет значение [code]true[/code], то координаты X и Y текстуры поменяются местами.
			</description>
		</method>
		<method name="draw_texture_rect_region">
			<return type="void" />
			<argument index="0" name="texture" type="Texture" />
			<argument index="1" name="rect" type="Rect2" />
			<argument index="2" name="src_rect" type="Rect2" />
			<argument index="3" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="4" name="transpose" type="bool" default="false" />
			<argument index="5" name="normal_map" type="Texture" default="null" />
			<argument index="6" name="clip_uv" type="bool" default="true" />
			<description>
				Рисует текстурированную прямоугольную область в заданной позиции, опционально модулированную цветом. Если [code]transpose[/code] имеет значение [code]true[/code], то координаты X и Y текстуры поменяются местами.
			</description>
		</method>
		<method name="force_update_transform">
			<return type="void" />
			<description>
				Принудительно обновляет трансформацию. По соображениям производительности изменения трансформации в физике не происходят мгновенно. Трансформации накапливаются, а затем устанавливаются. Используйте этот параметр, если при выполнении операций с физикой необходимо иметь актуальную трансформацию.
			</description>
		</method>
		<method name="get_canvas" qualifiers="const">
			<return type="RID" />
			<description>
				Возвращает [RID] холста [World2D], в котором находится данный элемент.
			</description>
		</method>
		<method name="get_canvas_item" qualifiers="const">
			<return type="RID" />
			<description>
				Возвращает RID элемента холста, используемый [VisualServer] для данного элемента.
			</description>
		</method>
		<method name="get_canvas_transform" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Возвращает преобразование из системы координат холста, в котором находится данный элемент, в систему координат [Viewport].
			</description>
		</method>
		<method name="get_global_mouse_position" qualifiers="const">
			<return type="Vector2" />
			<description>
				Возвращает положение мыши в [CanvasLayer], в котором находится данный [CanvasItem], используя систему координат [CanvasLayer].
			</description>
		</method>
		<method name="get_global_transform" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Возвращает матрицу глобального преобразования данного элемента.
			</description>
		</method>
		<method name="get_global_transform_with_canvas" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Возвращает преобразование из локальной системы координат данного [CanvasItem] в систему координат [Viewport].
			</description>
		</method>
		<method name="get_local_mouse_position" qualifiers="const">
			<return type="Vector2" />
			<description>
				Возвращает положение мыши в данном [CanvasItem], используя локальную систему координат данного [CanvasItem].
			</description>
		</method>
		<method name="get_transform" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Возвращает матрицу преобразования данного элемента.
			</description>
		</method>
		<method name="get_viewport_rect" qualifiers="const">
			<return type="Rect2" />
			<description>
				Возвращает границы видового экрана в виде [Rect2].
			</description>
		</method>
		<method name="get_viewport_transform" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Возвращает преобразование из системы координат холста, в котором находится данный элемент, в систему координат [Viewport]-вложенных элементов.
			</description>
		</method>
		<method name="get_world_2d" qualifiers="const">
			<return type="World2D" />
			<description>
				Возвращает [World2D], в котором находится данный элемент.
			</description>
		</method>
		<method name="hide">
			<return type="void" />
			<description>
				Скрыть [CanvasItem], если он в данный момент виден. Это эквивалентно установке [member visible] в [code]false[/code].
			</description>
		</method>
		<method name="is_local_transform_notification_enabled" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если локальные уведомления о преобразованиях передаются дочерним элементам.
			</description>
		</method>
		<method name="is_set_as_toplevel" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если узел установлен как верхнеуровневый. Смотрите [method set_as_toplevel].
			</description>
		</method>
		<method name="is_transform_notification_enabled" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если дочерним элементам передаются уведомления о глобальных преобразованиях.
			</description>
		</method>
		<method name="is_visible_in_tree" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если узел присутствует в [SceneTree], его свойство [member visible] равно [code]true[/code] и все его предки также видны. Если какой-либо предок скрыт, то этот узел не будет виден в дереве сцены и, соответственно, не будет отрисован (см. [method _draw]).
			</description>
		</method>
		<method name="make_canvas_position_local" qualifiers="const">
			<return type="Vector2" />
			<argument index="0" name="screen_point" type="Vector2" />
			<description>
				Назначает [code]screen_point[/code] в качестве нового локального преобразования этого узла.
			</description>
		</method>
		<method name="make_input_local" qualifiers="const">
			<return type="InputEvent" />
			<argument index="0" name="event" type="InputEvent" />
			<description>
				Преобразования, выдаваемые на входы [code]event[/code], применяются не в глобальном, а в локальном пространстве.
			</description>
		</method>
		<method name="set_as_toplevel">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				Если [code]enable[/code] имеет значение [code]true[/code], то данный элемент [CanvasItem] не будет наследовать свои трансформации от родительских элементов [CanvasItem]. Порядок отрисовки также будет изменен таким образом, что он будет отрисовываться поверх других [CanvasItem], которые не установлены как верхнеуровневые. При этом [CanvasItem] будет вести себя так, как если бы он был помещен в качестве дочернего элемента в пустой [Node]. См. также [method is_set_as_toplevel].
			</description>
		</method>
		<method name="set_notify_local_transform">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				Если [code]enable[/code] имеет значение [code]true[/code], то этот узел будет получать [constant NOTIFICATION_LOCAL_TRANSFORM_CHANGED] при изменении его локальной трансформации.
			</description>
		</method>
		<method name="set_notify_transform">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				Если [code]enable[/code] имеет значение [code]true[/code], то этот узел будет получать [constant NOTIFICATION_TRANSFORM_CHANGED] при изменении его глобальной трансформации.
			</description>
		</method>
		<method name="show">
			<return type="void" />
			<description>
				Показать [CanvasItem], если в данный момент он скрыт. Это эквивалентно установке [member visible] в [code]true[/code]. Для элементов управления, наследующих [Popup], правильным способом сделать их видимыми является вызов одной из нескольких функций [code]popup*()[/code].
			</description>
		</method>
		<method name="update">
			<return type="void" />
			<description>
				Ставит [CanvasItem] в очередь на перерисовку. Во время простоя, если [CanvasItem] виден, посылается [constant NOTIFICATION_DRAW] и вызывается [method _draw]. Это происходит только [b]один раз[/b] за кадр, даже если этот метод был вызван несколько раз.
			</description>
		</method>
	</methods>
	<members>
		<member name="light_mask" type="int" setter="set_light_mask" getter="get_light_mask" default="1">
			Слои рендеринга, в которых данный [CanvasItem] реагирует на узлы [Light2D].
		</member>
		<member name="material" type="Material" setter="set_material" getter="get_material">
			Материал, применяемый к текстурам на данном [CanvasItem].
		</member>
		<member name="modulate" type="Color" setter="set_modulate" getter="get_modulate" default="Color( 1, 1, 1, 1 )">
			Цвет, применяемый к текстурам на данном [CanvasItem].
		</member>
		<member name="self_modulate" type="Color" setter="set_self_modulate" getter="get_self_modulate" default="Color( 1, 1, 1, 1 )">
			Цвет, применяемый к текстурам данного [CanvasItem]. Этот цвет не наследуется дочерними [CanvasItem].
		</member>
		<member name="show_behind_parent" type="bool" setter="set_draw_behind_parent" getter="is_draw_behind_parent_enabled" default="false">
			Если [code]true[/code], то объект рисуется позади своего родителя.
		</member>
		<member name="show_on_top" type="bool" setter="_set_on_top" getter="_is_on_top">
			Если [code]true[/code], то объект рисуется поверх своего родителя.
		</member>
		<member name="use_parent_material" type="bool" setter="set_use_parent_material" getter="get_use_parent_material" default="false">
			Если [code]true[/code], то свойство [member material] родительского [CanvasItem] используется в качестве материала этого элемента.
		</member>
		<member name="visible" type="bool" setter="set_visible" getter="is_visible" default="true">
			Если [code]true[/code], то данный [CanvasItem] будет нарисован. Узел является видимым только в том случае, если все его предки также видимы (другими словами, [method is_visible_in_tree] должен возвращать [code]true[/code]).
			[b]Примечание:[/b] Для элементов управления, наследующих [Popup], правильным способом сделать их видимыми является вызов одной из нескольких функций [code]popup*()[/code].
		</member>
	</members>
	<signals>
		<signal name="draw">
			<description>
				Выдается, когда [CanvasItem] должен перерисоваться, [i]после[/i] связанного [constant NOTIFICATION_DRAW] уведомления и [i]перед[/i] вызовом [method _draw].
				[b]Примечание:[/b] Отложенные соединения не позволяют выполнять перерисовку через методы [code]draw_*[/code].
			</description>
		</signal>
		<signal name="hide">
			<description>
				Выдается, когда становится скрытым.
			</description>
		</signal>
		<signal name="item_rect_changed">
			<description>
				Выдается, когда границы [Rect2] элемента (положение или размер) изменились, или когда происходит действие, которое может повлиять на эти границы (например, изменение [member Sprite.texture]).
			</description>
		</signal>
		<signal name="visibility_changed">
			<description>
				Выдается при изменении видимости (скрытая/видимая).
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="BLEND_MODE_MIX" value="0" enum="BlendMode">
			Режим смешивания Mix. Предполагается, что цвета не зависят от значения альфа (непрозрачности).
		</constant>
		<constant name="BLEND_MODE_ADD" value="1" enum="BlendMode">
			Режим аддитивного смешивания.
		</constant>
		<constant name="BLEND_MODE_SUB" value="2" enum="BlendMode">
			Режим вычитающего смешивания.
		</constant>
		<constant name="BLEND_MODE_MUL" value="3" enum="BlendMode">
			Режим мультипликативного смешивания.
		</constant>
		<constant name="BLEND_MODE_PREMULT_ALPHA" value="4" enum="BlendMode">
			Режим смешивания Mix. Предполагается, что цвета предварительно умножаются на значение альфа (непрозрачности).
		</constant>
		<constant name="BLEND_MODE_DISABLED" value="5" enum="BlendMode">
			Отключает режим смешивания. Цвета, включая альфа, записываются как есть. Применяется только для объектов рендеринга с прозрачным фоном. Освещение применяться не будет.
		</constant>
		<constant name="NOTIFICATION_TRANSFORM_CHANGED" value="2000">
			Глобальная трансформация [CanvasItem] изменилась. Данное уведомление принимается только в том случае, если оно включено с помощью [method set_notify_transform].
		</constant>
		<constant name="NOTIFICATION_LOCAL_TRANSFORM_CHANGED" value="35">
			Локальная трансформация [CanvasItem] изменилась. Данное уведомление принимается только в том случае, если оно включено с помощью [method set_notify_local_transform].
		</constant>
		<constant name="NOTIFICATION_DRAW" value="30">
			Запрашивается рисование [CanvasItem] (см. [method _draw]).
		</constant>
		<constant name="NOTIFICATION_VISIBILITY_CHANGED" value="31">
			Видимость [CanvasItem] была изменена.
		</constant>
		<constant name="NOTIFICATION_ENTER_CANVAS" value="32">
			Элемент [CanvasItem] вошел в холст.
		</constant>
		<constant name="NOTIFICATION_EXIT_CANVAS" value="33">
			Элемент [CanvasItem] покинул холст.
		</constant>
	</constants>
</class>
