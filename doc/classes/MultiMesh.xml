<?xml version="1.0" encoding="UTF-8" ?>
<class name="MultiMesh" inherits="Resource" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Обеспечивает высокопроизводительную инстанцирование сетки.
	</brief_description>
	<description>
		MultiMesh обеспечивает низкоуровневое инстансирование сетки. Отрисовка тысяч узлов [MeshInstance] может быть медленной, поскольку каждый объект передается на GPU, а затем отрисовывается по отдельности.
		MultiMesh работает гораздо быстрее, поскольку может отрисовывать тысячи экземпляров одним вызовом рисования, что приводит к меньшим накладным расходам API.
		Как недостаток, если экземпляры находятся слишком далеко друг от друга, производительность может снизиться, поскольку каждый отдельный экземпляр всегда будет отрисовываться (они пространственно индексируются как один, для всего объекта).
		Поскольку экземпляры могут иметь любое поведение, AABB, используемый для видимости, должен быть предоставлен пользователем.
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/performance/vertex_animation/animating_thousands_of_fish.html</link>
		<link>$DOCS_URL/tutorials/performance/using_multimesh.html</link>
	</tutorials>
	<methods>
		<method name="get_aabb" qualifiers="const">
			<return type="AABB" />
			<description>
				Возвращает выровненную по оси видимости ограничительную рамку в локальном пространстве. См. также [метод VisualInstance.get_transformed_aabb].
			</description>
		</method>
		<method name="get_instance_color" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="instance" type="int" />
			<description>
				Получает цвет определенного экземпляра.
			</description>
		</method>
		<method name="get_instance_custom_data" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="instance" type="int" />
			<description>
				Возвращает пользовательские данные, установленные для конкретного экземпляра.
			</description>
		</method>
		<method name="get_instance_transform" qualifiers="const">
			<return type="Transform" />
			<argument index="0" name="instance" type="int" />
			<description>
				Возвращает [Transform] конкретного экземпляра.
			</description>
		</method>
		<method name="get_instance_transform_2d" qualifiers="const">
			<return type="Transform2D" />
			<argument index="0" name="instance" type="int" />
			<description>
				Возвращает [Transform2D] конкретного экземпляра.
			</description>
		</method>
		<method name="reset_instance_physics_interpolation">
			<return type="void" />
			<argument index="0" name="instance" type="int" />
			<description>
				При использовании [i]интерполяции физики[/i] эта функция позволяет запретить интерполяцию для экземпляра в текущем тике физики.
				Это позволяет перемещать экземпляры мгновенно и обычно используется при первоначальном размещении экземпляра, например пули, для предотвращения графических глюков.
			</description>
		</method>
		<method name="set_as_bulk_array">
			<return type="void" />
			<argument index="0" name="array" type="PoolRealArray" />
			<description>
				Устанавливает все данные, относящиеся к экземплярам, за один раз. Это особенно полезно при загрузке данных с диска или подготовке данных из GDNative.
				Все данные упаковываются в один большой массив с плавающей точкой. Массив может выглядеть следующим образом: Трансформация для экземпляра 1, данные о цвете для экземпляра 1, пользовательские данные для экземпляра 1, трансформация для экземпляра 2, данные о цвете для экземпляра 2 и т. д...
				[Transform] хранится как 12 float, [Transform2D] хранится как 8 float, [code]COLOR_8BIT[/code] / [code]CUSTOM_DATA_8BIT[/code] хранится как 1 float (4 байта как есть) и [code]COLOR_FLOAT[/code] / [code]CUSTOM_DATA_FLOAT[/code] хранится как 4 float.
			</description>
		</method>
		<method name="set_as_bulk_array_interpolated">
			<return type="void" />
			<argument index="0" name="array_current" type="PoolRealArray" />
			<argument index="1" name="array_previous" type="PoolRealArray" />
			<description>
				Альтернативная версия [метода MultiMesh.set_as_bulk_array], которая может быть использована с [i]физической интерполяцией[/i]. Этот метод принимает два массива и может установить данные для текущего и предыдущего тика за один раз. Рендерер будет автоматически интерполировать данные в каждом кадре.
				Это полезно в ситуациях, когда порядок следования объектов может меняться от тика к тику физики, например в системах частиц.
				Если порядок экземпляров неизменен, можно использовать более простой [метод MultiMesh.set_as_bulk_array] с интерполяцией.
			</description>
		</method>
		<method name="set_instance_color">
			<return type="void" />
			<argument index="0" name="instance" type="int" />
			<argument index="1" name="color" type="Color" />
			<description>
				Устанавливает цвет конкретного экземпляра путем [i]умножения[/i] существующих цветов вершин сетки.
				Чтобы цвет вступил в силу, убедитесь, что [member color_format] не является [code]null[/code] на [MultiMesh] и [member SpatialMaterial.vertex_color_use_as_albedo] является [code]true[/code] на материале. Если цвет не соответствует ожидаемому, убедитесь, что цвет альбедо материала установлен на чисто белый ([code]Color(1, 1, 1)[/code]).
			</description>
		</method>
		<method name="set_instance_custom_data">
			<return type="void" />
			<argument index="0" name="instance" type="int" />
			<argument index="1" name="custom_data" type="Color" />
			<description>
				Устанавливает пользовательские данные для конкретного экземпляра. Хотя используется [Color], это просто контейнер для 4 чисел с плавающей точкой. Формат числа может меняться в зависимости от используемого [enum CustomDataFormat].
			</description>
		</method>
		<method name="set_instance_transform">
			<return type="void" />
			<argument index="0" name="instance" type="int" />
			<argument index="1" name="transform" type="Transform" />
			<description>
				Устанавливает [Transform] для конкретного экземпляра.
			</description>
		</method>
		<method name="set_instance_transform_2d">
			<return type="void" />
			<argument index="0" name="instance" type="int" />
			<argument index="1" name="transform" type="Transform2D" />
			<description>
				Устанавливает [Transform2D] для конкретного экземпляра.
			</description>
		</method>
	</methods>
	<members>
		<member name="color_format" type="int" setter="set_color_format" getter="get_color_format" enum="MultiMesh.ColorFormat" default="0">
			Формат цветов в массиве цветов, который передается в шейдер.
		</member>
		<member name="custom_data_format" type="int" setter="set_custom_data_format" getter="get_custom_data_format" enum="MultiMesh.CustomDataFormat" default="0">
			Формат пользовательских данных в массиве пользовательских данных, который передается в шейдер.
		</member>
		<member name="instance_count" type="int" setter="set_instance_count" getter="get_instance_count" default="0">
			Количество экземпляров, которые будут отрисованы. Это очищает и (восстанавливает) размеры буферов. По умолчанию отрисовываются все экземпляры, но вы можете ограничить это с помощью [member visible_instance_count].
		</member>
		<member name="mesh" type="Mesh" setter="set_mesh" getter="get_mesh">
			Сетка, которая будет нарисована.
		</member>
		<member name="physics_interpolation_quality" type="int" setter="set_physics_interpolation_quality" getter="get_physics_interpolation_quality" enum="MultiMesh.PhysicsInterpolationQuality" default="0">
			Выберите, какому методу интерполяции отдать предпочтение - скорости или качеству.
			При использовании низких частот тиков физики (обычно менее 20) или высокой скорости вращения объектов вы можете получить лучшие результаты от настройки высокого качества.
			[b]Примечание:[/b] Быстрое качество не равно низкому качеству. За исключением особых случаев, упомянутых выше, качество должно быть сравнимо с высоким качеством.
		</member>
		<member name="transform_format" type="int" setter="set_transform_format" getter="get_transform_format" enum="MultiMesh.TransformFormat" default="0">
			Формат преобразования, используемый для трансформации сетки, 2D или 3D.
		</member>
		<member name="visible_instance_count" type="int" setter="set_visible_instance_count" getter="get_visible_instance_count" default="-1">
			Ограничивает количество отрисовываемых экземпляров, при -1 отрисовываются все экземпляры. Изменение этого параметра не изменяет размеры буферов.
		</member>
	</members>
	<constants>
		<constant name="TRANSFORM_2D" value="0" enum="TransformFormat">
			Используйте этот параметр при использовании 2D-трансформации.
		</constant>
		<constant name="TRANSFORM_3D" value="1" enum="TransformFormat">
			Используйте этот параметр при использовании 3D-трансформации.
		</constant>
		<constant name="COLOR_NONE" value="0" enum="ColorFormat">
			Используется, когда вы не используете [Color]s для каждого экземпляра.
		</constant>
		<constant name="COLOR_8BIT" value="1" enum="ColorFormat">
			Сжимайте данные [Color] в 8 бит при передаче в шейдер. Это использует меньше памяти и может быть быстрее, но при этом [Color] теряет точность.
		</constant>
		<constant name="COLOR_FLOAT" value="2" enum="ColorFormat">
			Цвет [Color], передаваемый в [метод set_instance_color], будет использовать 4 плавающих значения. Используйте это значение для максимальной точности [Color].
		</constant>
		<constant name="CUSTOM_DATA_NONE" value="0" enum="CustomDataFormat">
			Используется, если вы не используете пользовательские данные для каждого экземпляра.
		</constant>
		<constant name="CUSTOM_DATA_8BIT" value="1" enum="CustomDataFormat">
			Сжимайте пользовательские данные в 8 бит при передаче в шейдер. Это использует меньше памяти и может быть быстрее, но теряет точность и диапазон. Флоаты, упакованные в 8 бит, могут представлять только значения от 0 до 1, числа вне этого диапазона будут зажаты.
		</constant>
		<constant name="CUSTOM_DATA_FLOAT" value="2" enum="CustomDataFormat">
			Цвет [Color], передаваемый в [метод set_instance_custom_data], будет использовать 4 плавающих числа. Используйте это значение для максимальной точности.
		</constant>
		<constant name="INTERP_QUALITY_FAST" value="0" enum="PhysicsInterpolationQuality">
			Всегда интерполируйте с помощью Basis lerping, который в некоторых ситуациях может давать артефакты искажения.
		</constant>
		<constant name="INTERP_QUALITY_HIGH" value="1" enum="PhysicsInterpolationQuality">
			Попытайтесь интерполировать с помощью Basis slerping (сферическая линейная интерполяция), если это возможно, в противном случае вернитесь к lerping.
		</constant>
	</constants>
</class>
