<?xml version="1.0" encoding="UTF-8" ?>
<class name="PhysicsServer" inherits="Object" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Серверный интерфейс для низкоуровневого доступа к физике.
	</brief_description>
	<description>
		PhysicsServer - это сервер, отвечающий за всю 3D-физику. Он может создавать множество видов физических объектов, но не вставляет их в дерево узлов.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="area_add_shape">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="shape" type="RID" />
			<argument index="2" name="transform" type="Transform" default="Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )" />
			<argument index="3" name="disabled" type="bool" default="false" />
			<description>
				Добавляет фигуру в область вместе с матрицей преобразования. На фигуры обычно ссылаются по их индексу, поэтому необходимо отслеживать, какая фигура имеет данный индекс.
			</description>
		</method>
		<method name="area_attach_object_instance_id">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="id" type="int" />
			<description>
				Присваивает область потомку [Object], чтобы она могла существовать в дереве узлов.
			</description>
		</method>
		<method name="area_clear_shapes">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<description>
				Удаляет все фигуры из области. При этом фигуры не удаляются, поэтому их можно переназначить позже.
			</description>
		</method>
		<method name="area_create">
			<return type="RID" />
			<description>
				Creates an [Area].
			</description>
		</method>
		<method name="area_get_object_instance_id" qualifiers="const">
			<return type="int" />
			<argument index="0" name="area" type="RID" />
			<description>
				Получает идентификатор экземпляра объекта, которому назначена область.
			</description>
		</method>
		<method name="area_get_param" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.AreaParameter" />
			<description>
				Возвращает значение параметра области. Список доступных параметров находится в константах [enum AreaParameter].
			</description>
		</method>
		<method name="area_get_shape" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="shape_idx" type="int" />
			<description>
				Возвращает [RID] n-й фигуры области.
			</description>
		</method>
		<method name="area_get_shape_count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="area" type="RID" />
			<description>
				Возвращает количество фигур, назначенных области.
			</description>
		</method>
		<method name="area_get_shape_transform" qualifiers="const">
			<return type="Transform" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="shape_idx" type="int" />
			<description>
				Возвращает матрицу преобразования фигуры в области.
			</description>
		</method>
		<method name="area_get_space" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="area" type="RID" />
			<description>
				Возвращает пространство, назначенное области.
			</description>
		</method>
		<method name="area_get_space_override_mode" qualifiers="const">
			<return type="int" enum="PhysicsServer.AreaSpaceOverrideMode" />
			<argument index="0" name="area" type="RID" />
			<description>
				Возвращает режим переопределения пространства для данной области.
			</description>
		</method>
		<method name="area_get_transform" qualifiers="const">
			<return type="Transform" />
			<argument index="0" name="area" type="RID" />
			<description>
				Возвращает матрицу преобразования для области.
			</description>
		</method>
		<method name="area_is_ray_pickable" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="area" type="RID" />
			<description>
				Если [code]true[/code], область сталкивается с лучами.
			</description>
		</method>
		<method name="area_remove_shape">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="shape_idx" type="int" />
			<description>
				Удаляет фигуру из области. При этом фигура не удаляется, поэтому ее можно переназначить позже.
			</description>
		</method>
		<method name="area_set_area_monitor_callback">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="receiver" type="Object" />
			<argument index="2" name="method" type="String" />
			<description>
			</description>
		</method>
		<method name="area_set_collision_layer">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="layer" type="int" />
			<description>
				Присваивает область одному или нескольким физическим слоям.
			</description>
		</method>
		<method name="area_set_collision_mask">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="mask" type="int" />
			<description>
				Устанавливает, какие физические слои будет отслеживать данная область.
			</description>
		</method>
		<method name="area_set_monitor_callback">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="receiver" type="Object" />
			<argument index="2" name="method" type="String" />
			<description>
				Устанавливает функцию, которая будет вызываться, когда любое тело/область входит или выходит из области. Этот обратный вызов будет вызван для любого объекта, взаимодействующего с областью, и принимает пять параметров:
				1: [константа AREA_BODY_ADDED] или [константа AREA_BODY_REMOVED], в зависимости от того, вошел или вышел объект из области.
				2: [RID] объекта, который вошел/вышел из области.
				3: Идентификатор экземпляра объекта, который вошел/вышел из области.
				4: Индекс формы объекта, который вошел/вышел из области.
				5: Индекс формы области, в которую объект вошел/вышел.
			</description>
		</method>
		<method name="area_set_monitorable">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="monitorable" type="bool" />
			<description>
			</description>
		</method>
		<method name="area_set_param">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.AreaParameter" />
			<argument index="2" name="value" type="Variant" />
			<description>
				Устанавливает значение для параметра области. Список доступных параметров находится в константах [enum AreaParameter].
			</description>
		</method>
		<method name="area_set_ray_pickable">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Устанавливает объект, который можно выбрать с помощью лучей.
			</description>
		</method>
		<method name="area_set_shape">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="shape_idx" type="int" />
			<argument index="2" name="shape" type="RID" />
			<description>
				Устанавливает объект, который можно выбрать с помощью лучей. Заменяет заданную форму области на другую. Старая фигура выбирается по ее индексу, новая - по ее [RID].
			</description>
		</method>
		<method name="area_set_shape_disabled">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="shape_idx" type="int" />
			<argument index="2" name="disabled" type="bool" />
			<description>
			</description>
		</method>
		<method name="area_set_shape_transform">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="shape_idx" type="int" />
			<argument index="2" name="transform" type="Transform" />
			<description>
				Устанавливает матрицу преобразования для фигуры области.
			</description>
		</method>
		<method name="area_set_space">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="space" type="RID" />
			<description>
				Присваивает пространство области.
			</description>
		</method>
		<method name="area_set_space_override_mode">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="mode" type="int" enum="PhysicsServer.AreaSpaceOverrideMode" />
			<description>
				Устанавливает режим переопределения пространства для области. Режимы описаны в константах [enum AreaSpaceOverrideMode].
			</description>
		</method>
		<method name="area_set_transform">
			<return type="void" />
			<argument index="0" name="area" type="RID" />
			<argument index="1" name="transform" type="Transform" />
			<description>
				Устанавливает матрицу преобразования для области.
			</description>
		</method>
		<method name="body_add_central_force">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="force" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="body_add_collision_exception">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="excepted_body" type="RID" />
			<description>
				Добавляет тело в список тел, освобожденных от столкновений.
			</description>
		</method>
		<method name="body_add_force">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="force" type="Vector3" />
			<argument index="2" name="position" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="body_add_shape">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="shape" type="RID" />
			<argument index="2" name="transform" type="Transform" default="Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )" />
			<argument index="3" name="disabled" type="bool" default="false" />
			<description>
				Добавляет фигуру к телу вместе с матрицей преобразования. На фигуры обычно ссылаются по их индексу, поэтому необходимо отслеживать, какая фигура имеет данный индекс.
			</description>
		</method>
		<method name="body_add_torque">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="torque" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="body_apply_central_impulse">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="impulse" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="body_apply_impulse">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="position" type="Vector3" />
			<argument index="2" name="impulse" type="Vector3" />
			<description>
				Придает телу толчок в [code]позиции[/code] в направлении [code]импульса[/code].
			</description>
		</method>
		<method name="body_apply_torque_impulse">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="impulse" type="Vector3" />
			<description>
				Дайте телу толчок, чтобы повернуть его.
			</description>
		</method>
		<method name="body_attach_object_instance_id">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="id" type="int" />
			<description>
				Присваивает область потомку [Object], чтобы она могла существовать в дереве узлов.
			</description>
		</method>
		<method name="body_clear_shapes">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<description>
				Удаляет все фигуры из тела.
			</description>
		</method>
		<method name="body_create">
			<return type="RID" />
			<argument index="0" name="mode" type="int" enum="PhysicsServer.BodyMode" default="2" />
			<argument index="1" name="init_sleeping" type="bool" default="false" />
			<description>
				Создает физическое тело. Первым параметром может быть любое значение из констант [enum BodyMode] для типа создаваемого тела. Кроме того, тело может быть создано в спящем режиме для экономии времени обработки.
			</description>
		</method>
		<method name="body_get_collision_layer" qualifiers="const">
			<return type="int" />
			<argument index="0" name="body" type="RID" />
			<description>
				Возвращает физический слой или слои, к которым принадлежит тело.
			</description>
		</method>
		<method name="body_get_collision_mask" qualifiers="const">
			<return type="int" />
			<argument index="0" name="body" type="RID" />
			<description>
				Возвращает физический слой или слои, с которыми тело может столкнуться.
			</description>
		</method>
		<method name="body_get_direct_state">
			<return type="PhysicsDirectBodyState" />
			<argument index="0" name="body" type="RID" />
			<description>
				Возвращает состояние [PhysicsDirectBodyState] тела. Возвращает [code]null[/code], если тело уничтожено или удалено из физического пространства.
			</description>
		</method>
		<method name="body_get_kinematic_safe_margin" qualifiers="const">
			<return type="float" />
			<argument index="0" name="body" type="RID" />
			<description>
			</description>
		</method>
		<method name="body_get_max_contacts_reported" qualifiers="const">
			<return type="int" />
			<argument index="0" name="body" type="RID" />
			<description>
				Возвращает максимальное количество контактов, о которых может быть сообщено. Смотрите [метод body_set_max_contacts_reported].
			</description>
		</method>
		<method name="body_get_mode" qualifiers="const">
			<return type="int" enum="PhysicsServer.BodyMode" />
			<argument index="0" name="body" type="RID" />
			<description>
				Возвращает режим тела.
			</description>
		</method>
		<method name="body_get_object_instance_id" qualifiers="const">
			<return type="int" />
			<argument index="0" name="body" type="RID" />
			<description>
				Получает идентификатор экземпляра объекта, которому назначена область.
			</description>
		</method>
		<method name="body_get_param" qualifiers="const">
			<return type="float" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.BodyParameter" />
			<description>
				Возвращает значение параметра тела. Список доступных параметров находится в константах [enum BodyParameter].
			</description>
		</method>
		<method name="body_get_shape" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="shape_idx" type="int" />
			<description>
				Возвращает [RID] n-й формы тела.
			</description>
		</method>
		<method name="body_get_shape_count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="body" type="RID" />
			<description>
				Возвращает количество фигур, назначенных телу.
			</description>
		</method>
		<method name="body_get_shape_transform" qualifiers="const">
			<return type="Transform" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="shape_idx" type="int" />
			<description>
				Возвращает матрицу преобразования формы тела.
			</description>
		</method>
		<method name="body_get_space" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="body" type="RID" />
			<description>
				Возвращает [RID] пространства, закрепленного за телом.
			</description>
		</method>
		<method name="body_get_state" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="state" type="int" enum="PhysicsServer.BodyState" />
			<description>
				Возвращает состояние тела.
			</description>
		</method>
		<method name="body_is_axis_locked" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="axis" type="int" enum="PhysicsServer.BodyAxis" />
			<description>
			</description>
		</method>
		<method name="body_is_continuous_collision_detection_enabled" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="body" type="RID" />
			<description>
				Если [code]true[/code], то включен режим непрерывного обнаружения столкновений.
			</description>
		</method>
		<method name="body_is_omitting_force_integration" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="body" type="RID" />
			<description>
				Возвращает, использует ли тело функцию обратного вызова для расчета собственной физики (см. [метод body_set_force_integration_callback]).
			</description>
		</method>
		<method name="body_is_ray_pickable" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="body" type="RID" />
			<description>
				Если [code]true[/code], тело можно обнаружить с помощью лучей.
			</description>
		</method>
		<method name="body_remove_collision_exception">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="excepted_body" type="RID" />
			<description>
				Удаляет тело из списка тел, освобожденных от столкновений.
				Непрерывное обнаружение столкновений пытается предсказать, где движущееся тело столкнется, вместо того чтобы перемещать его и корректировать его движение в случае столкновения.
			</description>
		</method>
		<method name="body_remove_shape">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="shape_idx" type="int" />
			<description>
				Удаляет фигуру из тела. Форма не удаляется, поэтому впоследствии ее можно использовать повторно.
			</description>
		</method>
		<method name="body_set_axis_lock">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="axis" type="int" enum="PhysicsServer.BodyAxis" />
			<argument index="2" name="lock" type="bool" />
			<description>
			</description>
		</method>
		<method name="body_set_axis_velocity">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="axis_velocity" type="Vector3" />
			<description>
				Устанавливает скорость по оси. Скорость по заданной оси вектора будет установлена как заданная длина вектора. Это полезно для поведения при прыжках.
			</description>
		</method>
		<method name="body_set_collision_layer">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="layer" type="int" />
			<description>
				Устанавливает физический слой или слои, к которым принадлежит тело.
			</description>
		</method>
		<method name="body_set_collision_mask">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="mask" type="int" />
			<description>
				Устанавливает физический слой или слои, с которыми тело может столкнуться.
			</description>
		</method>
		<method name="body_set_enable_continuous_collision_detection">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Если [code]true[/code], то включен режим непрерывного обнаружения столкновений.
				Непрерывное обнаружение столкновений пытается предсказать, где движущееся тело столкнется, вместо того чтобы перемещать его и корректировать его движение в случае столкновения.
			</description>
		</method>
		<method name="body_set_force_integration_callback">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="receiver" type="Object" />
			<argument index="2" name="method" type="String" />
			<argument index="3" name="userdata" type="Variant" default="null" />
			<description>
				Устанавливает функцию, используемую для расчета физики для объекта, если объект это позволяет (см. [метод body_set_omit_force_integration]).
			</description>
		</method>
		<method name="body_set_kinematic_safe_margin">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="margin" type="float" />
			<description>
			</description>
		</method>
		<method name="body_set_max_contacts_reported">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="amount" type="int" />
			<description>
				Устанавливает максимальное количество контактов для сообщения. Органы могут вести журнал контактов с другими органами, это можно сделать, установив максимальное количество сообщаемых контактов в число, большее 0.
			</description>
		</method>
		<method name="body_set_mode">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="mode" type="int" enum="PhysicsServer.BodyMode" />
			<description>
				Устанавливает режим тела, выбирая одну из констант [enum BodyMode].
			</description>
		</method>
		<method name="body_set_omit_force_integration">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Устанавливает, использует ли тело функцию обратного вызова для расчета собственной физики (см. [метод body_set_force_integration_callback]).
			</description>
		</method>
		<method name="body_set_param">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.BodyParameter" />
			<argument index="2" name="value" type="float" />
			<description>
				Устанавливает параметр тела. Список доступных параметров находится в константах [enum BodyParameter].
			</description>
		</method>
		<method name="body_set_ray_pickable">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Устанавливает возможность выбора тела с лучами, если [code]enabled[/code] установлен.
			</description>
		</method>
		<method name="body_set_shape">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="shape_idx" type="int" />
			<argument index="2" name="shape" type="RID" />
			<description>
				Заменяет заданную форму тела на другую. Старая фигура выбирается по ее индексу, новая - по [RID].
			</description>
		</method>
		<method name="body_set_shape_disabled">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="shape_idx" type="int" />
			<argument index="2" name="disabled" type="bool" />
			<description>
			</description>
		</method>
		<method name="body_set_shape_transform">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="shape_idx" type="int" />
			<argument index="2" name="transform" type="Transform" />
			<description>
				Устанавливает матрицу трансформации для фигуры тела.
			</description>
		</method>
		<method name="body_set_space">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="space" type="RID" />
			<description>
				Присваивает телу пространство (см. [метод space_create]).
			</description>
		</method>
		<method name="body_set_state">
			<return type="void" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="state" type="int" enum="PhysicsServer.BodyState" />
			<argument index="2" name="value" type="Variant" />
			<description>
				Устанавливает состояние тела (см. константы [enum BodyState]).
			</description>
		</method>
		<method name="body_test_motion">
			<return type="bool" />
			<argument index="0" name="body" type="RID" />
			<argument index="1" name="from" type="Transform" />
			<argument index="2" name="motion" type="Vector3" />
			<argument index="3" name="infinite_inertia" type="bool" />
			<argument index="4" name="result" type="PhysicsTestMotionResult" default="null" />
			<argument index="5" name="exclude_raycast_shapes" type="bool" default="true" />
			<argument index="6" name="exclude" type="Array" default="[  ]" />
			<description>
				Возвращает [code]true[/code], если столкновение произойдет в результате движения в заданном направлении из заданной точки пространства. Можно передать [PhysicsTestMotionResult], чтобы вернуть дополнительную информацию.
			</description>
		</method>
		<method name="cone_twist_joint_get_param" qualifiers="const">
			<return type="float" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.ConeTwistJointParam" />
			<description>
				Получает параметр cone_twist_joint (см. константы [enum ConeTwistJointParam]).
			</description>
		</method>
		<method name="cone_twist_joint_set_param">
			<return type="void" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.ConeTwistJointParam" />
			<argument index="2" name="value" type="float" />
			<description>
				Устанавливает параметр cone_twist_joint (см. константы [enum ConeTwistJointParam]).
			</description>
		</method>
		<method name="free_rid">
			<return type="void" />
			<argument index="0" name="rid" type="RID" />
			<description>
				Уничтожает любой из объектов, созданных PhysicsServer. Если переданный [RID] не входит в число объектов, которые могут быть созданы PhysicsServer, в консоль будет отправлена ошибка.
			</description>
		</method>
		<method name="generic_6dof_joint_get_flag">
			<return type="bool" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="axis" type="int" enum="Vector3.Axis" />
			<argument index="2" name="flag" type="int" enum="PhysicsServer.G6DOFJointAxisFlag" />
			<description>
				Получает флаг generic_6_DOF_joint (см. константы [enum G6DOFJointAxisFlag]).
			</description>
		</method>
		<method name="generic_6dof_joint_get_param">
			<return type="float" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="axis" type="int" enum="Vector3.Axis" />
			<argument index="2" name="param" type="int" enum="PhysicsServer.G6DOFJointAxisParam" />
			<description>
				Получает параметр generic_6_DOF_joint (см. константы [enum G6DOFJointAxisParam]).
			</description>
		</method>
		<method name="generic_6dof_joint_set_flag">
			<return type="void" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="axis" type="int" enum="Vector3.Axis" />
			<argument index="2" name="flag" type="int" enum="PhysicsServer.G6DOFJointAxisFlag" />
			<argument index="3" name="enable" type="bool" />
			<description>
				Устанавливает флаг generic_6_DOF_joint (см. константы [enum G6DOFJointAxisFlag]).
			</description>
		</method>
		<method name="generic_6dof_joint_set_param">
			<return type="void" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="axis" type="int" enum="Vector3.Axis" />
			<argument index="2" name="param" type="int" enum="PhysicsServer.G6DOFJointAxisParam" />
			<argument index="3" name="value" type="float" />
			<description>
				Устанавливает параметр generic_6_DOF_joint (см. константы [enum G6DOFJointAxisParam]).
			</description>
		</method>
		<method name="get_process_info">
			<return type="int" />
			<argument index="0" name="process_info" type="int" enum="PhysicsServer.ProcessInfo" />
			<description>
				Возвращает информацию о текущем состоянии физического движка 3D. Список доступных состояний см. в [enum ProcessInfo]. Реализовано только для Godot Physics.
			</description>
		</method>
		<method name="hinge_joint_get_flag" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="flag" type="int" enum="PhysicsServer.HingeJointFlag" />
			<description>
				Получает флаг шарнира (см. константы [enum HingeJointFlag]).
			</description>
		</method>
		<method name="hinge_joint_get_param" qualifiers="const">
			<return type="float" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.HingeJointParam" />
			<description>
				Получает параметр hinge_joint (см. [enum HingeJointParam]).
			</description>
		</method>
		<method name="hinge_joint_set_flag">
			<return type="void" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="flag" type="int" enum="PhysicsServer.HingeJointFlag" />
			<argument index="2" name="enabled" type="bool" />
			<description>
				Устанавливает флаг шарнира (см. константы [enum HingeJointFlag]).
			</description>
		</method>
		<method name="hinge_joint_set_param">
			<return type="void" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.HingeJointParam" />
			<argument index="2" name="value" type="float" />
			<description>
				Устанавливает параметр hinge_joint (см. константы [enum HingeJointParam]).
			</description>
		</method>
		<method name="joint_create_cone_twist">
			<return type="RID" />
			<argument index="0" name="body_A" type="RID" />
			<argument index="1" name="local_ref_A" type="Transform" />
			<argument index="2" name="body_B" type="RID" />
			<argument index="3" name="local_ref_B" type="Transform" />
			<description>
				Создает [ConeTwistJoint].
			</description>
		</method>
		<method name="joint_create_generic_6dof">
			<return type="RID" />
			<argument index="0" name="body_A" type="RID" />
			<argument index="1" name="local_ref_A" type="Transform" />
			<argument index="2" name="body_B" type="RID" />
			<argument index="3" name="local_ref_B" type="Transform" />
			<description>
				Создает [Generic6DOFJoint].
			</description>
		</method>
		<method name="joint_create_hinge">
			<return type="RID" />
			<argument index="0" name="body_A" type="RID" />
			<argument index="1" name="hinge_A" type="Transform" />
			<argument index="2" name="body_B" type="RID" />
			<argument index="3" name="hinge_B" type="Transform" />
			<description>
				Создает шарнир [HingeJoint].
			</description>
		</method>
		<method name="joint_create_pin">
			<return type="RID" />
			<argument index="0" name="body_A" type="RID" />
			<argument index="1" name="local_A" type="Vector3" />
			<argument index="2" name="body_B" type="RID" />
			<argument index="3" name="local_B" type="Vector3" />
			<description>
				Создает [PinJoint].
			</description>
		</method>
		<method name="joint_create_slider">
			<return type="RID" />
			<argument index="0" name="body_A" type="RID" />
			<argument index="1" name="local_ref_A" type="Transform" />
			<argument index="2" name="body_B" type="RID" />
			<argument index="3" name="local_ref_B" type="Transform" />
			<description>
				Создает [SliderJoint].
			</description>
		</method>
		<method name="joint_get_solver_priority" qualifiers="const">
			<return type="int" />
			<argument index="0" name="joint" type="RID" />
			<description>
				Получает значение приоритета Joint.
			</description>
		</method>
		<method name="joint_get_type" qualifiers="const">
			<return type="int" enum="PhysicsServer.JointType" />
			<argument index="0" name="joint" type="RID" />
			<description>
				Возвращает тип соединения/Joint.
			</description>
		</method>
		<method name="joint_set_solver_priority">
			<return type="void" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="priority" type="int" />
			<description>
				Устанавливает значение приоритета Joint.
			</description>
		</method>
		<method name="pin_joint_get_local_a" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="joint" type="RID" />
			<description>
				Возвращает положение сустава в локальном пространстве тела "a" сустава.
			</description>
		</method>
		<method name="pin_joint_get_local_b" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="joint" type="RID" />
			<description>
				Возвращает положение сустава в локальном пространстве тела "b" сустава.
			</description>
		</method>
		<method name="pin_joint_get_param" qualifiers="const">
			<return type="float" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.PinJointParam" />
			<description>
				Получает параметр pin_joint (см. константы [enum PinJointParam]).
			</description>
		</method>
		<method name="pin_joint_set_local_a">
			<return type="void" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="local_A" type="Vector3" />
			<description>
				Задает положение сустава в локальном пространстве тела a сустава.
			</description>
		</method>
		<method name="pin_joint_set_local_b">
			<return type="void" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="local_B" type="Vector3" />
			<description>
				Задает положение сустава в локальном пространстве тела "b" сустава.
			</description>
		</method>
		<method name="pin_joint_set_param">
			<return type="void" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.PinJointParam" />
			<argument index="2" name="value" type="float" />
			<description>
				Устанавливает параметр pin_joint (см. константы [enum PinJointParam]).
			</description>
		</method>
		<method name="set_active">
			<return type="void" />
			<argument index="0" name="active" type="bool" />
			<description>
				Активирует или деактивирует физический движок 3D.
			</description>
		</method>
		<method name="set_collision_iterations">
			<return type="void" />
			<argument index="0" name="iterations" type="int" />
			<description>
				Задает количество итераций для вычисления скоростей сталкивающихся тел. Чем больше количество итераций, тем точнее будут столкновения. Однако большее количество итераций требует больше мощности процессора, что может снизить производительность. Значение по умолчанию - [code]8[/code].
				[b]Примечание:[/b] Действует только при использовании физического движка GodotPhysics, а не физического движка Bullet по умолчанию.
			</description>
		</method>
		<method name="shape_create">
			<return type="RID" />
			<argument index="0" name="type" type="int" enum="PhysicsServer.ShapeType" />
			<description>
				Создает фигуру типа из [enum ShapeType]. Не присваивает ее телу или области. Для этого необходимо использовать [метод area_set_shape] или [метод body_set_shape].
			</description>
		</method>
		<method name="shape_get_data" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="shape" type="RID" />
			<description>
				Returns the shape data.
			</description>
		</method>
		<method name="shape_get_type" qualifiers="const">
			<return type="int" enum="PhysicsServer.ShapeType" />
			<argument index="0" name="shape" type="RID" />
			<description>
				Возвращает тип фигуры (см. константы [enum ShapeType]).
			</description>
		</method>
		<method name="shape_set_data">
			<return type="void" />
			<argument index="0" name="shape" type="RID" />
			<argument index="1" name="data" type="Variant" />
			<description>
				Устанавливает данные фигуры, определяющие ее форму и размер. Передаваемые данные зависят от типа создаваемой фигуры [метод shape_get_type].
			</description>
		</method>
		<method name="slider_joint_get_param" qualifiers="const">
			<return type="float" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.SliderJointParam" />
			<description>
				Получает параметр slider_joint (см. константы [enum SliderJointParam]).
			</description>
		</method>
		<method name="slider_joint_set_param">
			<return type="void" />
			<argument index="0" name="joint" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.SliderJointParam" />
			<argument index="2" name="value" type="float" />
			<description>
				Получает параметр slider_joint (см. константы [enum SliderJointParam]).
			</description>
		</method>
		<method name="space_create">
			<return type="RID" />
			<description>
				Создает пространство. Пространство - это набор параметров для физического движка, которые могут быть назначены области или телу. Его можно назначить области с помощью [method area_set_space] или телу с помощью [method body_set_space].
			</description>
		</method>
		<method name="space_get_direct_state">
			<return type="PhysicsDirectSpaceState" />
			<argument index="0" name="space" type="RID" />
			<description>
				Возвращает состояние пространства, [PhysicsDirectSpaceState]. Этот объект можно использовать для запросов столкновений/пересечений.
			</description>
		</method>
		<method name="space_get_param" qualifiers="const">
			<return type="float" />
			<argument index="0" name="space" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.SpaceParameter" />
			<description>
				Возвращает значение параметра пространства.
			</description>
		</method>
		<method name="space_is_active" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="space" type="RID" />
			<description>
				Возвращает, активно ли данное пространство.
			</description>
		</method>
		<method name="space_set_active">
			<return type="void" />
			<argument index="0" name="space" type="RID" />
			<argument index="1" name="active" type="bool" />
			<description>
				Помечает пространство как активное. Оно не будет иметь эффекта, если не назначено области или телу.
			</description>
		</method>
		<method name="space_set_param">
			<return type="void" />
			<argument index="0" name="space" type="RID" />
			<argument index="1" name="param" type="int" enum="PhysicsServer.SpaceParameter" />
			<argument index="2" name="value" type="float" />
			<description>
				Устанавливает значение параметра пространства. Список доступных параметров находится в константах [enum SpaceParameter].
			</description>
		</method>
	</methods>
	<constants>
		<constant name="JOINT_PIN" value="0" enum="JointType">
			Сустав [Joint] представляет собой [PinJoint].
		</constant>
		<constant name="JOINT_HINGE" value="1" enum="JointType">
			Сустав [Joint] представляет собой [HingeJoint].
		</constant>
		<constant name="JOINT_SLIDER" value="2" enum="JointType">
			[Joint] - это [SliderJoint].
		</constant>
		<constant name="JOINT_CONE_TWIST" value="3" enum="JointType">
			Сустав [Joint] представляет собой [ConeTwistJoint].
		</constant>
		<constant name="JOINT_6DOF" value="4" enum="JointType">
			Сустав [Joint] представляет собой [Generic6DOFJoint].
		</constant>
		<constant name="PIN_JOINT_BIAS" value="0" enum="PinJointParam">
			Сила, с которой прикрепленные предметы пытаются удержаться в позиционном отношении друг к другу.
			Чем выше, тем сильнее.
		</constant>
		<constant name="PIN_JOINT_DAMPING" value="1" enum="PinJointParam">
			Сила, с которой прижатые друг к другу объекты пытаются сохранить скорость.
			Чем выше, тем сильнее.
		</constant>
		<constant name="PIN_JOINT_IMPULSE_CLAMP" value="2" enum="PinJointParam">
			Если значение больше 0, то это максимальное значение для импульса, который этот джойнт подает на свои концы.
		</constant>
		<constant name="HINGE_JOINT_BIAS" value="0" enum="HingeJointParam">
			Скорость, с которой два тела притягиваются друг к другу, когда они движутся в разных направлениях.
		</constant>
		<constant name="HINGE_JOINT_LIMIT_UPPER" value="1" enum="HingeJointParam">
			Максимальный поворот через шарнир.
		</constant>
		<constant name="HINGE_JOINT_LIMIT_LOWER" value="2" enum="HingeJointParam">
			The minimum rotation across the Hinge.
		</constant>
		<constant name="HINGE_JOINT_LIMIT_BIAS" value="3" enum="HingeJointParam">
			Скорость, с которой корректируется вращение вокруг оси, перпендикулярной шарниру.
		</constant>
		<constant name="HINGE_JOINT_LIMIT_SOFTNESS" value="4" enum="HingeJointParam">
		</constant>
		<constant name="HINGE_JOINT_LIMIT_RELAXATION" value="5" enum="HingeJointParam">
			Чем меньше это значение, тем больше замедляется вращение.
		</constant>
		<constant name="HINGE_JOINT_MOTOR_TARGET_VELOCITY" value="6" enum="HingeJointParam">
			Целевая скорость двигателя.
		</constant>
		<constant name="HINGE_JOINT_MOTOR_MAX_IMPULSE" value="7" enum="HingeJointParam">
			Максимальное ускорение для двигателя.
		</constant>
		<constant name="HINGE_JOINT_FLAG_USE_LIMIT" value="0" enum="HingeJointFlag">
			Если [code]true[/code], шарнир имеет максимальный и минимальный поворот.
		</constant>
		<constant name="HINGE_JOINT_FLAG_ENABLE_MOTOR" value="1" enum="HingeJointFlag">
			Если [code]true[/code], мотор поворачивает петлю.
		</constant>
		<constant name="SLIDER_JOINT_LINEAR_LIMIT_UPPER" value="0" enum="SliderJointParam">
			Максимальная разница между точками поворота на оси X до наступления демпфирования.
		</constant>
		<constant name="SLIDER_JOINT_LINEAR_LIMIT_LOWER" value="1" enum="SliderJointParam">
			Минимальная разница между точками поворота на оси X до наступления демпфирования.
		</constant>
		<constant name="SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS" value="2" enum="SliderJointParam">
			Коэффициент, применяемый к перемещению по оси ползунка при превышении пределов. Чем ниже, тем медленнее движение.
		</constant>
		<constant name="SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION" value="3" enum="SliderJointParam">
			Величина реституции при преодолении пределов. Чем ниже, тем больше теряется энергии скорости.
		</constant>
		<constant name="SLIDER_JOINT_LINEAR_LIMIT_DAMPING" value="4" enum="SliderJointParam">
			Величина демпфирования после превышения пределов ползунка.
		</constant>
		<constant name="SLIDER_JOINT_LINEAR_MOTION_SOFTNESS" value="5" enum="SliderJointParam">
			Коэффициент, применяемый к перемещению по оси ползунка, пока ползунок находится в заданных пределах. Чем меньше, тем медленнее движение.
		</constant>
		<constant name="SLIDER_JOINT_LINEAR_MOTION_RESTITUTION" value="6" enum="SliderJointParam">
			Сумма реституции в пределах слайдера.
		</constant>
		<constant name="SLIDER_JOINT_LINEAR_MOTION_DAMPING" value="7" enum="SliderJointParam">
			Величина демпфирования в пределах ползунка.
		</constant>
		<constant name="SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS" value="8" enum="SliderJointParam">
			Коэффициент, применяемый к перемещению по осям, ортогональным к ползунку.
		</constant>
		<constant name="SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION" value="9" enum="SliderJointParam">
			Величина реституции при движении по осям, ортогональным к ползунку.
		</constant>
		<constant name="SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING" value="10" enum="SliderJointParam">
			Величина демпфирования при движении по осям, ортогональным к ползунку.
		</constant>
		<constant name="SLIDER_JOINT_ANGULAR_LIMIT_UPPER" value="11" enum="SliderJointParam">
			Верхний предел вращения в слайдере.
		</constant>
		<constant name="SLIDER_JOINT_ANGULAR_LIMIT_LOWER" value="12" enum="SliderJointParam">
			Нижний предел поворота в слайдере.
		</constant>
		<constant name="SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS" value="13" enum="SliderJointParam">
			Коэффициент, применяемый ко всем оборотам после превышения предела.
		</constant>
		<constant name="SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION" value="14" enum="SliderJointParam">
			Величина реституции вращения при превышении предела.
		</constant>
		<constant name="SLIDER_JOINT_ANGULAR_LIMIT_DAMPING" value="15" enum="SliderJointParam">
			Величина затухания вращения при превышении предела.
		</constant>
		<constant name="SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS" value="16" enum="SliderJointParam">
			Коэффициент, который применяется ко всем вращениям в пределах.
		</constant>
		<constant name="SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION" value="17" enum="SliderJointParam">
			The amount of restitution of the rotation in the limits.
		</constant>
		<constant name="SLIDER_JOINT_ANGULAR_MOTION_DAMPING" value="18" enum="SliderJointParam">
			Величина затухания вращения в пределах.
		</constant>
		<constant name="SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS" value="19" enum="SliderJointParam">
			Коэффициент, который применяется ко всем вращениям по осям, ортогональным к ползунку.
		</constant>
		<constant name="SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION" value="20" enum="SliderJointParam">
			Величина реституции вращения по осям, ортогональным к ползунку.
		</constant>
		<constant name="SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING" value="21" enum="SliderJointParam">
			Величина затухания вращения по осям, ортогональным к ползунку.
		</constant>
		<constant name="SLIDER_JOINT_MAX" value="22" enum="SliderJointParam">
			Представляет размер перечисления [enum SliderJointParam].
		</constant>
		<constant name="CONE_TWIST_JOINT_SWING_SPAN" value="0" enum="ConeTwistJointParam">
			Свинг - это вращение из стороны в сторону вокруг оси, перпендикулярной оси твиста.
			Размах поворота определяет, насколько сильно вращение не будет скорректировано вдоль оси поворота.
			Может быть определен как ослабление в [ConeTwistJoint].
			Если значение меньше 0,05, то такое поведение блокируется.
		</constant>
		<constant name="CONE_TWIST_JOINT_TWIST_SPAN" value="1" enum="ConeTwistJointParam">
			Twist - это вращение вокруг оси twist, это значение определяет, насколько далеко может крутиться сустав.
			Твист блокируется, если его значение меньше 0,05.
		</constant>
		<constant name="CONE_TWIST_JOINT_BIAS" value="2" enum="ConeTwistJointParam">
			Скорость, с которой будет выполняться взмах или поворот.
			Чем выше, тем быстрее.
		</constant>
		<constant name="CONE_TWIST_JOINT_SOFTNESS" value="3" enum="ConeTwistJointParam">
			Легкость, с которой вращается сустав, если он слишком низкий, то для его вращения требуется большее усилие.
		</constant>
		<constant name="CONE_TWIST_JOINT_RELAXATION" value="4" enum="ConeTwistJointParam">
			Определяет, как быстро синхронизируется разница в скорости поворота и кручения с обеих сторон.
		</constant>
		<constant name="G6DOF_JOINT_LINEAR_LOWER_LIMIT" value="0" enum="G6DOFJointAxisParam">
			Минимальная разница между осями точек поворота.
		</constant>
		<constant name="G6DOF_JOINT_LINEAR_UPPER_LIMIT" value="1" enum="G6DOFJointAxisParam">
			Максимальная разница между осями точек поворота.
		</constant>
		<constant name="G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS" value="2" enum="G6DOFJointAxisParam">
			Коэффициент, который применяется к перемещению по осям. Чем ниже, тем медленнее движение.
		</constant>
		<constant name="G6DOF_JOINT_LINEAR_RESTITUTION" value="3" enum="G6DOFJointAxisParam">
			Величина реституции при перемещении осей. Чем ниже, тем больше теряется энергии скорости.
		</constant>
		<constant name="G6DOF_JOINT_LINEAR_DAMPING" value="4" enum="G6DOFJointAxisParam">
			Величина демпфирования, возникающая при линейном перемещении по осям.
		</constant>
		<constant name="G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY" value="5" enum="G6DOFJointAxisParam">
			Скорость, которую будет пытаться достичь линейный двигатель шарнира.
		</constant>
		<constant name="G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT" value="6" enum="G6DOFJointAxisParam">
			Максимальное усилие, которое может приложить линейный двигатель, пытаясь достичь заданной скорости.
		</constant>
		<constant name="G6DOF_JOINT_ANGULAR_LOWER_LIMIT" value="10" enum="G6DOFJointAxisParam">
			Минимальное вращение в отрицательном направлении, чтобы расшататься и повернуться вокруг оси.
		</constant>
		<constant name="G6DOF_JOINT_ANGULAR_UPPER_LIMIT" value="11" enum="G6DOFJointAxisParam">
			Минимальное вращение в положительном направлении, чтобы расшататься и повернуться вокруг оси.
		</constant>
		<constant name="G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS" value="12" enum="G6DOFJointAxisParam">
			Коэффициент, который умножается на все вращения по осям.
		</constant>
		<constant name="G6DOF_JOINT_ANGULAR_DAMPING" value="13" enum="G6DOFJointAxisParam">
			Величина демпфирования вращения по осям. Чем ниже, тем больше демпфирование.
		</constant>
		<constant name="G6DOF_JOINT_ANGULAR_RESTITUTION" value="14" enum="G6DOFJointAxisParam">
			Величина реституции при вращении по осям. Чем ниже, тем больше реституция.
		</constant>
		<constant name="G6DOF_JOINT_ANGULAR_FORCE_LIMIT" value="15" enum="G6DOFJointAxisParam">
			Максимальное усилие, которое может возникнуть при вращении вокруг оси.
		</constant>
		<constant name="G6DOF_JOINT_ANGULAR_ERP" value="16" enum="G6DOFJointAxisParam">
			При коррекции пересечения пределов поворота по осям этот коэффициент допустимой погрешности определяет, насколько замедляется коррекция. Чем ниже, тем медленнее.
		</constant>
		<constant name="G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY" value="17" enum="G6DOFJointAxisParam">
			Заданная скорость вращения двигателя по осям.
		</constant>
		<constant name="G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT" value="18" enum="G6DOFJointAxisParam">
			Максимальное ускорение двигателя по осям.
		</constant>
		<constant name="G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT" value="0" enum="G6DOFJointAxisFlag">
			Если установлено, то линейное перемещение возможно в заданных пределах.
		</constant>
		<constant name="G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT" value="1" enum="G6DOFJointAxisFlag">
			Если установлено, возможно вращательное движение.
		</constant>
		<constant name="G6DOF_JOINT_FLAG_ENABLE_MOTOR" value="4" enum="G6DOFJointAxisFlag">
			Если установлено, то по этим осям вращается двигатель.
		</constant>
		<constant name="G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR" value="5" enum="G6DOFJointAxisFlag">
			Если установлено, то на этой оси установлен линейный двигатель, который задает определенную скорость.
		</constant>
		<constant name="SHAPE_PLANE" value="0" enum="ShapeType">
			Фигура [Shape] представляет собой [PlaneShape].
		</constant>
		<constant name="SHAPE_RAY" value="1" enum="ShapeType">
			Форма [Shape] представляет собой [RayShape].
		</constant>
		<constant name="SHAPE_SPHERE" value="2" enum="ShapeType">
			В качестве [Shape] используется [SphereShape].
		</constant>
		<constant name="SHAPE_BOX" value="3" enum="ShapeType">
			Фигура [Shape] представляет собой [BoxShape].
		</constant>
		<constant name="SHAPE_CAPSULE" value="4" enum="ShapeType">
			Форма [Shape] - это [CapsuleShape].
		</constant>
		<constant name="SHAPE_CYLINDER" value="5" enum="ShapeType">
			Форма [Shape] - это [CylinderShape].
		</constant>
		<constant name="SHAPE_CONVEX_POLYGON" value="6" enum="ShapeType">
			Фигура [Shape] представляет собой [ConvexPolygonShape].
		</constant>
		<constant name="SHAPE_CONCAVE_POLYGON" value="7" enum="ShapeType">
			Форма [Shape] представляет собой [ConcavePolygonShape].
		</constant>
		<constant name="SHAPE_HEIGHTMAP" value="8" enum="ShapeType">
			Форма [Shape] представляет собой [HeightMapShape].
		</constant>
		<constant name="SHAPE_CUSTOM" value="9" enum="ShapeType">
			Эта константа используется внутренним движком. Любая попытка создать такую форму приводит к ошибке.
		</constant>
		<constant name="AREA_PARAM_GRAVITY" value="0" enum="AreaParameter">
			Постоянная, чтобы установить/получить силу гравитации в области.
		</constant>
		<constant name="AREA_PARAM_GRAVITY_VECTOR" value="1" enum="AreaParameter">
			Константа для установки/получения вектора/центра гравитации в области.
		</constant>
		<constant name="AREA_PARAM_GRAVITY_IS_POINT" value="2" enum="AreaParameter">
			Константа для установки/получения того, является ли вектор гравитации области направлением или центральной точкой.
		</constant>
		<constant name="AREA_PARAM_GRAVITY_DISTANCE_SCALE" value="3" enum="AreaParameter">
			Константа для установки/получения коэффициента падения силы тяжести точки в области. Чем больше это значение, тем быстрее сила гравитации уменьшается с квадратом расстояния.
		</constant>
		<constant name="AREA_PARAM_GRAVITY_POINT_ATTENUATION" value="4" enum="AreaParameter">
			Эта константа использовалась для установки/получения коэффициента падения для гравитации точки. Она была заменена константой [AREA_PARAM_GRAVITY_DISTANCE_SCALE].
		</constant>
		<constant name="AREA_PARAM_LINEAR_DAMP" value="5" enum="AreaParameter">
			Константа для установки/получения коэффициента линейного демпфирования области.
		</constant>
		<constant name="AREA_PARAM_ANGULAR_DAMP" value="6" enum="AreaParameter">
			Константа для установки/получения углового коэффициента демпфирования области.
		</constant>
		<constant name="AREA_PARAM_PRIORITY" value="7" enum="AreaParameter">
			Константа для установки/получения приоритета (порядка обработки) области.
		</constant>
		<constant name="AREA_SPACE_OVERRIDE_DISABLED" value="0" enum="AreaSpaceOverrideMode">
			Эта область не влияет на гравитацию/влажность. Обычно эти области существуют только для обнаружения столкновений, а также объектов, входящих в них или выходящих из них.
		</constant>
		<constant name="AREA_SPACE_OVERRIDE_COMBINE" value="1" enum="AreaSpaceOverrideMode">
			Эта область добавляет свои значения гравитации/влажности к тем, что были рассчитаны до сих пор. Таким образом, многие перекрывающиеся области могут объединить свою физику для создания интересных эффектов.
		</constant>
		<constant name="AREA_SPACE_OVERRIDE_COMBINE_REPLACE" value="2" enum="AreaSpaceOverrideMode">
			Эта область добавляет свои значения гравитации/влажности к тем, которые были рассчитаны до сих пор. Затем перестает учитывать остальные области, даже ту, что по умолчанию.
		</constant>
		<constant name="AREA_SPACE_OVERRIDE_REPLACE" value="3" enum="AreaSpaceOverrideMode">
			Эта область заменяет любую гравитацию/влажность, даже ту, что установлена по умолчанию, и перестает учитывать остальные области.
		</constant>
		<constant name="AREA_SPACE_OVERRIDE_REPLACE_COMBINE" value="4" enum="AreaSpaceOverrideMode">
			Эта область заменяет все рассчитанные на данный момент гравитацию/влажность, но продолжает рассчитывать остальные области, вплоть до той, что используется по умолчанию.
		</constant>
		<constant name="BODY_MODE_STATIC" value="0" enum="BodyMode">
			Постоянная для статических тел.
		</constant>
		<constant name="BODY_MODE_KINEMATIC" value="1" enum="BodyMode">
			Постоянная для кинематических тел.
		</constant>
		<constant name="BODY_MODE_RIGID" value="2" enum="BodyMode">
			Постоянная для жестких тел.
		</constant>
		<constant name="BODY_MODE_CHARACTER" value="3" enum="BodyMode">
			Константа для жестких тел в режиме персонажа. В этом режиме тело не может вращаться, и физика влияет только на его линейную скорость.
		</constant>
		<constant name="BODY_PARAM_BOUNCE" value="0" enum="BodyParameter">
			Константа для установки/получения коэффициента отскока тела.
		</constant>
		<constant name="BODY_PARAM_FRICTION" value="1" enum="BodyParameter">
			Константа для установки/получения трения тела.
		</constant>
		<constant name="BODY_PARAM_MASS" value="2" enum="BodyParameter">
			Константа для задания/получения массы тела.
		</constant>
		<constant name="BODY_PARAM_GRAVITY_SCALE" value="3" enum="BodyParameter">
			Константа для установки/получения множителя гравитации тела.
		</constant>
		<constant name="BODY_PARAM_LINEAR_DAMP" value="4" enum="BodyParameter">
			Константа для установки/получения коэффициента линейного демпфирования тела.
		</constant>
		<constant name="BODY_PARAM_ANGULAR_DAMP" value="5" enum="BodyParameter">
			Константа для установки/получения коэффициента углового демпфирования тела.
		</constant>
		<constant name="BODY_PARAM_MAX" value="6" enum="BodyParameter">
			Представляет размер перечисления [enum BodyParameter].
		</constant>
		<constant name="BODY_STATE_TRANSFORM" value="0" enum="BodyState">
			Константа для установки/получения текущей матрицы трансформации тела.
		</constant>
		<constant name="BODY_STATE_LINEAR_VELOCITY" value="1" enum="BodyState">
			Константа для установки/получения текущей линейной скорости тела.
		</constant>
		<constant name="BODY_STATE_ANGULAR_VELOCITY" value="2" enum="BodyState">
			Константа для установки/получения текущей угловой скорости тела.
		</constant>
		<constant name="BODY_STATE_SLEEPING" value="3" enum="BodyState">
			Постоянно спать/будить тело, или узнать, спит ли оно.
		</constant>
		<constant name="BODY_STATE_CAN_SLEEP" value="4" enum="BodyState">
			Постоянная для установки/получения того, может ли тело спать.
		</constant>
		<constant name="AREA_BODY_ADDED" value="0" enum="AreaBodyStatus">
			Значение первого параметра, которое получает функция обратного вызова области, когда объект входит в одну из ее форм.
		</constant>
		<constant name="AREA_BODY_REMOVED" value="1" enum="AreaBodyStatus">
			Значение первого параметра, которое получает функция обратного вызова области, когда объект выходит из одной из своих форм.
		</constant>
		<constant name="INFO_ACTIVE_OBJECTS" value="0" enum="ProcessInfo">
			Константа для получения количества объектов, которые не спят.
		</constant>
		<constant name="INFO_COLLISION_PAIRS" value="1" enum="ProcessInfo">
			Константа для получения количества возможных столкновений.
		</constant>
		<constant name="INFO_ISLAND_COUNT" value="2" enum="ProcessInfo">
			Константа для получения количества областей пространства, в которых может произойти столкновение.
		</constant>
		<constant name="SPACE_PARAM_CONTACT_RECYCLE_RADIUS" value="0" enum="SpaceParameter">
			Константа для установки/получения максимального расстояния, на которое должна переместиться пара тел, прежде чем их состояние столкновения будет пересчитано.
		</constant>
		<constant name="SPACE_PARAM_CONTACT_MAX_SEPARATION" value="1" enum="SpaceParameter">
			Константа для установки/получения максимального расстояния, на котором фигура может находиться от другой, прежде чем они будут считаться разделенными.
		</constant>
		<constant name="SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION" value="2" enum="SpaceParameter">
			Константа для установки/получения максимального расстояния, на которое фигура может проникнуть в другую фигуру, прежде чем это будет считаться столкновением.
		</constant>
		<constant name="SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD" value="3" enum="SpaceParameter">
			Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.
		</constant>
		<constant name="SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD" value="4" enum="SpaceParameter">
			Константа для установки/получения пороговой угловой скорости активности. Тело, отмеченное как потенциально неактивное как по линейной, так и по угловой скорости, будет переведено в спящий режим по истечении указанного времени.
		</constant>
		<constant name="SPACE_PARAM_BODY_TIME_TO_SLEEP" value="5" enum="SpaceParameter">
			Константа для установки/получения максимального времени активности. Тело, отмеченное как потенциально неактивное как для линейной, так и для угловой скорости, будет переведено в спящий режим по истечении этого времени.
		</constant>
		<constant name="SPACE_PARAM_BODY_ANGULAR_VELOCITY_DAMP_RATIO" value="6" enum="SpaceParameter">
		</constant>
		<constant name="SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS" value="7" enum="SpaceParameter">
			Константа для установки/получения смещения решателя по умолчанию для всех ограничений физики. Смещение решателя - это фактор, управляющий тем, насколько сильно два объекта "отскакивают" после нарушения ограничения, чтобы не оставить их в таком состоянии из-за численной неточности.
		</constant>
		<constant name="BODY_AXIS_LINEAR_X" value="1" enum="BodyAxis">
		</constant>
		<constant name="BODY_AXIS_LINEAR_Y" value="2" enum="BodyAxis">
		</constant>
		<constant name="BODY_AXIS_LINEAR_Z" value="4" enum="BodyAxis">
		</constant>
		<constant name="BODY_AXIS_ANGULAR_X" value="8" enum="BodyAxis">
		</constant>
		<constant name="BODY_AXIS_ANGULAR_Y" value="16" enum="BodyAxis">
		</constant>
		<constant name="BODY_AXIS_ANGULAR_Z" value="32" enum="BodyAxis">
		</constant>
	</constants>
</class>
