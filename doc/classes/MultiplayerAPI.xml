<?xml version="1.0" encoding="UTF-8" ?>
<class name="MultiplayerAPI" inherits="Reference" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Многопользовательский/Мультиплеер API высокого уровня.
	</brief_description>
	<description>
		Этот класс реализует большую часть логики, лежащей в основе высокоуровневого многопользовательского API. См. также [NetworkedMultiplayerPeer].
		По умолчанию [SceneTree] имеет ссылку на этот класс, который используется для обеспечения многопользовательских возможностей (т.е. RPC/RSET) на всей сцене.
		Можно переопределить экземпляр MultiplayerAPI, используемый конкретными узлами, установив свойство [member Node.custom_multiplayer], что позволяет запускать и клиент, и сервер в одной сцене.
		[b]Примечание:[/b] Высокоуровневый протокол многопользовательского API является деталью реализации и не предназначен для использования серверами, не относящимися к Godot. Он может быть изменен без предварительного уведомления.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear">
			<return type="void" />
			<description>
				Очищает текущее состояние сети MultiplayerAPI (не стоит вызывать эту функцию, если вы не знаете, что делаете).
			</description>
		</method>
		<method name="get_network_connected_peers" qualifiers="const">
			<return type="PoolIntArray" />
			<description>
				Возвращает идентификаторы пиров всех подключенных пиров данного MultiplayerAPI [member network_peer].
			</description>
		</method>
		<method name="get_network_unique_id" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает уникальный идентификатор пира [member network_peer] этого MultiplayerAPI.
			</description>
		</method>
		<method name="get_rpc_sender_id" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает идентификатор пира отправителя для выполняемого в данный момент RPC.
				[b]Примечание:[/b] Если этот метод не находится внутри RPC, он вернет 0.
			</description>
		</method>
		<method name="has_network_peer" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если установлен [member network_peer].
			</description>
		</method>
		<method name="is_network_server" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если [member network_peer] этого MultiplayerAPI находится в режиме сервера (прослушивает соединения).
			</description>
		</method>
		<method name="poll">
			<return type="void" />
			<description>
				Метод, используемый для опроса MultiplayerAPI. Вам нужно беспокоиться об этом, только если вы используете переопределение [member Node.custom_multiplayer] или установили [member SceneTree.multiplayer_poll] в [code]false[/code]. По умолчанию [SceneTree] будет опрашивать свой MultiplayerAPI за вас.
				[b]Примечание:[/b] Этот метод приводит к вызову RPC и RSET, поэтому они будут выполняться в том же контексте, что и эта функция (например, [code]_process[/code], [code]physics[/code], [Thread]).
			</description>
		</method>
		<method name="send_bytes">
			<return type="int" enum="Error" />
			<argument index="0" name="bytes" type="PoolByteArray" />
			<argument index="1" name="id" type="int" default="0" />
			<argument index="2" name="mode" type="int" enum="NetworkedMultiplayerPeer.TransferMode" default="2" />
			<description>
				Отправляет заданные необработанные [code]байты[/code] определенному пиру, идентифицированному по [code]id[/code] (см. [method NetworkedMultiplayerPeer.set_target_peer]). По умолчанию идентификатор равен [code]0[/code], т. е. передается всем пирам.
			</description>
		</method>
	</methods>
	<members>
		<member name="allow_object_decoding" type="bool" setter="set_allow_object_decoding" getter="is_object_decoding_allowed" default="false">
			Если [code]true[/code] (или если у [member network_peer] [member PacketPeer.allow_object_decoding] установлен в [code]true[/code]), MultiplayerAPI будет разрешать кодирование и декодирование объектов во время RPCs/RSETs.
			[b]Предупреждение:[/b] Десериализованные объекты могут содержать код, который будет выполняться. Не используйте эту опцию, если сериализованный объект получен из ненадежных источников, чтобы избежать потенциальных угроз безопасности, таких как удаленное выполнение кода.
		</member>
		<member name="network_peer" type="NetworkedMultiplayerPeer" setter="set_network_peer" getter="get_network_peer">
			Объект peer для работы с системой RPC (эффективно включает сетевой режим, если установлен). В зависимости от самого пира, MultiplayerAPI станет сетевым сервером (проверяется с помощью [method is_network_server]) и установит сетевой режим корневого узла на master, или станет обычным пиром с корневым узлом, установленным на puppet. Все дочерние узлы по умолчанию наследуют сетевой режим. Обработка событий, связанных с сетью (подключение, отключение, появление новых клиентов), осуществляется посредством подключения к сигналам MultiplayerAPI.
		</member>
		<member name="refuse_new_network_connections" type="bool" setter="set_refuse_new_network_connections" getter="is_refusing_new_network_connections" default="false">
			Если [code]true[/code], то [member network_peer] MultiplayerAPI отказывается от новых входящих соединений.
		</member>
		<member name="root_node" type="Node" setter="set_root_node" getter="get_root_node">
			Корневой узел, используемый для RPC. Вместо абсолютного пути для поиска узла, на котором должен быть выполнен RPC, будет использоваться относительный путь.
			Это позволяет эффективно управлять разными ветвями дерева сцены с помощью разных MultiplayerAPI, что позволяет, например, запускать клиент и сервер в одной сцене.
		</member>
	</members>
	<signals>
		<signal name="connected_to_server">
			<description>
				Выдается, когда [member network_peer] этого MultiplayerAPI успешно подключился к серверу. Выдается только на клиентах.
			</description>
		</signal>
		<signal name="connection_failed">
			<description>
				Выдается, когда [member network_peer] этого MultiplayerAPI не удается установить соединение с сервером. Выдается только на клиентах.
			</description>
		</signal>
		<signal name="network_peer_connected">
			<argument index="0" name="id" type="int" />
			<description>
				Выдается, когда [member network_peer] этого MultiplayerAPI соединяется с новым пиром. ID - это идентификатор нового пира. Клиенты получают уведомление, когда другие клиенты подключаются к тому же серверу. При подключении к серверу клиент также получает этот сигнал для сервера (с ID, равным 1).
			</description>
		</signal>
		<signal name="network_peer_disconnected">
			<argument index="0" name="id" type="int" />
			<description>
				Выдается, когда [member network_peer] этого MultiplayerAPI отсоединяется от пира. Клиенты получают уведомление, когда другие клиенты отсоединяются от того же сервера.
			</description>
		</signal>
		<signal name="network_peer_packet">
			<argument index="0" name="id" type="int" />
			<argument index="1" name="packet" type="PoolByteArray" />
			<description>
				Выдается, когда [member network_peer] этого MultiplayerAPI получает [code]пакет[/code] с пользовательскими данными (см. [method send_bytes]). ID - это идентификатор пира, отправившего пакет.
			</description>
		</signal>
		<signal name="server_disconnected">
			<description>
				Выдается, когда [member network_peer] этого MultiplayerAPI отсоединяется от сервера. Выдается только на клиентах.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="RPC_MODE_DISABLED" value="0" enum="RPCMode">
			Используется с [method Node.rpc_config] или [method Node.rset_config] для отключения метода или свойства для всех вызовов RPC, делая его недоступным. По умолчанию для всех методов.
		</constant>
		<constant name="RPC_MODE_REMOTE" value="1" enum="RPCMode">
			Используется с [method Node.rpc_config] или [method Node.rset_config], чтобы задать вызов метода или изменение свойства только на удаленной стороне, а не локально. Аналогично ключевому слову [code]remote[/code]. Вызовы и изменения свойств принимаются от всех удаленных пиров, независимо от того, являются ли они хозяевами или марионетками узла.
		</constant>
		<constant name="RPC_MODE_MASTER" value="2" enum="RPCMode">
			Используется с [method Node.rpc_config] или [method Node.rset_config] для задания вызова метода или изменения свойства только на сетевом мастере для данного узла. Аналогично ключевому слову [code]master[/code]. Принимает вызовы или изменения свойств только от сетевых марионеток узла, см. [метод Node.set_network_master].
		</constant>
		<constant name="RPC_MODE_PUPPET" value="3" enum="RPCMode">
			Используется с [method Node.rpc_config] или [method Node.rset_config], чтобы задать метод, который будет вызываться, или свойство, которое будет изменяться только у марионеток для этого узла. Аналогично ключевому слову [code]puppet[/code]. Принимает вызовы или изменения свойств только от сетевого мастера узла, см. [метод Node.set_network_master].
		</constant>
		<constant name="RPC_MODE_SLAVE" value="3" enum="RPCMode">
			[i]Утратил силу.[/i] Вместо него используйте [константу RPC_MODE_PUPPET]. Аналог ключевого слова [code]slave[/code].
		</constant>
		<constant name="RPC_MODE_REMOTESYNC" value="4" enum="RPCMode">
			Ведет себя как [constant RPC_MODE_REMOTE], но при этом заставляет вызов или свойство изменяться локально. Аналог ключевого слова [code]remotesync[/code].
		</constant>
		<constant name="RPC_MODE_SYNC" value="4" enum="RPCMode">
			[i]Утратил силу.[/i] Вместо него используйте [константу RPC_MODE_REMOTESYNC]. Аналог ключевого слова [code]sync[/code].
		</constant>
		<constant name="RPC_MODE_MASTERSYNC" value="5" enum="RPCMode">
			Ведет себя как [constant RPC_MODE_MASTER], но при этом заставляет вызов или свойство изменяться локально. Аналог ключевого слова [code]mastersync[/code].
		</constant>
		<constant name="RPC_MODE_PUPPETSYNC" value="6" enum="RPCMode">
			Ведет себя как [constant RPC_MODE_PUPPET], но при этом заставляет вызов или свойство изменяться локально. Аналог ключевого слова [code]puppetsync[/code].
		</constant>
	</constants>
</class>
