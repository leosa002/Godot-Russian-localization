<?xml version="1.0" encoding="UTF-8" ?>
<class name="NetworkedMultiplayerPeer" inherits="PacketPeer" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Высокоуровневый сетевой интерфейс для упрощения многопользовательского взаимодействия.
	</brief_description>
	<description>
		Управляет подключением к сетевым аналогам. Присваивает уникальные идентификаторы каждому клиенту, подключенному к серверу. См. также [MultiplayerAPI].
		[b]Примечание:[/b] Высокоуровневый протокол многопользовательского API является деталью реализации и не предназначен для использования серверами, не относящимися к Godot. Он может быть изменен без предварительного уведомления.
	</description>
	<tutorials>
		<link title="High-level multiplayer">$DOCS_URL/tutorials/networking/high_level_multiplayer.html</link>
		<link title="WebRTC Signaling Demo">https://godotengine.org/asset-library/asset/537</link>
	</tutorials>
	<methods>
		<method name="get_connection_status" qualifiers="const">
			<return type="int" enum="NetworkedMultiplayerPeer.ConnectionStatus" />
			<description>
				Возвращает текущее состояние соединения. См. раздел [enum ConnectionStatus].
			</description>
		</method>
		<method name="get_packet_peer" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает идентификатор/ID [NetworkedMultiplayerPeer], который отправил последний пакет.
			</description>
		</method>
		<method name="get_unique_id" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает идентификатор этого [NetworkedMultiplayerPeer].
			</description>
		</method>
		<method name="poll">
			<return type="void" />
			<description>
				Ждет до 1 секунды, чтобы получить новое сетевое событие.
			</description>
		</method>
		<method name="set_target_peer">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<description>
				Устанавливает пир, которому будут отправляться пакеты.
				[code]id[/code] может быть одним из: [constant TARGET_PEER_BROADCAST] для отправки всем подключенным пирам, [constant TARGET_PEER_SERVER] для отправки пиру, выполняющему роль сервера, действительный ID пира для отправки данному конкретному пиру, отрицательный ID пира для отправки всем пирам, кроме этого. По умолчанию целевым пиром является [константа TARGET_PEER_BROADCAST].
			</description>
		</method>
	</methods>
	<members>
		<member name="refuse_new_connections" type="bool" setter="set_refuse_new_connections" getter="is_refusing_new_connections" default="false">
			Если [code]true[/code], этот [NetworkedMultiplayerPeer] отказывается от новых подключений.
		</member>
		<member name="transfer_mode" type="int" setter="set_transfer_mode" getter="get_transfer_mode" enum="NetworkedMultiplayerPeer.TransferMode" default="2">
			Способ отправки пакетов на [code]target_peer[/code]. См. [enum TransferMode].
		</member>
	</members>
	<signals>
		<signal name="connection_failed">
			<description>
				Выдается при неудачной попытке подключения.
			</description>
		</signal>
		<signal name="connection_succeeded">
			<description>
				Выдается при успешной попытке соединения.
			</description>
		</signal>
		<signal name="peer_connected">
			<argument index="0" name="id" type="int" />
			<description>
				Выдается сервером при подключении клиента.
			</description>
		</signal>
		<signal name="peer_disconnected">
			<argument index="0" name="id" type="int" />
			<description>
				Выдается сервером, когда клиент отсоединяется.
			</description>
		</signal>
		<signal name="server_disconnected">
			<description>
				Выдается клиентами при отключении сервера.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="TRANSFER_MODE_UNRELIABLE" value="0" enum="TransferMode">
			Пакеты не подтверждаются, попытки повторной отправки потерянных пакетов не предпринимаются. Пакеты могут поступать в любом порядке. Потенциально быстрее, чем [constant TRANSFER_MODE_UNRELIABLE_ORDERED]. Используйте для некритичных данных и всегда думайте, имеет ли порядок значение.
		</constant>
		<constant name="TRANSFER_MODE_UNRELIABLE_ORDERED" value="1" enum="TransferMode">
			Пакеты не подтверждаются, попытки повторной отправки потерянных пакетов не предпринимаются. Пакеты принимаются в том порядке, в котором они были отправлены. Потенциально быстрее, чем [constant TRANSFER_MODE_RELIABLE]. Используется для некритичных данных или данных, которые устареют, если будут получены с опозданием из-за попыток повторной отправки (попыток), например, данные о движении и позиционировании.
		</constant>
		<constant name="TRANSFER_MODE_RELIABLE" value="2" enum="TransferMode">
			Пакеты должны быть получены, и попытки повторной отправки должны предприниматься до тех пор, пока пакеты не будут подтверждены. Пакеты должны быть получены в том порядке, в котором они были отправлены. Самый надежный режим передачи, но потенциально самый медленный из-за накладных расходов. Используйте для критически важных данных, которые должны быть переданы и получены в порядке очереди, например, для запуска способности или сообщения в чате. Тщательно подумайте, действительно ли информация является критической, и используйте ее редко.
		</constant>
		<constant name="CONNECTION_DISCONNECTED" value="0" enum="ConnectionStatus">
			Постоянная связь прервалась.
		</constant>
		<constant name="CONNECTION_CONNECTING" value="1" enum="ConnectionStatus">
			Попытка подключения продолжается.
		</constant>
		<constant name="CONNECTION_CONNECTED" value="2" enum="ConnectionStatus">
			Попытка подключения завершилась успешно.
		</constant>
		<constant name="TARGET_PEER_BROADCAST" value="0">
			Пакеты отправляются на сервер, а затем перераспределяются среди других пиров.
		</constant>
		<constant name="TARGET_PEER_SERVER" value="1">
			Пакеты отправляются только на сервер.
		</constant>
	</constants>
</class>
