<?xml version="1.0" encoding="UTF-8" ?>
<class name="PackedScene" inherits="Resource" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Абстракция сериализованной сцены.(Упакованная сцена)
	</brief_description>
	<description>
		Упрощенный интерфейс к файлу сцены. Предоставляет доступ к операциям и проверкам, которые могут быть выполнены над самим ресурсом сцены.
		Может использоваться для сохранения узла в файл. При сохранении сохраняется как сам узел, так и все принадлежащие ему узлы (см. свойство [code]owner[/code] у [Node]).
		[b]Примечание:[/b] Узел не обязательно должен владеть собой.
		[b]Пример загрузки сохраненной сцены:[/b]
		[codeblock]
		# Используйте `load()` вместо `preload()`, если путь не известен во время компиляции.
		var scene = preload("res://scene.tscn").instance()
		# Добавьте узел в качестве дочернего узла узла, к которому прикреплен скрипт.
		add_child(scene)
		[/codeblock]
		[b]Пример сохранения узла с разными владельцами:[/b] В следующем примере создаются 3 объекта: [code]Node2D[/code] ([code]node[/code]), [code]RigidBody2D[/code] ([code]rigid[/code]) и [code]CollisionObject2D[/code] ([code]collision[/code]). [code]collision[/code] является дочерним объектом [code]rigid[/code], который является дочерним объектом [code]node[/code]. Только [code]rigid[/code] принадлежит [code]node[/code], поэтому [code]pack[/code] сохранит только эти два узла, но не [code]collision[/code].
		[codeblock]
		# Создание объектов.
		var node = Node2D.new()
		var rigid = RigidBody2D.new()
		var collision = CollisionShape2D.new()

		# Создайте иерархию объектов.
		rigid.add_child(collision)
		node.add_child(rigid)

		# Смените владельца `rigid`, но не `collision`.
		rigid.owner = node

		var scene = PackedScene.new()
		# Теперь упакованы только `node` и `rigid`.
		var result = scene.pack(node)
		if result == OK:
		    var error = ResourceSaver.save("res://path/name.scn", scene)  # Или "user://..."
		    if error != OK:
		        push_error("При сохранении сцены на диск произошла ошибка.")
		[/codeblock]
	</description>
	<tutorials>
		<link title="2D Role Playing Game Demo">https://godotengine.org/asset-library/asset/520</link>
	</tutorials>
	<methods>
		<method name="can_instance" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если в файле сцены есть узлы.
			</description>
		</method>
		<method name="get_state">
			<return type="SceneState" />
			<description>
				Возвращает [code]SceneState[/code], представляющий содержимое файла сцены.
			</description>
		</method>
		<method name="instance" qualifiers="const">
			<return type="Node" />
			<argument index="0" name="edit_state" type="int" enum="PackedScene.GenEditState" default="0" />
			<description>
				Инстанцирует(Инициализирует) иерархию узлов сцены. Запускает инстанс(ы) дочерних сцен. Запускает уведомление [константа Node.NOTIFICATION_INSTANCED] на корневом узле.
			</description>
		</method>
		<method name="pack">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="Node" />
			<description>
				Pack будет игнорировать все подузлы, не принадлежащие данному узлу. См. раздел [member Node.owner].
			</description>
		</method>
	</methods>
	<members>
		<member name="_bundled" type="Dictionary" setter="_set_bundled_scene" getter="_get_bundled_scene" default="{&quot;conn_count&quot;: 0,&quot;conns&quot;: PoolIntArray(  ),&quot;editable_instances&quot;: [  ],&quot;names&quot;: PoolStringArray(  ),&quot;node_count&quot;: 0,&quot;node_paths&quot;: [  ],&quot;nodes&quot;: PoolIntArray(  ),&quot;variants&quot;: [  ],&quot;version&quot;: 2}">
			Словарное представление содержимого сцены.
			Доступные ключи включают "rnames" и "variants" для ресурсов, "node_count", "nodes", "node_paths" для узлов, "editable_instances" для переопределений дочерних элементов базовой сцены, "conn_count" и "conns" для сигнальных соединений, и "version" для стиля формата PackedScene.
		</member>
	</members>
	<constants>
		<constant name="GEN_EDIT_STATE_DISABLED" value="0" enum="GenEditState">
			При передаче в [method instance] блокирует редактирование состояния сцены.
		</constant>
		<constant name="GEN_EDIT_STATE_INSTANCE" value="1" enum="GenEditState">
			При передаче в [method instance] предоставляет локальные ресурсы сцены локальной сцене.
			[b]Примечание:[/b] Доступно только в сборках редактора.
		</constant>
		<constant name="GEN_EDIT_STATE_MAIN" value="2" enum="GenEditState">
			При передаче в [method instance] предоставляет локальной сцене ресурсы локальной сцены. Только главная сцена должна получать основное состояние редактирования.
			[b]Примечание:[/b] Доступно только в сборках редактора.
		</constant>
		<constant name="GEN_EDIT_STATE_MAIN_INHERITED" value="3" enum="GenEditState">
			Аналогично [constant GEN_EDIT_STATE_MAIN], но для случая, когда сцена инстансируется как основа другой сцены.
			[b]Примечание:[/b] Доступно только в сборках редактора.
		</constant>
	</constants>
</class>
