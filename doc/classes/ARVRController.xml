<?xml version="1.0" encoding="UTF-8" ?>
<class name="ARVRController" inherits="Spatial" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Пространственный узел, представляющий пространственно отслеживаемый контроллер.
	</brief_description>
	<description>
		Это вспомогательный пространственный узел, связанный с отслеживанием контроллеров. Он также предлагает несколько удобных переходов к состоянию кнопок и т.п. на контроллерах.
		Контроллеры связаны между собой по их ID. Узлы контроллеров можно создавать до того, как контроллеры станут доступны. Если в игре всегда используются два контроллера (по одному на каждую руку), то можно заранее определить контроллеры с ID 1 и 2; они станут активными, как только контроллеры будут определены. Если предполагается использование дополнительных контроллеров, то следует отреагировать на сигналы и добавить в сцену узлы ARVRController.
		Положение узла контроллера автоматически обновляется сервером [ARVRServer]. Это делает данный узел идеальным для добавления дочерних узлов для визуализации контроллера.
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/vr/index.html</link>
	</tutorials>
	<methods>
		<method name="get_controller_name" qualifiers="const">
			<return type="String" />
			<description>
				Если он активен, возвращается имя связанного с ним контроллера, если оно предусмотрено используемым AR/VR SDK.
			</description>
		</method>
		<method name="get_hand" qualifiers="const">
			<return type="int" enum="ARVRPositionalTracker.TrackerHand" />
			<description>
				Возвращает руку, держащую данный контроллер, если она известна. См. раздел [enum ARVRPositionalTracker.TrackerHand].
			</description>
		</method>
		<method name="get_is_active" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если привязанный контроллер активен. Системы ARVR пытаются отслеживать активные контроллеры.
			</description>
		</method>
		<method name="get_joystick_axis" qualifiers="const">
			<return type="float" />
			<argument index="0" name="axis" type="int" />
			<description>
				Возвращает значение заданной оси для таких встроенных в контроллер устройств, как триггеры, тачпады и т.д.
			</description>
		</method>
		<method name="get_joystick_id" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает идентификатор объекта джойстика, привязанного к данному. Каждый контроллер, отслеживаемый [ARVRServer] и имеющий кнопки и оси, будет также зарегистрирован как джойстик в Godot. Это означает, что все обычные функции отслеживания джойстиков и отображения ввода будут работать для кнопок и осей, имеющихся на контроллерах AR/VR. Этот идентификатор предлагается исключительно в качестве информации для того, чтобы вы могли связать контроллер с его джойстиком.
			</description>
		</method>
		<method name="get_mesh" qualifiers="const">
			<return type="Mesh" />
			<description>
				Если он предоставлен [ARVRInterface], то возвращается сетка, связанная с контроллером. Это может быть использовано для визуализации контроллера.
			</description>
		</method>
		<method name="is_button_pressed" qualifiers="const">
			<return type="int" />
			<argument index="0" name="button" type="int" />
			<description>
				Возвращает [code]true[/code], если кнопка с индексом [code]button[/code] нажата. См. раздел [enum JoystickList], в частности, константы [code]JOY_VR_*[/code].
			</description>
		</method>
	</methods>
	<members>
		<member name="controller_id" type="int" setter="set_controller_id" getter="get_controller_id" default="1">
			Идентификатор контроллера.
			Идентификатор контроллера, равный 0, является несвязанным и всегда приводит к неактивному узлу. ID контроллера 1 резервируется для первого контроллера, который идентифицирует себя как левый контроллер, а ID 2 - для первого контроллера, который идентифицирует себя как правый контроллер.
			Для любого другого контроллера, обнаруженного сервером [ARVRServer], мы продолжаем использовать идентификатор контроллера 3.
			При выключении контроллера его слот освобождается. Таким образом, контроллеры будут сохранять один и тот же ID даже при отключении контроллеров с более низкими ID.
		</member>
		<member name="rumble" type="float" setter="set_rumble" getter="get_rumble" default="0.0">
			Степень вибрации контроллера. Варьируется от [code]0.0[/code] до [code]1.0[/code]. При изменении обновляется [member ARVRPositionalTracker.rumble].
			Это свойство полезно использовать для анимации, если требуется, чтобы контроллер вибрировал в течение ограниченного времени.
		</member>
	</members>
	<signals>
		<signal name="button_pressed">
			<argument index="0" name="button" type="int" />
			<description>
				Выдается при нажатии кнопки на данном контроллере.
			</description>
		</signal>
		<signal name="button_release">
			<argument index="0" name="button" type="int" />
			<description>
				Выдается при отпускании кнопки на данном контроллереed.
			</description>
		</signal>
		<signal name="mesh_updated">
			<argument index="0" name="mesh" type="Mesh" />
			<description>
				Выдается, когда меняется сетка, связанная с контроллером, или когда она становится доступной. В общем случае это будет статическая сетка после того, как она станет доступной.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
