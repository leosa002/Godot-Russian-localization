<?xml version="1.0" encoding="UTF-8" ?>
<class name="Tween" inherits="Node" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Плавно анимирует свойства узла с течением времени.
	</brief_description>
	<description>
		Твины полезны для анимации, в которой требуется интерполировать числовое свойство в диапазоне значений. Название [i]tween[/i] происходит от [i]in-betweening[/i](Промежуточный кадр) - техники анимации, когда вы задаете [i]ключевые кадры[/i], а компьютер интерполирует кадры, которые появляются между ними.
		[Tween] больше подходит, чем [AnimationPlayer], для анимации, в которой вы не знаете заранее конечных значений. Например, интерполяция динамически выбранного значения зума камеры лучше всего выполняется с помощью узла [Tween]; сделать то же самое с помощью узла [AnimationPlayer] будет сложно.
		Вот краткий пример использования, который заставляет 2D-узел плавно перемещаться между двумя позициями:
		[codeblock]
		var tween = get_node("Tween")
		tween.interpolate_property($Node2D, "position",
		        Vector2(0, 0), Vector2(100, 100), 1,
		        Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
		tween.start()
		[/codeblock]
		Многие методы требуют указания имени свойства, например [code]"position"[/code] выше. Вы можете найти правильное имя свойства, наведя курсор на него в Инспекторе. Вы также можете указать компоненты свойства напрямую, используя [code]"property:component"[/code] (например, [code]position:x[/code]), и тогда оно будет применяться только к этому конкретному компоненту.
		Многие методы принимают [code]trans_type[/code] и [code]ease_type[/code]. Первый принимает константу [enum TransitionType] и указывает на способ обработки времени анимации (примеры см. на [url=https://easings.net/]easings.net[/url]). Вторая принимает константу [enum EaseType] и определяет, где [code]trans_type[/code] применяется к интерполяции (в начале, в конце или в обоих случаях). Если вы не знаете, какой переход и смягчение выбрать, вы можете попробовать разные константы [enum TransitionType] с [constant EASE_IN_OUT], и использовать ту, которая выглядит лучше всего.
		[url=https://raw.githubusercontent.com/godotengine/godot-docs/3.5/img/tween_cheatsheet.png]Tween easing and transition types cheatsheet[/url]
		[b]Примечание:[/b] Методы Tween возвращают [code]false[/code], если запрошенная операция не может быть выполнена.
		[b]Примечание:[/b] Альтернативный метод создания твинов, не требующий использования узлов, см. в [SceneTreeTween].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="follow_method">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="method" type="String" />
			<argument index="2" name="initial_val" type="Variant" />
			<argument index="3" name="target" type="Object" />
			<argument index="4" name="target_method" type="String" />
			<argument index="5" name="duration" type="float" />
			<argument index="6" name="trans_type" type="int" enum="Tween.TransitionType" default="0" />
			<argument index="7" name="ease_type" type="int" enum="Tween.EaseType" default="2" />
			<argument index="8" name="delay" type="float" default="0" />
			<description>
				Выполняет [code]method[/code] [code]object[/code] и применяет возвращенное значение к [code]target_method[/code] [code]цели[/code], начиная с [code]initial_val[/code] в течение [code]duration[/code](Продолжительности) секунд, [code]delay[/code](Задержке) позже. Методы вызываются с последовательными значениями.
				Используйте [enum TransitionType] для параметров [code]trans_type[/code] и [enum EaseType] для [code]ease_type[/code]. Эти значения управляют временем и направлением интерполяции. Более подробную информацию см. в описании класса.
			</description>
		</method>
		<method name="follow_property">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="property" type="NodePath" />
			<argument index="2" name="initial_val" type="Variant" />
			<argument index="3" name="target" type="Object" />
			<argument index="4" name="target_property" type="NodePath" />
			<argument index="5" name="duration" type="float" />
			<argument index="6" name="trans_type" type="int" enum="Tween.TransitionType" default="0" />
			<argument index="7" name="ease_type" type="int" enum="Tween.EaseType" default="2" />
			<argument index="8" name="delay" type="float" default="0" />
			<description>
				Следит за [code]свойством[/code] [code]объекта[/code] и применяет его к [code]target_property[/code] [code]цели[/code], начиная с [code]initial_val[/code] в течение [code]duration[/code] секунд, [code]delay[/code] секунд спустя.
				Используйте [enum TransitionType] для параметров [code]trans_type[/code] и [enum EaseType] для [code]ease_type[/code]. Эти значения управляют временем и направлением интерполяции. Более подробную информацию см. в описании класса.
			</description>
		</method>
		<method name="get_runtime" qualifiers="const">
			<return type="float" />
			<description>
				Возвращает общее время, необходимое для завершения всех твинов. Если у вас есть два твина, один из которых длится 10 секунд, а другой - 20 секунд, то возвращается значение 20 секунд, так как к этому времени все твины уже закончатся.
			</description>
		</method>
		<method name="interpolate_callback">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="duration" type="float" />
			<argument index="2" name="callback" type="String" />
			<argument index="3" name="arg1" type="Variant" default="null" />
			<argument index="4" name="arg2" type="Variant" default="null" />
			<argument index="5" name="arg3" type="Variant" default="null" />
			<argument index="6" name="arg4" type="Variant" default="null" />
			<argument index="7" name="arg5" type="Variant" default="null" />
			<argument index="8" name="arg6" type="Variant" default="null" />
			<argument index="9" name="arg7" type="Variant" default="null" />
			<argument index="10" name="arg8" type="Variant" default="null" />
			<description>
				Вызывает [code]callback[/code](обратный вызов) объекта [code]object[/code] по истечении [code]duration[/code]. [code]arg1[/code]-[code]arg5[/code] - аргументы, передаваемые обратному вызову.
			</description>
		</method>
		<method name="interpolate_deferred_callback">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="duration" type="float" />
			<argument index="2" name="callback" type="String" />
			<argument index="3" name="arg1" type="Variant" default="null" />
			<argument index="4" name="arg2" type="Variant" default="null" />
			<argument index="5" name="arg3" type="Variant" default="null" />
			<argument index="6" name="arg4" type="Variant" default="null" />
			<argument index="7" name="arg5" type="Variant" default="null" />
			<argument index="8" name="arg6" type="Variant" default="null" />
			<argument index="9" name="arg7" type="Variant" default="null" />
			<argument index="10" name="arg8" type="Variant" default="null" />
			<description>
				Вызывает [code]callback[/code] [code]объекта[/code] по истечении [code]длительности[/code] в главном потоке (аналогично [методу Object.call_deferred]). [code]arg1[/code]-[code]arg5[/code] - аргументы, передаваемые обратному вызову.
			</description>
		</method>
		<method name="interpolate_method">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="method" type="String" />
			<argument index="2" name="initial_val" type="Variant" />
			<argument index="3" name="final_val" type="Variant" />
			<argument index="4" name="duration" type="float" />
			<argument index="5" name="trans_type" type="int" enum="Tween.TransitionType" default="0" />
			<argument index="6" name="ease_type" type="int" enum="Tween.EaseType" default="2" />
			<argument index="7" name="delay" type="float" default="0" />
			<description>
				Анимирует [code]метод[/code] [code]объекта[/code] от [code]начального_значения[/code] до [code]конечного_значения[/code] на [code]длительность[/code] секунд, [code]задержка[/code] секунд спустя. Методы вызываются с последовательными значениями.
				Используйте [enum TransitionType] для параметров [code]trans_type[/code] и [enum EaseType] для [code]ease_type[/code]. Эти значения управляют временем и направлением интерполяции. Более подробную информацию см. в описании класса.
			</description>
		</method>
		<method name="interpolate_property">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="property" type="NodePath" />
			<argument index="2" name="initial_val" type="Variant" />
			<argument index="3" name="final_val" type="Variant" />
			<argument index="4" name="duration" type="float" />
			<argument index="5" name="trans_type" type="int" enum="Tween.TransitionType" default="0" />
			<argument index="6" name="ease_type" type="int" enum="Tween.EaseType" default="2" />
			<argument index="7" name="delay" type="float" default="0" />
			<description>
				Анимирует [code]свойство[/code] [code]объекта[/code] от [code]начального_значения[/code] до [code]конечного_значения[/code] на [code]длительность[/code] секунд, [code]задержка[/code] секунд спустя. При установке начального значения в [code]null[/code] используется текущее значение свойства.
				Используйте [enum TransitionType] для параметров [code]trans_type[/code] и [enum EaseType] для [code]ease_type[/code]. Эти значения управляют временем и направлением интерполяции. Более подробную информацию см. в описании класса.
			</description>
		</method>
		<method name="is_active" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если в данный момент запущены какие-либо твины.
				[b]Примечание:[/b] Этот метод не учитывает твины, которые закончились.
			</description>
		</method>
		<method name="remove">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="key" type="String" default="&quot;&quot;" />
			<description>
				Останавливает анимацию и удаляет твин, указав его объект и пару свойств/методов. По умолчанию удаляются все твины, если не указан [code]key[/code].
			</description>
		</method>
		<method name="remove_all">
			<return type="bool" />
			<description>
				Останавливает анимацию и удаляет все твины.
			</description>
		</method>
		<method name="reset">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="key" type="String" default="&quot;&quot;" />
			<description>
				Сбрасывает твин к его начальному значению (заданному, а не тому, которое было до твина), учитывая его объект и пару свойств/методов. По умолчанию сбрасываются все твины, если не указан [code]key[/code].
			</description>
		</method>
		<method name="reset_all">
			<return type="bool" />
			<description>
				Сбрасывает все твины к их начальным значениям (заданным, а не тем, которые были до твина).
			</description>
		</method>
		<method name="resume">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="key" type="String" default="&quot;&quot;" />
			<description>
				Продолжает анимировать остановленный твин, указав его объект и пару свойств/методов. По умолчанию все твины возобновляются, если не указан [code]key[/code].
			</description>
		</method>
		<method name="resume_all">
			<return type="bool" />
			<description>
				Продолжает анимировать все остановленные твины.
			</description>
		</method>
		<method name="seek">
			<return type="bool" />
			<argument index="0" name="time" type="float" />
			<description>
				Устанавливает интерполяцию на заданное [code]время[/code] в секундах.
			</description>
		</method>
		<method name="set_active">
			<return type="void" />
			<argument index="0" name="active" type="bool" />
			<description>
				Активирует/деактивирует твин. См. также [method stop_all] и [method resume_all].
			</description>
		</method>
		<method name="start">
			<return type="bool" />
			<description>
				Запускает твин. Вы можете задать анимацию как до, так и после этого.
			</description>
		</method>
		<method name="stop">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="key" type="String" default="&quot;&quot;" />
			<description>
				Останавливает твин, указав его объект и пару свойств/методов. По умолчанию останавливаются все твины, если не указан [code]key[/code].
			</description>
		</method>
		<method name="stop_all">
			<return type="bool" />
			<description>
				Остановите анимацию всех твинов.
			</description>
		</method>
		<method name="targeting_method">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="method" type="String" />
			<argument index="2" name="initial" type="Object" />
			<argument index="3" name="initial_method" type="String" />
			<argument index="4" name="final_val" type="Variant" />
			<argument index="5" name="duration" type="float" />
			<argument index="6" name="trans_type" type="int" enum="Tween.TransitionType" default="0" />
			<argument index="7" name="ease_type" type="int" enum="Tween.EaseType" default="2" />
			<argument index="8" name="delay" type="float" default="0" />
			<description>
				Анимирует [code]метод[/code] [code]объекта[/code] от значения, возвращаемого [code]initial_method[/code], до [code]final_val[/code] на [code]duration[/code] секунд, [code]delay[/code] секунд спустя. Методы анимируются, если вызывать их с последовательными значениями.
				Используйте [enum TransitionType] для параметров [code]trans_type[/code] и [enum EaseType] для [code]ease_type[/code]. Эти значения управляют временем и направлением интерполяции. Более подробную информацию см. в описании класса.
			</description>
		</method>
		<method name="targeting_property">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="property" type="NodePath" />
			<argument index="2" name="initial" type="Object" />
			<argument index="3" name="initial_val" type="NodePath" />
			<argument index="4" name="final_val" type="Variant" />
			<argument index="5" name="duration" type="float" />
			<argument index="6" name="trans_type" type="int" enum="Tween.TransitionType" default="0" />
			<argument index="7" name="ease_type" type="int" enum="Tween.EaseType" default="2" />
			<argument index="8" name="delay" type="float" default="0" />
			<description>
				Анимирует [code]свойство[/code] [code]объекта[/code] от текущего значения свойства [code]initial_val[/code] [code]initial[/code] до [code]final_val[/code] на [code]duration[/code] секунд, [code]delay[/code] секунд спустя.
				Используйте [enum TransitionType] для параметров [code]trans_type[/code] и [enum EaseType] для [code]ease_type[/code]. Эти значения управляют временем и направлением интерполяции. Более подробную информацию см. в описании класса.
			</description>
		</method>
		<method name="tell" qualifiers="const">
			<return type="float" />
			<description>
				Возвращает текущее время выполнения твина.
			</description>
		</method>
	</methods>
	<members>
		<member name="playback_process_mode" type="int" setter="set_tween_process_mode" getter="get_tween_process_mode" enum="Tween.TweenProcessMode" default="1">
			Поток процесса анимации твина. См. раздел [enum TweenProcessMode].
		</member>
		<member name="playback_speed" type="float" setter="set_speed_scale" getter="get_speed_scale" default="1.0">
			Множитель скорости твина. Например, установите [code]1.0[/code] для нормальной скорости, [code]2.0[/code] для скорости в два раза больше нормальной или [code]0.5[/code] для половины нормальной скорости. Значение [code]0[/code] приостанавливает анимацию, но для этого см. также [method set_active] или [method stop_all].
		</member>
		<member name="repeat" type="bool" setter="set_repeat" getter="is_repeat" default="false">
			Если [code]true[/code], то твин зацикливается.
		</member>
	</members>
	<signals>
		<signal name="tween_all_completed">
			<description>
				Выдается, когда все процессы в твине завершаются.
			</description>
		</signal>
		<signal name="tween_completed">
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="key" type="NodePath" />
			<description>
				Выдается при завершении твина.
			</description>
		</signal>
		<signal name="tween_started">
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="key" type="NodePath" />
			<description>
				Выдается при запуске твина.
			</description>
		</signal>
		<signal name="tween_step">
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="key" type="NodePath" />
			<argument index="2" name="elapsed" type="float" />
			<argument index="3" name="value" type="Object" />
			<description>
				Выдается на каждом шаге анимации.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="TWEEN_PROCESS_PHYSICS" value="0" enum="TweenProcessMode">
			Твин обновляется с помощью обратного вызова [code]_physics_process[/code].
		</constant>
		<constant name="TWEEN_PROCESS_IDLE" value="1" enum="TweenProcessMode">
			Твин обновляется с помощью обратного вызова [code]_process[/code].
		</constant>
		<constant name="TRANS_LINEAR" value="0" enum="TransitionType">
			Анимация интерполируется линейно.
		</constant>
		<constant name="TRANS_SINE" value="1" enum="TransitionType">
			Анимация интерполируется с помощью функции синуса.
		</constant>
		<constant name="TRANS_QUINT" value="2" enum="TransitionType">
			Анимация интерполируется с помощью квинтической функции (с точностью до 5).
		</constant>
		<constant name="TRANS_QUART" value="3" enum="TransitionType">
			Анимация интерполируется с помощью квартетной (в степени 4) функции.
		</constant>
		<constant name="TRANS_QUAD" value="4" enum="TransitionType">
			Анимация интерполируется с помощью квадратичной (в степени 2) функции.
		</constant>
		<constant name="TRANS_EXPO" value="5" enum="TransitionType">
			Анимация интерполируется с помощью экспоненциальной (в степени x) функции.
		</constant>
		<constant name="TRANS_ELASTIC" value="6" enum="TransitionType">
			Анимация интерполируется с упругостью, вихляя по краям.
		</constant>
		<constant name="TRANS_CUBIC" value="7" enum="TransitionType">
			Анимация интерполируется с помощью кубической (в степени 3) функции.
		</constant>
		<constant name="TRANS_CIRC" value="8" enum="TransitionType">
			Анимация интерполируется с помощью функции, использующей квадратные корни.
		</constant>
		<constant name="TRANS_BOUNCE" value="9" enum="TransitionType">
			Анимация интерполируется подпрыгиванием в конце.
		</constant>
		<constant name="TRANS_BACK" value="10" enum="TransitionType">
			Анимация интерполируется, отступая на концах.
		</constant>
		<constant name="EASE_IN" value="0" enum="EaseType">
			Интерполяция начинается медленно и ускоряется к концу.
		</constant>
		<constant name="EASE_OUT" value="1" enum="EaseType">
			Интерполяция начинается быстро и замедляется к концу.
		</constant>
		<constant name="EASE_IN_OUT" value="2" enum="EaseType">
			Комбинация [constant EASE_IN] и [constant EASE_OUT]. Интерполяция выполняется медленнее всего на обоих концах.
		</constant>
		<constant name="EASE_OUT_IN" value="3" enum="EaseType">
			Комбинация [constant EASE_IN] и [constant EASE_OUT]. Интерполяция выполняется быстрее всего на обоих концах.
		</constant>
	</constants>
</class>
