<?xml version="1.0" encoding="UTF-8" ?>
<class name="RigidBody2D" inherits="PhysicsBody2D" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Тело, управляемое физическим движком 2D.
	</brief_description>
	<description>
		Этот узел реализует симуляцию 2D-физики. Вы не управляете RigidBody2D напрямую. Вместо этого вы прикладываете к нему силы (гравитацию, импульсы и т.д.), а физическая симуляция рассчитывает результирующее движение на основе его массы, трения и других физических свойств.
		У RigidBody2D есть 4 режима поведения [member mode]: Rigid, Static, Character и Kinematic.
		[b]Примечание:[/b] Не следует изменять [code]позицию[/code] или [code]линейную_скорость[/code] RigidBody2D каждый кадр или даже очень часто. Если вам нужно напрямую повлиять на состояние тела, используйте [метод _integrate_forces], который позволяет получить прямой доступ к состоянию физики.
		Также не забывайте, что физические тела управляют собственными трансформациями, которые перезаписывают заданные вами. Поэтому любая прямая или косвенная трансформация (включая масштабирование узла или его родителя) будет видна только в редакторе и немедленно сбросится во время выполнения.
		Если вам нужно переопределить поведение физики по умолчанию или добавить трансформацию во время выполнения, вы можете написать пользовательскую интеграцию силы. См. раздел [member custom_integrator].
		Центр масс всегда находится в начале узла без учета смещения центроида [CollisionShape2D].
	</description>
	<tutorials>
		<link title="2D Physics Platformer Demo">https://godotengine.org/asset-library/asset/119</link>
		<link title="Instancing Demo">https://godotengine.org/asset-library/asset/148</link>
	</tutorials>
	<methods>
		<method name="_integrate_forces" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="state" type="Physics2DDirectBodyState" />
			<description>
				Позволяет считывать и безопасно изменять состояние симуляции для объекта. Используйте его вместо [method Node._physics_process], если вам нужно напрямую изменить [code]положение[/code] или другие физические свойства тела. По умолчанию он работает в дополнение к обычному поведению физики, но [member custom_integrator] позволяет отключить поведение по умолчанию и написать пользовательскую интеграцию силы для тела.
			</description>
		</method>
		<method name="add_central_force">
			<return type="void" />
			<argument index="0" name="force" type="Vector2" />
			<description>
				Добавляет постоянную направленную силу, не влияя на вращение.
			</description>
		</method>
		<method name="add_force">
			<return type="void" />
			<argument index="0" name="offset" type="Vector2" />
			<argument index="1" name="force" type="Vector2" />
			<description>
				Добавляет позиционированную силу к телу. Сила и смещение от начала тела задаются в глобальных координатах.
			</description>
		</method>
		<method name="add_torque">
			<return type="void" />
			<argument index="0" name="torque" type="float" />
			<description>
				Добавляет постоянную вращательную силу.
			</description>
		</method>
		<method name="apply_central_impulse">
			<return type="void" />
			<argument index="0" name="impulse" type="Vector2" />
			<description>
				Применяет направленный импульс, не влияя на вращение.
			</description>
		</method>
		<method name="apply_impulse">
			<return type="void" />
			<argument index="0" name="offset" type="Vector2" />
			<argument index="1" name="impulse" type="Vector2" />
			<description>
				Применяет позиционированный импульс к телу. Импульс не зависит от времени! Применение импульса каждый кадр приведет к возникновению силы, зависящей от кадра. По этой причине его следует использовать только при моделировании однократных ударов (в противном случае используйте функции "_force"). Позиция использует вращение глобальной системы координат, но центрируется в начале координат объекта.
			</description>
		</method>
		<method name="apply_torque_impulse">
			<return type="void" />
			<argument index="0" name="torque" type="float" />
			<description>
				Прикладывает к телу вращательный импульс.
			</description>
		</method>
		<method name="get_colliding_bodies" qualifiers="const">
			<return type="Array" />
			<description>
				Возвращает список тел, столкнувшихся с данным телом. Требуется, чтобы [member contact_monitor] был установлен в [code]true[/code] и [member contacts_reported] был установлен достаточно высоко, чтобы обнаружить все столкновения.
				[b]Примечание:[/b] Результат этого теста не будет немедленным после перемещения объектов. Для повышения производительности список столкновений обновляется один раз за кадр и перед шагом физики. Рассмотрите возможность использования сигналов вместо этого.
			</description>
		</method>
		<method name="set_axis_velocity">
			<return type="void" />
			<argument index="0" name="axis_velocity" type="Vector2" />
			<description>
				Устанавливает скорость тела по заданной оси. Скорость по заданной оси вектора будет установлена как заданная длина вектора. Это полезно для поведения при прыжках.
			</description>
		</method>
		<method name="test_motion">
			<return type="bool" />
			<argument index="0" name="motion" type="Vector2" />
			<argument index="1" name="infinite_inertia" type="bool" default="true" />
			<argument index="2" name="margin" type="float" default="0.08" />
			<argument index="3" name="result" type="Physics2DTestMotionResult" default="null" />
			<description>
				Возвращает [code]true[/code], если движение по заданному вектору приведет к столкновению. [code]margin[/code] увеличивает размер фигур, участвующих в обнаружении столкновения, а [code]result[/code] - это объект типа [Physics2DTestMotionResult], который содержит дополнительную информацию о столкновении (если таковое произошло).
			</description>
		</method>
	</methods>
	<members>
		<member name="angular_damp" type="float" setter="set_angular_damp" getter="get_angular_damp" default="-1.0">
			Демпфирует угловую скорость [member angular_velocity] тела. Если [code]-1[/code], тело будет использовать [b]Угловую демпфирующую силу по умолчанию[/b], определенную в [b]Project &gt; Project Settings &gt; Physics &gt; 2d[/b]. Если значение больше, чем [code]-1[/code], оно будет добавлено к значению проекта по умолчанию.
			Дополнительные сведения о демпфировании см. в [member ProjectSettings.physics/2d/default_angular_damp].
		</member>
		<member name="angular_velocity" type="float" setter="set_angular_velocity" getter="get_angular_velocity" default="0.0">
			Скорость вращения тела в [i]радианах[/i] в секунду.
		</member>
		<member name="applied_force" type="Vector2" setter="set_applied_force" getter="get_applied_force" default="Vector2( 0, 0 )">
			Суммарная приложенная сила тела.
		</member>
		<member name="applied_torque" type="float" setter="set_applied_torque" getter="get_applied_torque" default="0.0">
			Суммарный приложенный момент тела.
		</member>
		<member name="bounce" type="float" setter="set_bounce" getter="get_bounce">
			Подпрыгиваемость тела. Значения варьируются от [code]0[/code] (отсутствие отскока) до [code]1[/code] (полный отскок).
			Утратило силу, вместо него используйте [member PhysicsMaterial.bounce] через [member physics_material_override].
		</member>
		<member name="can_sleep" type="bool" setter="set_can_sleep" getter="is_able_to_sleep" default="true">
			Если [code]true[/code], тело может перейти в режим сна, когда нет движения. См. раздел [member sleeping].
			[b]Примечание:[/b] RigidBody2D никогда не перейдет в спящий режим автоматически, если его [member mode] - [constant MODE_CHARACTER]. Его можно перевести в спящий режим вручную, установив свойство [member sleeping] в [code]true[/code].
		</member>
		<member name="contact_monitor" type="bool" setter="set_contact_monitor" getter="is_contact_monitor_enabled" default="false">
			Если [code]true[/code], тело будет издавать сигналы при столкновении с другим RigidBody2D. См. также [member contacts_reported].
		</member>
		<member name="contacts_reported" type="int" setter="set_max_contacts_reported" getter="get_max_contacts_reported" default="0">
			Максимальное количество контактов, которые будут записаны. Требуется, чтобы для параметра [member contact_monitor] было установлено значение [code]true[/code].
			[b]Примечание:[/b] Количество контактов отличается от количества столкновений. Столкновения между параллельными гранями приведут к двум контактам (по одному на каждом конце).
		</member>
		<member name="continuous_cd" type="int" setter="set_continuous_collision_detection_mode" getter="get_continuous_collision_detection_mode" enum="RigidBody2D.CCDMode" default="0">
			Режим непрерывного обнаружения столкновений.
			Непрерывное обнаружение столкновений пытается предсказать место столкновения движущегося тела, вместо того чтобы перемещать его и корректировать его движение после столкновения. Непрерывное обнаружение столкновений происходит медленнее, но более точно и пропускает меньше столкновений с маленькими и быстро движущимися объектами. Доступны методы Raycasting и Shapecasting. Подробности см. в [enum CCDMode].
		</member>
		<member name="custom_integrator" type="bool" setter="set_use_custom_integrator" getter="is_using_custom_integrator" default="false">
			Если [code]true[/code], интеграция внутренних сил для этого тела отключена. Кроме реакции на столкновения, тело будет двигаться только так, как определено функцией [method _integrate_forces].
		</member>
		<member name="friction" type="float" setter="set_friction" getter="get_friction">
			Трение тела. Значения варьируются от [code]0[/code] (без трения) до [code]1[/code] (максимальное трение).
			Утратило силу, вместо него используйте [member PhysicsMaterial.friction] через [member physics_material_override].
		</member>
		<member name="gravity_scale" type="float" setter="set_gravity_scale" getter="get_gravity_scale" default="1.0">
			Умножает силу тяжести, приложенную к телу. Гравитация тела вычисляется из значения [b]Default Gravity[/b] в [b]Project &gt; Project Settings &gt; Physics &gt; 2d[/b] и/или любого дополнительного вектора гравитации, применяемого [Area2D]s.
		</member>
		<member name="inertia" type="float" setter="set_inertia" getter="get_inertia">
			Момент инерции тела. Это как масса, но для вращения: он определяет, какой крутящий момент требуется для вращения тела. Момент инерции обычно вычисляется автоматически из массы и формы, но эта функция позволяет задать собственное значение. Чтобы вернуться к автоматическому вычислению момента инерции, установите 0.
		</member>
		<member name="linear_damp" type="float" setter="set_linear_damp" getter="get_linear_damp" default="-1.0">
			Демпфирует [member linear_velocity] тела. Если [code]-1[/code], тело будет использовать [b]Default Linear Damp[/b] в [b]Project &gt; Project Settings &gt; Physics &gt; 2d[/b]. Если значение больше, чем [code]-1[/code], оно будет добавлено к значению проекта по умолчанию.
			Дополнительные сведения о демпфировании см. в [member ProjectSettings.physics/2d/default_linear_damp].
		</member>
		<member name="linear_velocity" type="Vector2" setter="set_linear_velocity" getter="get_linear_velocity" default="Vector2( 0, 0 )">
			Линейная скорость тела в пикселях в секунду. Может использоваться эпизодически, но [b]не устанавливайте это значение каждый кадр[/b], потому что физика может выполняться в другом потоке и работать на другой гранулярности. Используйте [метод _integrate_forces] в качестве цикла процесса для точного контроля состояния тела.
		</member>
		<member name="mass" type="float" setter="set_mass" getter="get_mass" default="1.0">
			Масса тела.
		</member>
		<member name="mode" type="int" setter="set_mode" getter="get_mode" enum="RigidBody2D.Mode" default="0">
			Режим тела. Возможные значения см. в [enum Mode].
		</member>
		<member name="physics_material_override" type="PhysicsMaterial" setter="set_physics_material_override" getter="get_physics_material_override">
			Переопределение материала физики для тела.
			Если этому свойству присвоен материал, то он будет использоваться вместо любого другого физического материала, например, унаследованного.
		</member>
		<member name="sleeping" type="bool" setter="set_sleeping" getter="is_sleeping" default="false">
			Если [code]true[/code], тело не будет двигаться и рассчитывать силы, пока его не разбудит другое тело, например, в результате столкновения или с помощью методов [method apply_impulse] или [method add_force].
		</member>
		<member name="weight" type="float" setter="set_weight" getter="get_weight" default="9.8">
			Вес тела зависит от его массы и значения [b]Default Gravity[/b] в [b]Project &gt; Project Settings &gt; Physics &gt; 2d[/b].
		</member>
	</members>
	<signals>
		<signal name="body_entered">
			<argument index="0" name="body" type="Node" />
			<description>
				Выдается при столкновении с другим [PhysicsBody2D] или [TileMap]. Требуется, чтобы [member contact_monitor] был установлен в [code]true[/code] и [member contacts_reported] был достаточно высок, чтобы обнаружить все столкновения. [TileMap] обнаруживаются, если в [TileSet] есть [Shape2D]-коллизии.
				[code]body[/code] узел [Node], если он существует в дереве, другого [PhysicsBody2D] или [TileMap].
			</description>
		</signal>
		<signal name="body_exited">
			<argument index="0" name="body" type="Node" />
			<description>
				Выдается, когда заканчивается столкновение с другим [PhysicsBody2D] или [TileMap]. Требуется, чтобы [member contact_monitor] был установлен в [code]true[/code], а [member contacts_reported] был достаточно высок, чтобы обнаружить все столкновения. [TileMap] обнаруживаются, если в [TileSet] есть [Shape2D]-коллизии.
				[code]body[/code] узел [Node], если он существует в дереве, другого [PhysicsBody2D] или [TileMap].
			</description>
		</signal>
		<signal name="body_shape_entered">
			<argument index="0" name="body_rid" type="RID" />
			<argument index="1" name="body" type="Node" />
			<argument index="2" name="body_shape_index" type="int" />
			<argument index="3" name="local_shape_index" type="int" />
			<description>
				Испускается, когда один из [Shape2D] этого RigidBody2D сталкивается с другим [PhysicsBody2D] или [Shape2D] [TileMap]. Требуется, чтобы [member contact_monitor] был установлен в [code]true[/code] и [member contacts_reported] был установлен достаточно высоко, чтобы обнаружить все столкновения. Коллизии [TileMap] обнаруживаются, если в [TileSet] есть коллизии [Shape2D].
				[code]body_rid[/code] [RID] другого [PhysicsBody2D] или [CollisionObject2D] набора [TileSet], используемого [Physics2DServer].
				[code]body[/code] узел [Node], если он существует в дереве, другого [PhysicsBody2D] или [TileMap].
				[code]body_shape_index[/code] индекс [Shape2D] другого [PhysicsBody2D] или [TileMap], используемого [Physics2DServer]. Получите узел [CollisionShape2D] с помощью [code]body.shape_owner_get_owner(body_shape_index)[/code].
				[code]local_shape_index[/code] индекс [Shape2D] этого RigidBody2D, используемый [Physics2DServer]. Получите узел [CollisionShape2D] с помощью [code]self.shape_owner_get_owner(local_shape_index)[/code].
			</description>
		</signal>
		<signal name="body_shape_exited">
			<argument index="0" name="body_rid" type="RID" />
			<argument index="1" name="body" type="Node" />
			<argument index="2" name="body_shape_index" type="int" />
			<argument index="3" name="local_shape_index" type="int" />
			<description>
				Испускается, когда заканчивается столкновение между одним из [Shape2D] этого RigidBody2D и другим [PhysicsBody2D] или [Shape2D] [TileMap]. Требуется, чтобы [member contact_monitor] был установлен в [code]true[/code], а [member contacts_reported] был установлен достаточно высоко, чтобы обнаружить все столкновения. Коллизии [TileMap] обнаруживаются, если в [TileSet] есть коллизии [Shape2D].
				[code]body_rid[/code] [RID] другого [PhysicsBody2D] или [CollisionObject2D] набора [TileSet], используемого [Physics2DServer].
				[code]body[/code] узел [Node], если он существует в дереве, другого [PhysicsBody2D] или [TileMap].
				[code]body_shape_index[/code] индекс [Shape2D] другого [PhysicsBody2D] или [TileMap], используемого [Physics2DServer]. Получите узел [CollisionShape2D] с помощью [code]body.shape_owner_get_owner(body_shape_index)[/code].
				[code]local_shape_index[/code] индекс [Shape2D] этого RigidBody2D, используемый [Physics2DServer]. Получите узел [CollisionShape2D] с помощью [code]self.shape_owner_get_owner(local_shape_index)[/code].
			</description>
		</signal>
		<signal name="sleeping_state_changed">
			<description>
				Выдается, когда физический движок изменяет состояние сна тела.
				[b]Примечание:[/b] Изменение значения [member sleeping] не вызовет этот сигнал. Он подается только в том случае, если физический движок изменяет состояние сна или используется [code]emit_signal("sleeping_state_changed")[/code].
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="MODE_RIGID" value="0" enum="Mode">
			Жесткий режим. Тело ведет себя как физический объект. Оно сталкивается с другими телами и реагирует на приложенные к нему силы. Это режим по умолчанию.
		</constant>
		<constant name="MODE_STATIC" value="1" enum="Mode">
			Статический режим. Тело ведет себя как [StaticBody2D] и не двигается.
		</constant>
		<constant name="MODE_CHARACTER" value="2" enum="Mode">
			Режим персонажа. Аналогичен [constant MODE_RIGID], но тело не может вращаться.
		</constant>
		<constant name="MODE_KINEMATIC" value="3" enum="Mode">
			Kinematic mode. The body behaves like a [KinematicBody2D], and must be moved by code.
		</constant>
		<constant name="CCD_MODE_DISABLED" value="0" enum="CCDMode">
			Непрерывное обнаружение столкновений отключено. Это самый быстрый способ обнаружения столкновений тел, но он может пропустить небольшие, быстро движущиеся объекты.
		</constant>
		<constant name="CCD_MODE_CAST_RAY" value="1" enum="CCDMode">
			Непрерывное обнаружение столкновений включено с помощью лучевого кастинга. Это быстрее, чем шейп-кастинг, но менее точно.
		</constant>
		<constant name="CCD_MODE_CAST_SHAPE" value="2" enum="CCDMode">
			Непрерывное обнаружение столкновений с помощью шейп-костинга. Это самый медленный метод CCD и самый точный.
		</constant>
	</constants>
</class>
