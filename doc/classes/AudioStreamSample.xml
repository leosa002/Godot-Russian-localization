<?xml version="1.0" encoding="UTF-8" ?>
<class name="AudioStreamSample" inherits="AudioStream" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Хранит аудиоданные, загруженные из WAV-файлов.
	</brief_description>
	<description>
		AudioStreamSample хранит звуковые сэмплы, загруженные из WAV-файлов. Для воспроизведения сохраненного звука используется [AudioStreamPlayer] (для непозиционного звука) или [AudioStreamPlayer2D]/[AudioStreamPlayer3D] (для позиционного звука). Звук может быть зациклен.
		Этот класс также может быть использован для хранения динамически генерируемых PCM-аудиоданных. Для процедурной генерации звука см. также [AudioStreamGenerator].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="save_to_wav">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Сохраняет AudioStreamSample в виде WAV-файла по [code]path[/code]. Сэмплы с форматом IMA ADPCM не могут быть сохранены.
				[b]Примечание:[/b] Расширение [code].wav[/code] автоматически добавляется к [code]path[/code], если оно отсутствует.
			</description>
		</method>
	</methods>
	<members>
		<member name="data" type="PoolByteArray" setter="set_data" getter="get_data" default="PoolByteArray(  )">
			Содержит аудиоданные в байтах.
			[b]Примечание:[/b] Это свойство предполагает наличие знаковых данных PCM8. Для преобразования беззнакового PCM8 в знаковый PCM8 вычтите 128 из каждого байта.
		</member>
		<member name="format" type="int" setter="set_format" getter="get_format" enum="AudioStreamSample.Format" default="0">
			Формат аудио. Значения см. в константах [enum Format].
		</member>
		<member name="loop_begin" type="int" setter="set_loop_begin" getter="get_loop_begin" default="0">
			Точка начала цикла (в количестве семплов, относительно начала семпла). Эта информация будет автоматически импортирована из WAV-файла, если таковой имеется.
		</member>
		<member name="loop_end" type="int" setter="set_loop_end" getter="get_loop_end" default="0">
			Точка окончания цикла (в количестве семплов, относительно начала семпла). Эта информация будет автоматически импортирована из WAV-файла, если таковой имеется.
		</member>
		<member name="loop_mode" type="int" setter="set_loop_mode" getter="get_loop_mode" enum="AudioStreamSample.LoopMode" default="0">
			Режим петли. Эта информация будет автоматически импортирована из WAV-файла, если таковой имеется. Значения см. в константах [enum LoopMode].
		</member>
		<member name="mix_rate" type="int" setter="set_mix_rate" getter="get_mix_rate" default="44100">
			Частота дискретизации для микширования данного звука. Более высокие значения требуют большего объема памяти, но обеспечивают лучшее качество.
			В играх обычно используются следующие частоты дискретизации: [code]11025[/code], [code]16000[/code], [code]22050[/code], [code]32000[/code], [code]44100[/code] и [code]48000[/code].
			Согласно теореме [url=https://en.wikipedia.org/wiki/Nyquist%E2%80%93Shannon_sampling_theorem]Найквиста-Шеннона о дискретизации[/url], при переходе от 40 000 Hz к 40 000 Hz нет никакой качественной разницы для человеческого слуха (поскольку большинство людей слышат только до ~20 000 Hz, а часто и меньше). Если вы используете низкочастотные звуки, например, голоса, то более низкие частоты дискретизации, такие как [code]32000[/code] или [code]22050[/code], могут быть использованы без потери качества.
		</member>
		<member name="stereo" type="bool" setter="set_stereo" getter="is_stereo" default="false">
			Если [code]true[/code], то звук будет стереофоническим.
		</member>
	</members>
	<constants>
		<constant name="FORMAT_8_BITS" value="0" enum="Format">
			8-разрядный аудиокодек.
		</constant>
		<constant name="FORMAT_16_BITS" value="1" enum="Format">
			16-разрядный аудиокодек.
		</constant>
		<constant name="FORMAT_IMA_ADPCM" value="2" enum="Format">
			Для сжатия звука используется IMA ADPCM.
		</constant>
		<constant name="LOOP_DISABLED" value="0" enum="LoopMode">
			Звук не зацикливается.
		</constant>
		<constant name="LOOP_FORWARD" value="1" enum="LoopMode">
			Аудио зацикливает данные между [member loop_begin] и [member loop_end], воспроизводя их только вперед.
		</constant>
		<constant name="LOOP_PING_PONG" value="2" enum="LoopMode">
			Аудиозапись зацикливает данные между [member loop_begin] и [member loop_end], воспроизводя их вперед-назад
		</constant>
		<constant name="LOOP_BACKWARD" value="3" enum="LoopMode">
			Аудиозапись зацикливает данные между [member loop_begin] и [member loop_end], воспроизводя их только в обратном направлении.
		</constant>
	</constants>
</class>
