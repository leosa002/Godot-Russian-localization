<?xml version="1.0" encoding="UTF-8" ?>
<class name="ArrayMesh" inherits="Mesh" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Тип [Mesh], обеспечивающий возможность построения поверхности из массивов.
	</brief_description>
	<description>
		[ArrayMesh] используется для построения [Mesh] путем задания атрибутов в виде массивов.
		Самый простой пример - создание одного треугольника:
		[codeblock]
		var vertices = PoolVector3Array()
		vertices.push_back(Vector3(0, 1, 0))
		vertices.push_back(Vector3(1, 0, 0))
		vertices.push_back(Vector3(0, 0, 1))
		# Инициализация сетки ArrayMesh.
		var arr_mesh = ArrayMesh.new()
		var arrays = []
		arrays.resize(ArrayMesh.ARRAY_MAX)
		arrays[ArrayMesh.ARRAY_VERTEX] = vertices
		# Создать сетку.
		arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
		var m = MeshInstance.new()
		m.mesh = arr_mesh
		[/codeblock]
		Экземпляр [MeshInstance] готов к добавлению в дерево [SceneTree] для отображения.
		Смотрите также [ImmediateGeometry], [MeshDataTool] и [SurfaceTool] для процедурной генерации геометрии.
		[b]Примечание:[/b] Для передних граней треугольных примитивов Godot использует [url=https://learnopengl.com/Advanced-OpenGL/Face-culling]порядок намотки по часовой стрелке[/url].
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/3d/procedural_geometry/arraymesh.html</link>
	</tutorials>
	<methods>
		<method name="add_blend_shape">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<description>
				Добавляет имя для формы смешивания, которая будет добавлена с помощью [method add_surface_from_arrays]. Должно быть вызвано до добавления поверхности.
			</description>
		</method>
		<method name="add_surface_from_arrays">
			<return type="void" />
			<argument index="0" name="primitive" type="int" enum="Mesh.PrimitiveType" />
			<argument index="1" name="arrays" type="Array" />
			<argument index="2" name="blend_shapes" type="Array" default="[  ]" />
			<argument index="3" name="compress_flags" type="int" default="2194432" />
			<description>
				Создает новую поверхность.
				Поверхности создаются для визуализации с помощью [code]primitive[/code], который может быть любого из типов, определенных в [enum Mesh.PrimitiveType]. (Примечание: при использовании индексов рекомендуется использовать только точки, линии или треугольники). [method Mesh.get_surface_count] станет [code]surf_idx[/code] для этой новой поверхности.
				Аргумент [code]arrays[/code] представляет собой массив массивов. Значения, используемые в этом массиве, см. в [enum ArrayType]. Например, [code]arrays[0][/code] - это массив вершин. Первый подмассив вершин всегда обязателен, остальные - необязательны. Добавление индексного массива переводит функцию в "индексный режим", в котором вершинные и другие массивы становятся источниками данных, а индексный массив определяет порядок вершин. Все подмассивы должны иметь ту же длину, что и вершинный массив, или быть пустыми, за исключением [constant ARRAY_INDEX], если он используется.
				[code]compress_flags[/code] - битовое поле, состоящее из значений [enum Mesh.ArrayFormat]. По умолчанию оно принимает значение [constant Mesh.ARRAY_COMPRESS_DEFAULT].
				[b]Примечание:[/b] По умолчанию [code]compress_flags[/code] включает [constant Mesh.ARRAY_COMPRESS_COLOR], в результате чего цвета вершин хранятся как 8-битные целые числа без знака. Это приведет к пересвету вершинных цветов до [code]Color(1, 1, 1, 1)[/code] и снизит их точность. Для хранения вершинных цветов HDR снимите флаг сжатия вершинных цветов, передав [code]Mesh.ARRAY_COMPRESS_DEFAULT ^ Mesh.ARRAY_COMPRESS_COLOR[/code] в качестве значения [code]compress_flags[/code].
			</description>
		</method>
		<method name="clear_blend_shapes">
			<return type="void" />
			<description>
				Удаляет все формы смешивания из данной [ArrayMesh].
			</description>
		</method>
		<method name="clear_surfaces">
			<return type="void" />
			<description>
				Удаляет все поверхности из данной [ArrayMesh].
			</description>
		</method>
		<method name="get_blend_shape_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество форм смешивания, которые содержит [ArrayMesh].
			</description>
		</method>
		<method name="get_blend_shape_name" qualifiers="const">
			<return type="String" />
			<argument index="0" name="index" type="int" />
			<description>
				Возвращает имя формы смешивания по данному индексу.
			</description>
		</method>
		<method name="lightmap_unwrap">
			<return type="int" enum="Error" />
			<argument index="0" name="transform" type="Transform" />
			<argument index="1" name="texel_size" type="float" />
			<description>
				Выполняет UV-развертку [ArrayMesh] для подготовки сетки к лайтмэппингу.
			</description>
		</method>
		<method name="regen_normalmaps">
			<return type="void" />
			<description>
				Регенерирует карты нормалей для [ArrayMesh].
			</description>
		</method>
		<method name="set_blend_shape_name">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<argument index="1" name="name" type="String" />
			<description>
			</description>
		</method>
		<method name="surface_find_by_name" qualifiers="const">
			<return type="int" />
			<argument index="0" name="name" type="String" />
			<description>
				Возвращает индекс первой поверхности с таким именем, содержащейся в данном [ArrayMesh]. Если таковых не найдено, возвращается -1.
			</description>
		</method>
		<method name="surface_get_array_index_len" qualifiers="const">
			<return type="int" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Возвращает длину в индексах массива индексов в запрашиваемой поверхности (см. [method add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_get_array_len" qualifiers="const">
			<return type="int" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Возвращает длину в вершинах массива вершин в запрашиваемой поверхности (см. [method add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_get_format" qualifiers="const">
			<return type="int" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Возвращает форматную маску запрашиваемой поверхности (см. [method add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_get_name" qualifiers="const">
			<return type="String" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Получает имя, присвоенное данной поверхности.
			</description>
		</method>
		<method name="surface_get_primitive_type" qualifiers="const">
			<return type="int" enum="Mesh.PrimitiveType" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Возвращает примитивный тип запрашиваемой поверхности (см. [method add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_remove">
			<return type="void" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Удаляет поверхность в позиции [code]surf_idx[/code], сдвигая остальные поверхности на один [code]surf_idx[/code] слот вниз.
			</description>
		</method>
		<method name="surface_set_name">
			<return type="void" />
			<argument index="0" name="surf_idx" type="int" />
			<argument index="1" name="name" type="String" />
			<description>
				Задает имя для заданной поверхности.
			</description>
		</method>
		<method name="surface_update_region">
			<return type="void" />
			<argument index="0" name="surf_idx" type="int" />
			<argument index="1" name="offset" type="int" />
			<argument index="2" name="data" type="PoolByteArray" />
			<description>
				Обновляет указанную область сетчатых массивов на GPU.
				[b]Предупреждение:[/b] Использовать только в том случае, если вы знаете, что делаете. Вызов этой функции с неправильными аргументами может легко привести к сбоям.
			</description>
		</method>
	</methods>
	<members>
		<member name="blend_shape_mode" type="int" setter="set_blend_shape_mode" getter="get_blend_shape_mode" enum="Mesh.BlendShapeMode" default="1">
			Устанавливает режим формы наложения на один из [enum Mesh.BlendShapeMode].
		</member>
		<member name="custom_aabb" type="AABB" setter="set_custom_aabb" getter="get_custom_aabb" default="AABB( 0, 0, 0, 0, 0, 0 )">
			Заменяет значение [AABB] значением, заданным пользователем, для использования при обрезании фруста. Особенно полезно для предотвращения неожиданного обрезания при использовании шейдера для смещения вершин.
		</member>
	</members>
	<constants>
		<constant name="NO_INDEX_ARRAY" value="-1">
			Внутреннее значение, используемое при отсутствии индексов.
		</constant>
		<constant name="ARRAY_WEIGHTS_SIZE" value="4">
			Количество весов/индексов костей на вершину (всегда 4).
		</constant>
		<constant name="ARRAY_VERTEX" value="0" enum="ArrayType">
			[PoolVector3Array], [PoolVector2Array] или [Array] позиций вершин.
		</constant>
		<constant name="ARRAY_NORMAL" value="1" enum="ArrayType">
			[PoolVector3Array] нормалей вершин.
		</constant>
		<constant name="ARRAY_TANGENT" value="2" enum="ArrayType">
			[PoolRealArray] касательных к вершинам. Каждый элемент в группах по 4 float, первые 3 float определяют касательную, а последний - бинормальное направление как -1 или 1.
		</constant>
		<constant name="ARRAY_COLOR" value="3" enum="ArrayType">
			[PoolColorArray] цветов вершин.
		</constant>
		<constant name="ARRAY_TEX_UV" value="4" enum="ArrayType">
			[PoolVector2Array] для UV-координат.
		</constant>
		<constant name="ARRAY_TEX_UV2" value="5" enum="ArrayType">
			[PoolVector2Array] для вторых UV-координат.
		</constant>
		<constant name="ARRAY_BONES" value="6" enum="ArrayType">
			[PoolRealArray] или [PoolIntArray] индексов костей. Каждый элемент в группах по 4 плавающих символа.
		</constant>
		<constant name="ARRAY_WEIGHTS" value="7" enum="ArrayType">
			[PoolRealArray] весов костей. Каждый элемент в группах по 4 поплавка.
		</constant>
		<constant name="ARRAY_INDEX" value="8" enum="ArrayType">
			[PoolIntArray] целых чисел, используемых в качестве индексов, ссылающихся на вершины, цвета, нормали, касательные и текстуры. Все эти массивы должны иметь то же количество элементов, что и массив вершин. Ни один индекс не может быть больше размера массива вершин. При наличии этого индексного массива функция переходит в "индексный режим", где индекс выбирает *i*-ю вершину, нормаль, тангенс, цвет, UV и т.д. Это означает, что если вы хотите иметь разные нормали или цвета вдоль ребра, то вам придется дублировать вершины.
			Для треугольников индексный массив интерпретируется как тройки, ссылающиеся на вершины каждого треугольника. Для линий индексный массив представляет собой пары, указывающие на начало и конец каждой линии.
		</constant>
		<constant name="ARRAY_MAX" value="9" enum="ArrayType">
			Представляет собой размер перечисления [enum ArrayType].
		</constant>
		<constant name="ARRAY_FORMAT_VERTEX" value="1" enum="ArrayFormat">
			Формат массива будет включать вершины (обязательно).
		</constant>
		<constant name="ARRAY_FORMAT_NORMAL" value="2" enum="ArrayFormat">
			Формат массива будет включать нормали.
		</constant>
		<constant name="ARRAY_FORMAT_TANGENT" value="4" enum="ArrayFormat">
			Формат массива будет включать касательные.
		</constant>
		<constant name="ARRAY_FORMAT_COLOR" value="8" enum="ArrayFormat">
			Формат массива будет включать в себя цветовой массив.
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV" value="16" enum="ArrayFormat">
			Формат массива будет включать набор UV карт
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV2" value="32" enum="ArrayFormat">
			Формат массива будет включать в себя еще один набор UV карт.
		</constant>
		<constant name="ARRAY_FORMAT_BONES" value="64" enum="ArrayFormat">
			Формат массива будет включать индексы костей.
		</constant>
		<constant name="ARRAY_FORMAT_WEIGHTS" value="128" enum="ArrayFormat">
			Формат массива будет включать вес костей.
		</constant>
		<constant name="ARRAY_FORMAT_INDEX" value="256" enum="ArrayFormat">
			Будет использоваться индексный массив.
		</constant>
	</constants>
</class>
