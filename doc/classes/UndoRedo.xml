<?xml version="1.0" encoding="UTF-8" ?>
<class name="UndoRedo" inherits="Object" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Помощник для управления операциями отмены/повтора в редакторе или пользовательских инструментах.
	</brief_description>
	<description>
		Помощник для управления операциями отмены/повтора в редакторе или пользовательских инструментах. Он работает путем регистрации методов и изменений свойств внутри "действий".
		Обычное поведение - создать действие, затем добавить вызовы do/undo к функциям или изменениям свойств, а затем зафиксировать действие.
		Вот пример того, как добавить действие в собственный [UndoRedo] редактора Godot из плагина:
		[codeblock]
		var undo_redo = get_undo_redo() # Метод EditorPlugin.

		func do_something():
		    pass # Вставьте сюда свой код.

		func undo_something():
		    pass # Поместите сюда код, который отменяет действие, выполненное командой "do_something()".

		func _on_MyButton_pressed():
		    var node = get_node("MyNode2D")
		    undo_redo.create_action("Move the node")
		    undo_redo.add_do_method(self, "do_something")
		    undo_redo.add_undo_method(self, "undo_something")
		    undo_redo.add_do_property(node, "position", Vector2(100,100))
		    undo_redo.add_undo_property(node, "position", node.position)
		    undo_redo.commit_action()
		[/codeblock]
		[method create_action], [method add_do_method], [method add_undo_method], [method add_do_property], [method add_undo_property] и [method commit_action] должны вызываться друг за другом, как в примере. Иначе это может привести к сбоям.
		Если вам не нужно регистрировать метод, вы можете не вызывать [method add_do_method] и [method add_undo_method]; то же самое относится и к свойствам. Вы также можете зарегистрировать более одного метода/свойства.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_do_method" qualifiers="vararg">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="method" type="String" />
			<description>
				Зарегистрируйте метод, который будет вызываться при выполнении действия.
			</description>
		</method>
		<method name="add_do_property">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="property" type="String" />
			<argument index="2" name="value" type="Variant" />
			<description>
				Зарегистрируйте изменение значения свойства для "do".
			</description>
		</method>
		<method name="add_do_reference">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<description>
				Зарегистрируйте ссылку для "do", которая будет стерта, если история "do" будет потеряна. Это полезно в основном для новых узлов, созданных для вызова "do". Не используйте для ресурсов.
			</description>
		</method>
		<method name="add_undo_method" qualifiers="vararg">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="method" type="String" />
			<description>
				Зарегистрируйте метод, который будет вызываться, когда действие будет отменено.
			</description>
		</method>
		<method name="add_undo_property">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="property" type="String" />
			<argument index="2" name="value" type="Variant" />
			<description>
				Зарегистрируйте изменение значения свойства для "отмены".
			</description>
		</method>
		<method name="add_undo_reference">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<description>
				Зарегистрируйте ссылку на "undo", которая будет стерта, если история "undo" будет потеряна. Это полезно в основном для узлов, удаленных вызовом "do" (не вызовом "undo"!).
			</description>
		</method>
		<method name="clear_history">
			<return type="void" />
			<argument index="0" name="increase_version" type="bool" default="true" />
			<description>
				Очищает историю отмены/повтора и связанные с ней ссылки.
				Передача [code]false[/code] в [code]increase_version[/code] предотвратит увеличение номера версии после этого.
			</description>
		</method>
		<method name="commit_action">
			<return type="void" />
			<description>
				Зафиксировать действие. Все методы/свойства "do" вызываются/устанавливаются при вызове этой функции.
			</description>
		</method>
		<method name="create_action">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="merge_mode" type="int" enum="UndoRedo.MergeMode" default="0" />
			<description>
				Создайте новое действие. После его вызова выполните все вызовы [method add_do_method], [method add_undo_method], [method add_do_property] и [method add_undo_property], а затем зафиксируйте действие с помощью [method commit_action].
				Способ объединения действий диктуется аргументом [code]merge_mode[/code]. Подробности см. в [enum MergeMode].
			</description>
		</method>
		<method name="get_current_action_name" qualifiers="const">
			<return type="String" />
			<description>
				Получает имя текущего действия.
			</description>
		</method>
		<method name="get_version" qualifiers="const">
			<return type="int" />
			<description>
				Получает версию. Каждый раз, когда фиксируется новое действие, номер версии [UndoRedo] автоматически увеличивается.
				Это полезно в основном для проверки того, изменилось ли что-то по сравнению с сохраненной версией.
			</description>
		</method>
		<method name="has_redo" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если доступно действие "повторить".
			</description>
		</method>
		<method name="has_undo" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если доступно действие "отмена".
			</description>
		</method>
		<method name="is_commiting_action" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если [UndoRedo] в данный момент совершает действие, т.е. выполняет свой метод "do" или изменяет свойство (см. [method commit_action]).
			</description>
		</method>
		<method name="redo">
			<return type="bool" />
			<description>
				Повторите последнее действие.
			</description>
		</method>
		<method name="undo">
			<return type="bool" />
			<description>
				Отменить последнее действие.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="version_changed">
			<description>
				Вызывается, когда был вызван [метод undo] или [метод redo].
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="MERGE_DISABLE" value="0" enum="MergeMode">
			Заставляет операции "сделать"/"отменить" оставаться в отдельных действиях.
		</constant>
		<constant name="MERGE_ENDS" value="1" enum="MergeMode">
			Делается так, что операция "сделать" действия происходит от первого созданного действия, а операция "отменить" - от последнего последующего действия с тем же именем.
		</constant>
		<constant name="MERGE_ALL" value="2" enum="MergeMode">
			Заставляет объединять последующие действия с одинаковым именем в одно.
		</constant>
	</constants>
</class>
