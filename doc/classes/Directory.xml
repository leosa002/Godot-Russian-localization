<?xml version="1.0" encoding="UTF-8" ?>
<class name="Directory" inherits="Reference" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Тип, используемый для работы с файловой системой.
	</brief_description>
	<description>
		Тип каталога. Он используется для управления каталогами и их содержимым (не ограничиваясь папкой проекта).
		При создании нового [Directory] его открытая директория по умолчанию будет [code]res://[/code]. Это может измениться в будущем, поэтому рекомендуется всегда использовать [method open] для инициализации [Directory] в том месте, где вы хотите работать, с явной проверкой ошибок.
		[b]Примечание:[/b] Многие типы ресурсов импортируются (например, текстуры или звуковые файлы), и их исходный актив не будет включен в экспортированную игру, так как будет использоваться только импортированная версия. Для доступа к импортированным ресурсам используйте [ResourceLoader].
		Вот пример того, как можно перебрать файлы в директории:
		[codeblock]
		func dir_contents(path):
		    var dir = Directory.new()
		    if dir.open(path) == OK:
		        dir.list_dir_begin()
		        var file_name = dir.get_next()
		        while file_name != "":
		            if dir.current_is_dir():
		                print("Найденный каталог: " + file_name)
		            else:
		                print("Найденный файл: " + file_name)
		            file_name = dir.get_next()
		    else:
		        print("При попытке получить доступ к пути произошла ошибка.")
		[/codeblock]
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/scripting/filesystem.html</link>
	</tutorials>
	<methods>
		<method name="change_dir">
			<return type="int" enum="Error" />
			<argument index="0" name="todir" type="String" />
			<description>
				Изменяет текущий открытый каталог на каталог, переданный в качестве аргумента. Аргумент может быть относительным к текущему каталогу (например, [code]newdir[/code] или [code]../newdir[/code]) или абсолютным путем (например, [code]/tmp/newdir[/code] или [code]res://somedir/newdir[/code]).
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="copy">
			<return type="int" enum="Error" />
			<argument index="0" name="from" type="String" />
			<argument index="1" name="to" type="String" />
			<description>
				Копирует файл [code]from[/code] в место назначения [code]to[/code]. Оба аргумента должны быть путями к файлам, относительными или абсолютными. Если файл назначения существует и не защищен от доступа, он будет перезаписан.
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="current_is_dir" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает, является ли текущий элемент, обработанный последним вызовом [method get_next], каталогом ([code].[/code] и [code].[/code] считаются каталогами).
			</description>
		</method>
		<method name="dir_exists">
			<return type="bool" />
			<argument index="0" name="path" type="String" />
			<description>
				Возвращает, существует ли целевой каталог. Аргумент может быть относительным к текущему каталогу или абсолютным путем.
			</description>
		</method>
		<method name="file_exists">
			<return type="bool" />
			<argument index="0" name="path" type="String" />
			<description>
				Возвращает, существует ли целевой файл. Аргумент может быть относительным к текущему каталогу или абсолютным путем.
			</description>
		</method>
		<method name="get_current_dir">
			<return type="String" />
			<description>
				Возвращает абсолютный путь к открытому в данный момент каталогу (например, [code]res://folder[/code] или [code]C:\tmp\folder[/code]).
			</description>
		</method>
		<method name="get_current_drive">
			<return type="int" />
			<description>
				Возвращает индекс диска текущей открытой директории. Для преобразования возвращаемого индекса в имя диска смотрите [метод get_drive].
			</description>
		</method>
		<method name="get_drive">
			<return type="String" />
			<argument index="0" name="idx" type="int" />
			<description>
				В Windows возвращает имя диска (раздела), переданного в качестве аргумента (например, [code]C:[/code]).
				В macOS возвращает путь к смонтированному тому, переданному в качестве аргумента.
				В Linux в качестве аргумента возвращается путь к смонтированному тому или закладке GTK 3.
				На других платформах или если запрашиваемый диск не существует, метод возвращает пустую строку.
			</description>
		</method>
		<method name="get_drive_count">
			<return type="int" />
			<description>
				В Windows возвращает количество дисков (разделов), смонтированных в текущей файловой системе.
				В macOS возвращает количество смонтированных томов.
				В Linux возвращает количество смонтированных томов и закладок GTK 3.
				На других платформах метод возвращает 0.
			</description>
		</method>
		<method name="get_next">
			<return type="String" />
			<description>
				Возвращает следующий элемент (файл или каталог) в текущем каталоге (включая [code].[/code] и [code].[/code], если [code]skip_navigational[/code] не был задан [методу list_dir_begin]).
				Возвращается имя файла или каталога (а не полный путь к нему). После полной обработки потока метод возвращает пустую строку и автоматически закрывает поток (т. е. [метод list_dir_end] в этом случае не обязателен).
			</description>
		</method>
		<method name="get_space_left">
			<return type="int" />
			<description>
				В настольных системах UNIX возвращает информацию о доступном пространстве на диске текущего каталога. На других платформах эта информация недоступна, и метод возвращает 0 или -1.
			</description>
		</method>
		<method name="list_dir_begin">
			<return type="int" enum="Error" />
			<argument index="0" name="skip_navigational" type="bool" default="false" />
			<argument index="1" name="skip_hidden" type="bool" default="false" />
			<description>
				Инициализирует поток, используемый для перечисления всех файлов и каталогов с помощью функции [method get_next], при необходимости закрывая текущий открытый поток. После обработки потока его обычно закрывают с помощью [method list_dir_end].
				Если [code]skip_navigational[/code] имеет значение [code]true[/code], то [code].[/code] и [code].[/code] отфильтровываются.
				Если [code]skip_hidden[/code] имеет значение [code]true[/code], скрытые файлы будут отфильтрованы.
			</description>
		</method>
		<method name="list_dir_end">
			<return type="void" />
			<description>
				Закрывает текущий поток, открытый с помощью [method list_dir_begin] (был ли он полностью обработан с помощью [method get_next], не имеет значения).
			</description>
		</method>
		<method name="make_dir">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Создает каталог. Аргумент может быть относительным к текущему каталогу или абсолютным путем. Целевой каталог должен быть помещен в уже существующий каталог (чтобы создать полный путь рекурсивно, смотрите [метод make_dir_recursive]).
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="make_dir_recursive">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Создает целевой каталог и все необходимые промежуточные каталоги на его пути, рекурсивно вызывая [метод make_dir]. Аргумент может быть как относительным к текущему каталогу, так и абсолютным путем.
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="open">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Открывает существующий каталог в файловой системе. Аргумент [code]path[/code] может находиться в дереве проекта ([code]res://folder[/code]), в каталоге пользователя ([code]user://folder[/code]) или в абсолютном пути к файловой системе пользователя (например, [code]/tmp/folder[/code] или [code]C:\tmp\folder[/code]).
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="remove">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<description>
				Постоянно удаляет целевой файл или пустой каталог. Аргумент может быть относительным к текущему каталогу или абсолютным путем. Если целевой каталог не пуст, операция завершится неудачей.
				Если вы не хотите удалять файл/каталог навсегда, используйте вместо этого [метод OS.move_to_trash].
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
		<method name="rename">
			<return type="int" enum="Error" />
			<argument index="0" name="from" type="String" />
			<argument index="1" name="to" type="String" />
			<description>
				Переименование (перемещение) файла или каталога [code]from[/code] в каталог [code]to[/code]. Оба аргумента должны быть путями к файлам или каталогам, относительными или абсолютными. Если файл или каталог назначения существует и не защищен от доступа, он будет перезаписан.
				Возвращает одну из констант кода [enum Error] ([code]OK[/code] при успехе).
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
