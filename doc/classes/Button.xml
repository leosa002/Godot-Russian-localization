<?xml version="1.0" encoding="UTF-8" ?>
<class name="Button" inherits="BaseButton" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Стандартная тематическая кнопка.
	</brief_description>
	<description>
		Button - это стандартная тематическая кнопка. Она может содержать текст и иконку и отображать их в соответствии с текущей темой [Theme].
		[b]Пример создания кнопки и назначения действия при нажатии с помощью кода:[/b]
		[codeblock]
		func _ready():
		    var button = Button.new()
		    button.text = "Нажмите на меня"
		    button.connect("pressed", self, "_button_pressed")
		    add_child(button)

		func _button_pressed():
		    print("Привет мир!")
		[/codeblock]
		Кнопки (как и все узлы Control) также могут быть созданы в редакторе, но в некоторых ситуациях может потребоваться их создание из кода.
		См. также [BaseButton], который содержит общие свойства и методы, связанные с этим узлом.
		[b]Примечание:[/b] Кнопки не интерпретируют сенсорный ввод и поэтому не поддерживают мультитач, поскольку эмуляция мыши может одновременно нажимать только одну кнопку. Используйте [TouchScreenButton] для кнопок, запускающих движение или действия в игровом процессе, поскольку [TouchScreenButton] поддерживает мультитач.
	</description>
	<tutorials>
		<link title="2D Dodge The Creeps Demo">https://godotengine.org/asset-library/asset/515</link>
		<link title="OS Test Demo">https://godotengine.org/asset-library/asset/677</link>
	</tutorials>
	<methods>
	</methods>
	<members>
		<member name="align" type="int" setter="set_text_align" getter="get_text_align" enum="Button.TextAlign" default="1">
			Политика выравнивания текста кнопки, используется одна из констант [enum TextAlign].
		</member>
		<member name="clip_text" type="bool" setter="set_clip_text" getter="get_clip_text" default="false">
			Если это свойство включено, то текст, который слишком велик, чтобы поместиться в кнопку, обрезается, если выключено - кнопка всегда будет достаточно широкой, чтобы вместить текст.
		</member>
		<member name="expand_icon" type="bool" setter="set_expand_icon" getter="is_expand_icon" default="false">
			При включении этой опции значок кнопки будет расширяться/сжиматься в соответствии с ее размерами, сохраняя свой аспект.
		</member>
		<member name="flat" type="bool" setter="set_flat" getter="is_flat" default="false">
			Плоские кнопки не имеют декоративного оформления.
		</member>
		<member name="icon" type="Texture" setter="set_button_icon" getter="get_button_icon">
			Иконка кнопки, при наличии текста иконка будет размещена перед текстом.
			Для редактирования отступов и интервалов между пиктограммами используйте свойство [code]hseparation[/code] темы [Button] и свойства [code]content_margin_*[/code] используемых [StyleBox]ов.
		</member>
		<member name="icon_align" type="int" setter="set_icon_align" getter="get_icon_align" enum="Button.TextAlign" default="0">
			Определяет, как должен быть выровнен значок - по левому, правому или центральному краю кнопки. Используются те же константы [enum TextAlign], что и для выравнивания текста. Если выравнивать по центру, то текст будет рисоваться поверх значка.
		</member>
		<member name="text" type="String" setter="set_text" getter="get_text" default="&quot;&quot;">
			Текст кнопки, который будет отображаться в ее области.
		</member>
	</members>
	<constants>
		<constant name="ALIGN_LEFT" value="0" enum="TextAlign">
			Выравнивание текста по левому краю.
		</constant>
		<constant name="ALIGN_CENTER" value="1" enum="TextAlign">
			Выравнивание текста по центру.
		</constant>
		<constant name="ALIGN_RIGHT" value="2" enum="TextAlign">
			Выравнивание текста по правому краю.
		</constant>
	</constants>
	<theme_items>
		<theme_item name="font_color" data_type="color" type="Color" default="Color( 0.88, 0.88, 0.88, 1 )">
			Текст [Color] по умолчанию для [Button].
		</theme_item>
		<theme_item name="font_color_disabled" data_type="color" type="Color" default="Color( 0.9, 0.9, 0.9, 0.2 )">
			Текст [Color], используемый при отключенной [Button].
		</theme_item>
		<theme_item name="font_color_focus" data_type="color" type="Color" default="Color( 0.94, 0.94, 0.94, 1 )">
			Цвет текста [Color], используемый при фокусировке [Button]. Заменяет только обычный цвет текста кнопки. Для отключенных, наведенных и нажатых состояний этот цвет имеет приоритет.
		</theme_item>
		<theme_item name="font_color_hover" data_type="color" type="Color" default="Color( 0.94, 0.94, 0.94, 1 )">
			Цвет текста [Color], используемый при наведении курсора на [Button].
		</theme_item>
		<theme_item name="font_color_pressed" data_type="color" type="Color" default="Color( 1, 1, 1, 1 )">
			Цвет текста [Color], используемый при нажатии кнопки [Button].
		</theme_item>
		<theme_item name="hseparation" data_type="constant" type="int" default="2">
			Горизонтальное пространство между значком [Button] и текстом.
		</theme_item>
		<theme_item name="font" data_type="font" type="Font">
			[Шрифт] текста кнопки [Button].
		</theme_item>
		<theme_item name="disabled" data_type="style" type="StyleBox">
			[StyleBox], используемый при отключенной [Button].
		</theme_item>
		<theme_item name="focus" data_type="style" type="StyleBox">
			[StyleBox], используемый при фокусировке [Button]. Он отображается поверх текущего [StyleBox], поэтому использование [StyleBoxEmpty] просто отключит визуальный эффект фокусировки.
		</theme_item>
		<theme_item name="hover" data_type="style" type="StyleBox">
			[StyleBox], используемый при наведении курсора на [Button].
		</theme_item>
		<theme_item name="normal" data_type="style" type="StyleBox">
			Стиль по умолчанию [StyleBox] для [Button].
		</theme_item>
		<theme_item name="pressed" data_type="style" type="StyleBox">
			[StyleBox], используемый при нажатии кнопки [Button].
		</theme_item>
	</theme_items>
</class>
