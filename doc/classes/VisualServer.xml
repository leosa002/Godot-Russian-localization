<?xml version="1.0" encoding="UTF-8" ?>
<class name="VisualServer" inherits="Object" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Сервер для всего, что видно.
	</brief_description>
	<description>
		Сервер для всего видимого. Визуальный сервер - это бэкэнд API для всего видимого. На него опирается вся система сцен для отображения.
		Визуальный сервер полностью непрозрачен, его внутреннее устройство зависит от конкретной реализации и не может быть доступно.
		Визуальный сервер может быть использован для полного обхода системы сцен.
		Ресурсы создаются с помощью функций [code]*_create[/code].
		Все объекты отрисовываются во вьюпорте. Можно использовать [Viewport], прикрепленный к [SceneTree], или создать его самостоятельно с помощью [method viewport_create]. При использовании пользовательского сценария или холста его необходимо прикрепить к видовому экрану с помощью [method viewport_set_scenario] или [method viewport_attach_canvas].
		В 3D все визуальные объекты должны быть связаны со сценарием. Сценарий - это визуальное представление мира. Если доступ к визуальному серверу осуществляется из запущенной игры, то сценарий может быть получен из дерева сцены из любого узла [Spatial] с помощью метода [method Spatial.get_world]. В противном случае сценарий может быть создан с помощью метода [method scenario_create].
		Аналогично, в 2D холст необходим для рисования всех элементов холста.
		В 3D все видимые объекты состоят из ресурса и экземпляра. Ресурсом может быть сетка, система частиц, свет или любой другой 3D-объект. Для того чтобы быть видимыми, ресурсы должны быть привязаны к экземпляру с помощью [метода instance_set_base]. Чтобы экземпляр был виден, он также должен быть привязан к сценарию с помощью [method instance_set_scenario].
		В 2D все видимые объекты являются элементами холста. Для того чтобы быть видимым, элемент холста должен быть дочерним элементом холста, прикрепленного к видовому экрану, или же он должен быть дочерним элементом другого элемента холста, который в конечном итоге будет прикреплен к холсту.
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/performance/using_servers.html</link>
	</tutorials>
	<methods>
		<method name="black_bars_set_images">
			<return type="void" />
			<argument index="0" name="left" type="RID" />
			<argument index="1" name="top" type="RID" />
			<argument index="2" name="right" type="RID" />
			<argument index="3" name="bottom" type="RID" />
			<description>
				Устанавливает, что изображения должны выводиться в поле окна.
			</description>
		</method>
		<method name="black_bars_set_margins">
			<return type="void" />
			<argument index="0" name="left" type="int" />
			<argument index="1" name="top" type="int" />
			<argument index="2" name="right" type="int" />
			<argument index="3" name="bottom" type="int" />
			<description>
				Устанавливает размер полей, на которые выводятся черные полосы (или изображения, если использовался метод [black_bars_set_images]).
			</description>
		</method>
		<method name="camera_create">
			<return type="RID" />
			<description>
				Создает камеру и добавляет ее в VisualServer. Доступ к ней осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]camera_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer'а.
			</description>
		</method>
		<method name="camera_set_cull_mask">
			<return type="void" />
			<argument index="0" name="camera" type="RID" />
			<argument index="1" name="layers" type="int" />
			<description>
				Устанавливает маску обтравки, связанную с данной камерой. Маска выборки описывает, какие 3D-слои будут отрисовываться данной камерой. Эквивалентно [member Camera.cull_mask].
			</description>
		</method>
		<method name="camera_set_environment">
			<return type="void" />
			<argument index="0" name="camera" type="RID" />
			<argument index="1" name="env" type="RID" />
			<description>
				Устанавливает окружение, используемое данной камерой. Эквивалентно [member Camera.environment].
			</description>
		</method>
		<method name="camera_set_frustum">
			<return type="void" />
			<argument index="0" name="camera" type="RID" />
			<argument index="1" name="size" type="float" />
			<argument index="2" name="offset" type="Vector2" />
			<argument index="3" name="z_near" type="float" />
			<argument index="4" name="z_far" type="float" />
			<description>
				Устанавливает использование камерой фрустум-проекции. Этот режим позволяет регулировать аргумент [code]offset[/code] для создания эффектов "наклонного фруста".
			</description>
		</method>
		<method name="camera_set_orthogonal">
			<return type="void" />
			<argument index="0" name="camera" type="RID" />
			<argument index="1" name="size" type="float" />
			<argument index="2" name="z_near" type="float" />
			<argument index="3" name="z_far" type="float" />
			<description>
				Устанавливает использование камерой ортогональной проекции, также известной как ортографическая проекция. Объекты остаются одинакового размера на экране независимо от расстояния до них.
			</description>
		</method>
		<method name="camera_set_perspective">
			<return type="void" />
			<argument index="0" name="camera" type="RID" />
			<argument index="1" name="fovy_degrees" type="float" />
			<argument index="2" name="z_near" type="float" />
			<argument index="3" name="z_far" type="float" />
			<description>
				Настраивает камеру на использование перспективной проекции. Объекты на экране становятся меньше, когда они находятся на большом расстоянии.
			</description>
		</method>
		<method name="camera_set_transform">
			<return type="void" />
			<argument index="0" name="camera" type="RID" />
			<argument index="1" name="transform" type="Transform" />
			<description>
				Устанавливает [Transform] камеры.
			</description>
		</method>
		<method name="camera_set_use_vertical_aspect">
			<return type="void" />
			<argument index="0" name="camera" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Если [code]true[/code], то сохраняется горизонтальное соотношение сторон, что эквивалентно [constant Camera.KEEP_WIDTH]. Если [code]false[/code], то сохраняется вертикальное соотношение сторон, которое эквивалентно [constant Camera.KEEP_HEIGHT].
			</description>
		</method>
		<method name="canvas_create">
			<return type="RID" />
			<description>
				Создает холст и возвращает присвоенный [RID]. Доступ к нему можно получить с помощью возвращаемого RID. Этот RID будет использоваться во всех [code]canvas_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer'а.
			</description>
		</method>
		<method name="canvas_item_add_circle">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="pos" type="Vector2" />
			<argument index="2" name="radius" type="float" />
			<argument index="3" name="color" type="Color" />
			<description>
				Добавляет команду рисования окружности к командам рисования [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_add_clip_ignore">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="ignore" type="bool" />
			<description>
				Если значение ignore равно [code]true[/code], то VisualServer не выполняет обрезку.
			</description>
		</method>
		<method name="canvas_item_add_line">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="from" type="Vector2" />
			<argument index="2" name="to" type="Vector2" />
			<argument index="3" name="color" type="Color" />
			<argument index="4" name="width" type="float" default="1.0" />
			<argument index="5" name="antialiased" type="bool" default="false" />
			<description>
				Добавляет команду линии к командам рисования [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_add_mesh">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="mesh" type="RID" />
			<argument index="2" name="transform" type="Transform2D" default="Transform2D( 1, 0, 0, 1, 0, 0 )" />
			<argument index="3" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="4" name="texture" type="RID" />
			<argument index="5" name="normal_map" type="RID" />
			<description>
				Добавляет команду рисования сетки к командам рисования [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_add_multimesh">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="mesh" type="RID" />
			<argument index="2" name="texture" type="RID" />
			<argument index="3" name="normal_map" type="RID" />
			<description>
				Добавляет [MultiMesh] к командам рисования [CanvasItem]. В данный момент влияет только на его aabb.
			</description>
		</method>
		<method name="canvas_item_add_nine_patch">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="rect" type="Rect2" />
			<argument index="2" name="source" type="Rect2" />
			<argument index="3" name="texture" type="RID" />
			<argument index="4" name="topleft" type="Vector2" />
			<argument index="5" name="bottomright" type="Vector2" />
			<argument index="6" name="x_axis_mode" type="int" enum="VisualServer.NinePatchAxisMode" default="0" />
			<argument index="7" name="y_axis_mode" type="int" enum="VisualServer.NinePatchAxisMode" default="0" />
			<argument index="8" name="draw_center" type="bool" default="true" />
			<argument index="9" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="10" name="normal_map" type="RID" />
			<description>
				Добавляет к командам рисования [CanvasItem] изображение с девятью пятнами.
				Дополнительные пояснения см. в разделе [NinePatchRect].
			</description>
		</method>
		<method name="canvas_item_add_particles">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="particles" type="RID" />
			<argument index="2" name="texture" type="RID" />
			<argument index="3" name="normal_map" type="RID" />
			<description>
				Добавляет систему частиц к командам рисования [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_add_polygon">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="points" type="PoolVector2Array" />
			<argument index="2" name="colors" type="PoolColorArray" />
			<argument index="3" name="uvs" type="PoolVector2Array" default="PoolVector2Array(  )" />
			<argument index="4" name="texture" type="RID" />
			<argument index="5" name="normal_map" type="RID" />
			<argument index="6" name="antialiased" type="bool" default="false" />
			<description>
				Добавляет многоугольник к командам рисования [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_add_polyline">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="points" type="PoolVector2Array" />
			<argument index="2" name="colors" type="PoolColorArray" />
			<argument index="3" name="width" type="float" default="1.0" />
			<argument index="4" name="antialiased" type="bool" default="false" />
			<description>
				Добавляет к командам рисования [CanvasItem] полилинию, которая представляет собой линию из нескольких точек с заданной шириной.
			</description>
		</method>
		<method name="canvas_item_add_primitive">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="points" type="PoolVector2Array" />
			<argument index="2" name="colors" type="PoolColorArray" />
			<argument index="3" name="uvs" type="PoolVector2Array" />
			<argument index="4" name="texture" type="RID" />
			<argument index="5" name="width" type="float" default="1.0" />
			<argument index="6" name="normal_map" type="RID" />
			<description>
				Добавляет примитив к командам рисования [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_add_rect">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="rect" type="Rect2" />
			<argument index="2" name="color" type="Color" />
			<description>
				Добавляет прямоугольник к командам рисования [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_add_set_transform">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="transform" type="Transform2D" />
			<description>
				Добавляет команду [Transform2D] к командам рисования [CanvasItem].
				При ее выполнении устанавливается форма extra_matrix. Это влияет на последующие команды элемента холста.
			</description>
		</method>
		<method name="canvas_item_add_texture_rect">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="rect" type="Rect2" />
			<argument index="2" name="texture" type="RID" />
			<argument index="3" name="tile" type="bool" default="false" />
			<argument index="4" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="5" name="transpose" type="bool" default="false" />
			<argument index="6" name="normal_map" type="RID" />
			<description>
				Добавляет текстурированный прямоугольник к командам рисования [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_add_texture_rect_region">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="rect" type="Rect2" />
			<argument index="2" name="texture" type="RID" />
			<argument index="3" name="src_rect" type="Rect2" />
			<argument index="4" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="5" name="transpose" type="bool" default="false" />
			<argument index="6" name="normal_map" type="RID" />
			<argument index="7" name="clip_uv" type="bool" default="true" />
			<description>
				Добавляет к командам рисования [CanvasItem] текстурный прямоугольник с заданной областью.
			</description>
		</method>
		<method name="canvas_item_add_triangle_array">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="indices" type="PoolIntArray" />
			<argument index="2" name="points" type="PoolVector2Array" />
			<argument index="3" name="colors" type="PoolColorArray" />
			<argument index="4" name="uvs" type="PoolVector2Array" default="PoolVector2Array(  )" />
			<argument index="5" name="bones" type="PoolIntArray" default="PoolIntArray(  )" />
			<argument index="6" name="weights" type="PoolRealArray" default="PoolRealArray(  )" />
			<argument index="7" name="texture" type="RID" />
			<argument index="8" name="count" type="int" default="-1" />
			<argument index="9" name="normal_map" type="RID" />
			<argument index="10" name="antialiased" type="bool" default="false" />
			<argument index="11" name="antialiasing_use_indices" type="bool" default="false" />
			<description>
				Добавляет массив треугольников к командам рисования [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_clear">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<description>
				Очищает [CanvasItem] и удаляет все команды в нем.
			</description>
		</method>
		<method name="canvas_item_create">
			<return type="RID" />
			<description>
				Создает новый [CanvasItem] и возвращает его [RID]. Доступ к нему можно получить с помощью возвращаемого RID. Этот RID будет использоваться во всех [code]canvas_item_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer
			</description>
		</method>
		<method name="canvas_item_set_clip">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="clip" type="bool" />
			<description>
				Устанавливает обрезку для [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_set_copy_to_backbuffer">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<argument index="2" name="rect" type="Rect2" />
			<description>
				Устанавливает [CanvasItem] для копирования прямоугольника в бэкбуфер.
			</description>
		</method>
		<method name="canvas_item_set_custom_rect">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="use_custom_rect" type="bool" />
			<argument index="2" name="rect" type="Rect2" default="Rect2( 0, 0, 0, 0 )" />
			<description>
				Определяет пользовательский прямоугольник рисования для [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_set_distance_field_mode">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Включает использование полей расстояний для элементов графического интерфейса, которые отображают шрифты, основанные на полях расстояний.
			</description>
		</method>
		<method name="canvas_item_set_draw_behind_parent">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Устанавливает, что [CanvasItem] будет рисоваться позади своего родителя.
			</description>
		</method>
		<method name="canvas_item_set_draw_index">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Устанавливает индекс для [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_set_light_mask">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="mask" type="int" />
			<description>
				Маска света. Более подробную информацию о световых масках см. в [LightOccluder2D].
			</description>
		</method>
		<method name="canvas_item_set_material">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="material" type="RID" />
			<description>
				Устанавливает новый материал для [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_set_modulate">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Устанавливает цвет, которым модулируется [CanvasItem] и его дочерние элементы.
			</description>
		</method>
		<method name="canvas_item_set_parent">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="parent" type="RID" />
			<description>
				Устанавливает родителя для [CanvasItem]. Родителем может быть другой элемент холста, или это может быть корневой холст, прикрепленный к области просмотра.
			</description>
		</method>
		<method name="canvas_item_set_self_modulate">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Устанавливает цвет, которым модулируется [CanvasItem] без дочерних элементов.
			</description>
		</method>
		<method name="canvas_item_set_sort_children_by_y">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Устанавливает, что дочерние элементы [CanvasItem] должны быть отсортированы по y-позиции.
			</description>
		</method>
		<method name="canvas_item_set_transform">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="transform" type="Transform2D" />
			<description>
				Устанавливает [Transform2D] элемента [CanvasItem].
			</description>
		</method>
		<method name="canvas_item_set_use_parent_material">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Устанавливает, использует ли [CanvasItem] материал своего родителя.
			</description>
		</method>
		<method name="canvas_item_set_visible">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="visible" type="bool" />
			<description>
				Устанавливает, является ли элемент холста (включая его дочерние элементы) видимым.
			</description>
		</method>
		<method name="canvas_item_set_z_as_relative_to_parent">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Если эта опция включена, то индекс Z родителя будет добавлен к индексу Z дочерних элементов.
			</description>
		</method>
		<method name="canvas_item_set_z_index">
			<return type="void" />
			<argument index="0" name="item" type="RID" />
			<argument index="1" name="z_index" type="int" />
			<description>
				Устанавливает Z-индекс элемента [CanvasItem], т.е. порядок его отрисовки (меньшие индексы отрисовываются первыми).
			</description>
		</method>
		<method name="canvas_light_attach_to_canvas">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="canvas" type="RID" />
			<description>
				Прикрепляет светильник к холсту. Удаляет его с предыдущего холста.
			</description>
		</method>
		<method name="canvas_light_create">
			<return type="RID" />
			<description>
				Создает световой холст и добавляет его в VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]canvas_light_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer(-а)
			</description>
		</method>
		<method name="canvas_light_occluder_attach_to_canvas">
			<return type="void" />
			<argument index="0" name="occluder" type="RID" />
			<argument index="1" name="canvas" type="RID" />
			<description>
				Прикрепляет световой окклюдер к холсту. Удаляет его с предыдущего холста.
			</description>
		</method>
		<method name="canvas_light_occluder_create">
			<return type="RID" />
			<description>
				Создает световой окклюдер и добавляет его в VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]canvas_light_ocluder_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer(-а)
			</description>
		</method>
		<method name="canvas_light_occluder_set_enabled">
			<return type="void" />
			<argument index="0" name="occluder" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Включает или выключает окклюдер света.
			</description>
		</method>
		<method name="canvas_light_occluder_set_light_mask">
			<return type="void" />
			<argument index="0" name="occluder" type="RID" />
			<argument index="1" name="mask" type="int" />
			<description>
				Маска света. Более подробную информацию о световых масках см. в [LightOccluder2D].
			</description>
		</method>
		<method name="canvas_light_occluder_set_polygon">
			<return type="void" />
			<argument index="0" name="occluder" type="RID" />
			<argument index="1" name="polygon" type="RID" />
			<description>
				Устанавливает полигон светового окклюдера.
			</description>
		</method>
		<method name="canvas_light_occluder_set_transform">
			<return type="void" />
			<argument index="0" name="occluder" type="RID" />
			<argument index="1" name="transform" type="Transform2D" />
			<description>
				Устанавливает [Transform2D] светового окклюдера.
			</description>
		</method>
		<method name="canvas_light_set_color">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Устанавливает цвет для освещения.
			</description>
		</method>
		<method name="canvas_light_set_enabled">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Включает или выключает подсветку холста.
			</description>
		</method>
		<method name="canvas_light_set_energy">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="energy" type="float" />
			<description>
				Устанавливает энергию освещения холста.
			</description>
		</method>
		<method name="canvas_light_set_height">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="height" type="float" />
			<description>
				Устанавливает высоту подсветки холста.
			</description>
		</method>
		<method name="canvas_light_set_item_cull_mask">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="mask" type="int" />
			<description>
				Маска света. Более подробную информацию о световых масках см. в [LightOccluder2D].
			</description>
		</method>
		<method name="canvas_light_set_item_shadow_cull_mask">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="mask" type="int" />
			<description>
				Двоичная маска, используемая для определения слоев, на которые воздействует тень от света на холсте. Дополнительную информацию о масках света см. в [LightOccluder2D].
			</description>
		</method>
		<method name="canvas_light_set_layer_range">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="min_layer" type="int" />
			<argument index="2" name="max_layer" type="int" />
			<description>
				Диапазон слоев, который будет отображаться при данном освещении.
			</description>
		</method>
		<method name="canvas_light_set_mode">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="mode" type="int" enum="VisualServer.CanvasLightMode" />
			<description>
				Режим работы подсветки, см. константы [enum CanvasLightMode].
			</description>
		</method>
		<method name="canvas_light_set_scale">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="scale" type="float" />
			<description>
				Устанавливает масштабный коэффициент текстуры света. Эквивалентно [member Light2D.texture_scale].
			</description>
		</method>
		<method name="canvas_light_set_shadow_buffer_size">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="size" type="int" />
			<description>
				Устанавливает ширину теневого буфера, при этом размер масштабируется до следующей степени двойки.
			</description>
		</method>
		<method name="canvas_light_set_shadow_color">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Устанавливает цвет тени света холста.
			</description>
		</method>
		<method name="canvas_light_set_shadow_enabled">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Включает или выключает тень на холсте.
			</description>
		</method>
		<method name="canvas_light_set_shadow_filter">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="filter" type="int" enum="VisualServer.CanvasLightShadowFilter" />
			<description>
				Устанавливает фильтр тени света холста, см. константы [enum CanvasLightShadowFilter].
			</description>
		</method>
		<method name="canvas_light_set_shadow_gradient_length">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="length" type="float" />
			<description>
				Устанавливает длину градиента тени.
			</description>
		</method>
		<method name="canvas_light_set_shadow_smooth">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="smooth" type="float" />
			<description>
				Сглаживает тень. Чем ниже, тем ровнее.
			</description>
		</method>
		<method name="canvas_light_set_texture">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="texture" type="RID" />
			<description>
				Задает текстуру, которая будет использоваться светом. Эквивалентно [member Light2D.texture].
			</description>
		</method>
		<method name="canvas_light_set_texture_offset">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="offset" type="Vector2" />
			<description>
				Устанавливает смещение текстуры света. Эквивалентно [member Light2D.offset].
			</description>
		</method>
		<method name="canvas_light_set_transform">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="transform" type="Transform2D" />
			<description>
				Устанавливает [Transform2D] освещения холста.
			</description>
		</method>
		<method name="canvas_light_set_z_range">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="min_z" type="int" />
			<argument index="2" name="max_z" type="int" />
			<description>
				Устанавливает диапазон Z объектов, на которые будет воздействовать данный свет. Эквивалентно [member Light2D.range_z_min] и [member Light2D.range_z_max].
			</description>
		</method>
		<method name="canvas_occluder_polygon_create">
			<return type="RID" />
			<description>
				Создает новый полигон светового окклюдера и добавляет его в VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]canvas_occluder_polygon_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer(-а)
			</description>
		</method>
		<method name="canvas_occluder_polygon_set_cull_mode">
			<return type="void" />
			<argument index="0" name="occluder_polygon" type="RID" />
			<argument index="1" name="mode" type="int" enum="VisualServer.CanvasOccluderPolygonCullMode" />
			<description>
				Устанавливает режим обрезки полигонов окклюдера. См. константы [enum CanvasOccluderPolygonCullMode].
			</description>
		</method>
		<method name="canvas_occluder_polygon_set_shape">
			<return type="void" />
			<argument index="0" name="occluder_polygon" type="RID" />
			<argument index="1" name="shape" type="PoolVector2Array" />
			<argument index="2" name="closed" type="bool" />
			<description>
				Задает форму многоугольника окклюдера.
			</description>
		</method>
		<method name="canvas_occluder_polygon_set_shape_as_lines">
			<return type="void" />
			<argument index="0" name="occluder_polygon" type="RID" />
			<argument index="1" name="shape" type="PoolVector2Array" />
			<description>
				Устанавливает форму многоугольника окклюдера в виде линий.
			</description>
		</method>
		<method name="canvas_set_item_mirroring">
			<return type="void" />
			<argument index="0" name="canvas" type="RID" />
			<argument index="1" name="item" type="RID" />
			<argument index="2" name="mirroring" type="Vector2" />
			<description>
				Копия элемента холста будет нарисована с локальным смещением зеркального отображения [Vector2].
			</description>
		</method>
		<method name="canvas_set_modulate">
			<return type="void" />
			<argument index="0" name="canvas" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Модулирует все цвета в заданном холсте.
			</description>
		</method>
		<method name="directional_light_create">
			<return type="RID" />
			<description>
				Создает направленный свет и добавляет его в VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID может быть использован в большинстве [code]light_*[/code] функций VisualServer.
				После завершения работы с RID необходимо освободить его с помощью статического метода [method free_rid] VisualServer(-а)
				Для размещения в сцене прикрепите этот направленный свет к экземпляру с помощью метода [method instance_set_base], используя возвращенный RID.
			</description>
		</method>
		<method name="draw">
			<return type="void" />
			<argument index="0" name="swap_buffers" type="bool" default="true" />
			<argument index="1" name="frame_step" type="float" default="0.0" />
			<description>
				Рисует кадр. [i]Этот метод устарел[/i], вместо него используйте [method force_draw].
			</description>
		</method>
		<method name="environment_create">
			<return type="RID" />
			<description>
				Создает среду и добавляет ее к VisualServer. Доступ к ней осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]environment_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer(-а)
			</description>
		</method>
		<method name="environment_set_adjustment">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<argument index="2" name="brightness" type="float" />
			<argument index="3" name="contrast" type="float" />
			<argument index="4" name="saturation" type="float" />
			<argument index="5" name="ramp" type="RID" />
			<description>
				Устанавливает значения, которые будут использоваться с эффектом постобработки "Adjustment". Более подробную информацию см. в разделе [Environment].
			</description>
		</method>
		<method name="environment_set_ambient_light">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="color" type="Color" />
			<argument index="2" name="energy" type="float" default="1.0" />
			<argument index="3" name="sky_contibution" type="float" default="0.0" />
			<description>
				Устанавливает параметры окружающего освещения. Более подробную информацию см. в разделе [Environment].
			</description>
		</method>
		<method name="environment_set_background">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="bg" type="int" enum="VisualServer.EnvironmentBG" />
			<description>
				Устанавливает [i]BGMode[/i] окружения. Эквивалентно [member Environment.background_mode].
			</description>
		</method>
		<method name="environment_set_bg_color">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Цвет, отображаемый для прозрачных участков сцены (при использовании режимов Custom color или Color+Sky background).
			</description>
		</method>
		<method name="environment_set_bg_energy">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="energy" type="float" />
			<description>
				Устанавливает интенсивность цвета фона.
			</description>
		</method>
		<method name="environment_set_canvas_max_layer">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="max_layer" type="int" />
			<description>
				Устанавливает максимальный слой, используемый при использовании фонового режима Canvas.
			</description>
		</method>
		<method name="environment_set_dof_blur_far">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<argument index="2" name="distance" type="float" />
			<argument index="3" name="transition" type="float" />
			<argument index="4" name="far_amount" type="float" />
			<argument index="5" name="quality" type="int" enum="VisualServer.EnvironmentDOFBlurQuality" />
			<description>
				Устанавливает значения для использования эффекта постобработки "DoF Far Blur". Более подробную информацию см. в разделе [Environment].
			</description>
		</method>
		<method name="environment_set_dof_blur_near">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<argument index="2" name="distance" type="float" />
			<argument index="3" name="transition" type="float" />
			<argument index="4" name="far_amount" type="float" />
			<argument index="5" name="quality" type="int" enum="VisualServer.EnvironmentDOFBlurQuality" />
			<description>
				Устанавливает значения, которые будут использоваться для эффекта постобработки "DoF Near Blur". Более подробную информацию см. в разделе [Environment].
			</description>
		</method>
		<method name="environment_set_fog">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<argument index="2" name="color" type="Color" />
			<argument index="3" name="sun_color" type="Color" />
			<argument index="4" name="sun_amount" type="float" />
			<description>
				Устанавливает переменные, которые будут использоваться с туманом сцены. Более подробную информацию см. в разделе [Environment].
			</description>
		</method>
		<method name="environment_set_fog_depth">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<argument index="2" name="depth_begin" type="float" />
			<argument index="3" name="depth_end" type="float" />
			<argument index="4" name="depth_curve" type="float" />
			<argument index="5" name="transmit" type="bool" />
			<argument index="6" name="transmit_curve" type="float" />
			<description>
				Устанавливает переменные, которые будут использоваться при работе с эффектом глубины тумана. Более подробную информацию см. в разделе [Environment].
			</description>
		</method>
		<method name="environment_set_fog_height">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<argument index="2" name="min_height" type="float" />
			<argument index="3" name="max_height" type="float" />
			<argument index="4" name="height_curve" type="float" />
			<description>
				Устанавливает переменные, которые будут использоваться с эффектом высоты тумана. Более подробную информацию см. в разделе [Environment].
			</description>
		</method>
		<method name="environment_set_glow">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<argument index="2" name="level_flags" type="int" />
			<argument index="3" name="intensity" type="float" />
			<argument index="4" name="strength" type="float" />
			<argument index="5" name="bloom_threshold" type="float" />
			<argument index="6" name="blend_mode" type="int" enum="VisualServer.EnvironmentGlowBlendMode" />
			<argument index="7" name="hdr_bleed_threshold" type="float" />
			<argument index="8" name="hdr_bleed_scale" type="float" />
			<argument index="9" name="hdr_luminance_cap" type="float" />
			<argument index="10" name="bicubic_upscale" type="bool" />
			<argument index="11" name="high_quality" type="bool" />
			<description>
				Устанавливает переменные, которые будут использоваться с эффектом постобработки "свечение". Более подробную информацию см. в разделе [Environment].
			</description>
		</method>
		<method name="environment_set_sky">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="sky" type="RID" />
			<description>
				Устанавливает [Sky], который будет использоваться в качестве фона окружения при использовании [i]BGMode[/i] sky. Эквивалентно [member Environment.background_sky
			</description>
		</method>
		<method name="environment_set_sky_custom_fov">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="scale" type="float" />
			<description>
				Устанавливает пользовательское поле зрения для фона [Sky]. Эквивалентно [member Environment.background_sky_custom_fov].
			</description>
		</method>
		<method name="environment_set_sky_orientation">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="orientation" type="Basis" />
			<description>
				Задает вращение фонового [Sky], выраженное в виде [Basis]. Эквивалентно [member Environment.background_sky_orientation].
			</description>
		</method>
		<method name="environment_set_ssao">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<argument index="2" name="radius" type="float" />
			<argument index="3" name="intensity" type="float" />
			<argument index="4" name="radius2" type="float" />
			<argument index="5" name="intensity2" type="float" />
			<argument index="6" name="bias" type="float" />
			<argument index="7" name="light_affect" type="float" />
			<argument index="8" name="ao_channel_affect" type="float" />
			<argument index="9" name="color" type="Color" />
			<argument index="10" name="quality" type="int" enum="VisualServer.EnvironmentSSAOQuality" />
			<argument index="11" name="blur" type="int" enum="VisualServer.EnvironmentSSAOBlur" />
			<argument index="12" name="bilateral_sharpness" type="float" />
			<description>
				Устанавливает переменные для использования эффекта постобработки "Screen Space Ambient Occlusion (SSAO)". Более подробную информацию см. в разделе [Environment].
			</description>
		</method>
		<method name="environment_set_ssr">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<argument index="2" name="max_steps" type="int" />
			<argument index="3" name="fade_in" type="float" />
			<argument index="4" name="fade_out" type="float" />
			<argument index="5" name="depth_tolerance" type="float" />
			<argument index="6" name="roughness" type="bool" />
			<description>
				Устанавливает переменные для использования эффекта постобработки "screen space reflections". Более подробную информацию см. в разделе [Environment].
			</description>
		</method>
		<method name="environment_set_tonemap">
			<return type="void" />
			<argument index="0" name="env" type="RID" />
			<argument index="1" name="tone_mapper" type="int" enum="VisualServer.EnvironmentToneMapper" />
			<argument index="2" name="exposure" type="float" />
			<argument index="3" name="white" type="float" />
			<argument index="4" name="auto_exposure" type="bool" />
			<argument index="5" name="min_luminance" type="float" />
			<argument index="6" name="max_luminance" type="float" />
			<argument index="7" name="auto_exp_speed" type="float" />
			<argument index="8" name="auto_exp_grey" type="float" />
			<description>
				Устанавливает переменные, которые будут использоваться с эффектом постобработки "tonemap". Более подробную информацию см. в разделе [Environment].
			</description>
		</method>
		<method name="finish">
			<return type="void" />
			<description>
				Удаляет буферы и очищает тестовые кубы.
			</description>
		</method>
		<method name="force_draw">
			<return type="void" />
			<argument index="0" name="swap_buffers" type="bool" default="true" />
			<argument index="1" name="frame_step" type="float" default="0.0" />
			<description>
				Заставляет рисовать рамку при вызове функции. При рисовании рамки обновляются все [Viewport](-ы), для которых установлена функция обновления. Использовать с особой осторожностью.
			</description>
		</method>
		<method name="force_sync">
			<return type="void" />
			<description>
				Синхронизирует потоки.
			</description>
		</method>
		<method name="free_rid">
			<return type="void" />
			<argument index="0" name="rid" type="RID" />
			<description>
				Пытается освободить объект в VisualServer.
			</description>
		</method>
		<method name="get_render_info">
			<return type="int" />
			<argument index="0" name="info" type="int" enum="VisualServer.RenderInfo" />
			<description>
				Возвращает определенную информацию, варианты см. в [enum RenderInfo].
			</description>
		</method>
		<method name="get_test_cube">
			<return type="RID" />
			<description>
				Возвращает идентификатор тестового куба. Создает его, если он не существует.
			</description>
		</method>
		<method name="get_test_texture">
			<return type="RID" />
			<description>
				Возвращает идентификатор тестовой текстуры. Создает ее, если таковой не существует.
			</description>
		</method>
		<method name="get_video_adapter_name" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает имя видеоадаптера (например, "GeForce GTX 1080/PCIe/SSE2").
				[b]Примечание:[/b] При запуске headless или серверного бинарника эта функция возвращает пустую строку.
			</description>
		</method>
		<method name="get_video_adapter_vendor" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает производителя видеоадаптера (например, "NVIDIA Corporation").
				[b]Примечание:[/b] При запуске headless или серверного бинарника эта функция возвращает пустую строку.
			</description>
		</method>
		<method name="get_white_texture">
			<return type="RID" />
			<description>
				Возвращает идентификатор белой текстуры. Создает ее, если таковой не существует.
			</description>
		</method>
		<method name="gi_probe_create">
			<return type="RID" />
			<description>
				Создает GI-зонд и добавляет его в VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]gi_probe_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer.
				Для размещения в сцене прикрепите этот GI-зонд к экземпляру с помощью метода [method instance_set_base], используя возвращенный RID.
			</description>
		</method>
		<method name="gi_probe_get_bias" qualifiers="const">
			<return type="float" />
			<argument index="0" name="probe" type="RID" />
			<description>
				Возвращает значение смещения для GI-зонда. Смещение используется для предотвращения самозатемнения. Эквивалентно [member GIProbeData.bias].
			</description>
		</method>
		<method name="gi_probe_get_bounds" qualifiers="const">
			<return type="AABB" />
			<argument index="0" name="probe" type="RID" />
			<description>
				Возвращает выровненную по оси ограничительную рамку, которая охватывает всю площадь GI-зонда.
			</description>
		</method>
		<method name="gi_probe_get_cell_size" qualifiers="const">
			<return type="float" />
			<argument index="0" name="probe" type="RID" />
			<description>
				Возвращает размер ячейки, установленный [method gi_probe_set_cell_size].
			</description>
		</method>
		<method name="gi_probe_get_dynamic_data" qualifiers="const">
			<return type="PoolIntArray" />
			<argument index="0" name="probe" type="RID" />
			<description>
				Возвращает данные, используемые зондом GI.
			</description>
		</method>
		<method name="gi_probe_get_dynamic_range" qualifiers="const">
			<return type="int" />
			<argument index="0" name="probe" type="RID" />
			<description>
				Возвращает динамический диапазон, установленный для данного GI-зонда. Эквивалентно [member GIProbe.dynamic_range].
			</description>
		</method>
		<method name="gi_probe_get_energy" qualifiers="const">
			<return type="float" />
			<argument index="0" name="probe" type="RID" />
			<description>
				Возвращает множитель энергии для данного GI-зонда. Эквивалентно [member GIProbe.energy].
			</description>
		</method>
		<method name="gi_probe_get_normal_bias" qualifiers="const">
			<return type="float" />
			<argument index="0" name="probe" type="RID" />
			<description>
				Возвращает нормальное смещение для данного GI-зонда. Эквивалентно [member GIProbe.normal_bias].
			</description>
		</method>
		<method name="gi_probe_get_propagation" qualifiers="const">
			<return type="float" />
			<argument index="0" name="probe" type="RID" />
			<description>
				Возвращает значение распространения для данного GI-зонда. Эквивалентно [member GIProbe.propagation].
			</description>
		</method>
		<method name="gi_probe_get_to_cell_xform" qualifiers="const">
			<return type="Transform" />
			<argument index="0" name="probe" type="RID" />
			<description>
				Возвращает преобразование, установленное [method gi_probe_set_to_cell_xform].
			</description>
		</method>
		<method name="gi_probe_is_compressed" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="probe" type="RID" />
			<description>
				Возвращает [code]true[/code], если данные GI-зонда, связанные с этим GI-зондом, сжаты. Эквивалентно [member GIProbe.compress].
			</description>
		</method>
		<method name="gi_probe_is_interior" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="probe" type="RID" />
			<description>
				Возвращает [code]true[/code], если для GI-зонда установлено значение interior, что означает, что он не учитывает свет неба. Эквивалентно [member GIProbe.interior].
			</description>
		</method>
		<method name="gi_probe_set_bias">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="bias" type="float" />
			<description>
				Устанавливает значение смещения для предотвращения самозамыкания. Эквивалентно [member GIProbe.bias].
			</description>
		</method>
		<method name="gi_probe_set_bounds">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="bounds" type="AABB" />
			<description>
				Задает выровненную по оси ограничительную рамку, охватывающую область GI-зонда.
			</description>
		</method>
		<method name="gi_probe_set_cell_size">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="range" type="float" />
			<description>
				Устанавливает размер отдельных ячеек в GI-зонде.
			</description>
		</method>
		<method name="gi_probe_set_compress">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Устанавливает параметр сжатия данных GI-зонда. Сжатые данные занимают меньше места, но могут выглядеть хуже. Эквивалентно [member GIProbe.compress].
			</description>
		</method>
		<method name="gi_probe_set_dynamic_data">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="data" type="PoolIntArray" />
			<description>
				Устанавливает данные, которые будут использоваться в GI-зонде для расчетов освещения. Обычно он создается и вызывается внутри узла [GIProbe]. Не следует пытаться задать его самостоятельно.
			</description>
		</method>
		<method name="gi_probe_set_dynamic_range">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="range" type="int" />
			<description>
				Устанавливает динамический диапазон GI-зонда. Динамический диапазон задает предел яркости освещения. Меньший диапазон позволяет получить больше деталей, но ограничивает яркость освещения. Эквивалентно [member GIProbe.dynamic_range].
			</description>
		</method>
		<method name="gi_probe_set_energy">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="energy" type="float" />
			<description>
				Устанавливает множитель энергии для данного GI-зонда. При более высокой энергии непрямой свет от GI-зонда становится ярче. Эквивалентно [member GIProbe.energy].
			</description>
		</method>
		<method name="gi_probe_set_interior">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Устанавливает внутреннее значение этого GI-зонда. GI-зонд, имеющий значение interior, не учитывает небо при расчете освещения. Эквивалентно [member GIProbe.interior].
			</description>
		</method>
		<method name="gi_probe_set_normal_bias">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="bias" type="float" />
			<description>
				Устанавливает нормальное смещение для данного GI-зонда. Нормальное смещение ведет себя аналогично другим формам смещения и может помочь уменьшить самозамыкание. Эквивалентно [member GIProbe.normal_bias].
			</description>
		</method>
		<method name="gi_probe_set_propagation">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="propagation" type="float" />
			<description>
				Устанавливает распространение света внутри данного GI-зонда. Эквивалентно [member GIProbe.propagation].
			</description>
		</method>
		<method name="gi_probe_set_to_cell_xform">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="xform" type="Transform" />
			<description>
				Устанавливает ячейку [Transform] для данного GI-зонда.
			</description>
		</method>
		<method name="has_changed" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="queried_priority" type="int" enum="VisualServer.ChangedPriority" default="0" />
			<description>
				Возвращает [code]true[/code], если в данные VisualServer были внесены изменения. Обычно в этом случае вызывается [method draw].
				Поскольку изменения регистрируются как высоко- или низкоприоритетные (например, динамические шейдеры), эта функция принимает необязательный аргумент для запроса изменений низкого или высокого приоритета, или любых изменений.
			</description>
		</method>
		<method name="has_feature" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="feature" type="int" enum="VisualServer.Features" />
			<description>
				Пока не реализовано. Всегда возвращает [code]false[/code].
			</description>
		</method>
		<method name="has_os_feature" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="feature" type="String" />
			<description>
				Возвращает [code]true[/code], если ОС поддерживает определенную функцию. Функциями могут быть [code]s3tc[/code], [code]etc[/code], [code]etc2[/code], [code]pvrtc[/code] и [code]skinning_fallback[/code].
				При рендеринге с использованием GLES2 возвращает [code]true[/code] с [code]skinning_fallback[/code] в случае, если аппаратное обеспечение не поддерживает процесс скинирования на GPU по умолчанию.
			</description>
		</method>
		<method name="immediate_begin">
			<return type="void" />
			<argument index="0" name="immediate" type="RID" />
			<argument index="1" name="primitive" type="int" enum="VisualServer.PrimitiveType" />
			<argument index="2" name="texture" type="RID" />
			<description>
				Устанавливает внутренние компоненты [ImmediateGeometry] для подготовки к рисованию. Эквивалентно [method ImmediateGeometry.begin].
			</description>
		</method>
		<method name="immediate_clear">
			<return type="void" />
			<argument index="0" name="immediate" type="RID" />
			<description>
				Очищает все, что было установлено между [method immediate_begin] и [method immediate_end]. Эквивалентно [method ImmediateGeometry.clear].
			</description>
		</method>
		<method name="immediate_color">
			<return type="void" />
			<argument index="0" name="immediate" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Устанавливает цвет, который будет использоваться со следующей вершиной. Эквивалентно [method ImmediateGeometry.set_color].
			</description>
		</method>
		<method name="immediate_create">
			<return type="RID" />
			<description>
				Создает непосредственную геометрию и добавляет ее в VisualServer. Доступ к ней осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]immediate_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить его с помощью статического метода [method free_rid] VisualServer'а.
				Для размещения в сцене прикрепите эту немедленную геометрию к экземпляру с помощью метода [method instance_set_base], используя возвращенный RID.
			</description>
		</method>
		<method name="immediate_end">
			<return type="void" />
			<argument index="0" name="immediate" type="RID" />
			<description>
				Завершает отрисовку [ImmediateGeometry] и выводит ее на экран. Эквивалентно [method ImmediateGeometry.end].
			</description>
		</method>
		<method name="immediate_get_material" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="immediate" type="RID" />
			<description>
				Возвращает материал, присвоенный [ImmediateGeometry].
			</description>
		</method>
		<method name="immediate_normal">
			<return type="void" />
			<argument index="0" name="immediate" type="RID" />
			<argument index="1" name="normal" type="Vector3" />
			<description>
				Устанавливает нормаль, которая будет использоваться со следующей вершиной. Эквивалентно [method ImmediateGeometry.set_normal].
			</description>
		</method>
		<method name="immediate_set_material">
			<return type="void" />
			<argument index="0" name="immediate" type="RID" />
			<argument index="1" name="material" type="RID" />
			<description>
				Устанавливает материал, который будет использоваться для отрисовки [ImmediateGeometry].
			</description>
		</method>
		<method name="immediate_tangent">
			<return type="void" />
			<argument index="0" name="immediate" type="RID" />
			<argument index="1" name="tangent" type="Plane" />
			<description>
				Устанавливает касательную, которая будет использоваться со следующей вершиной. Эквивалентно [method ImmediateGeometry.set_tangent].
			</description>
		</method>
		<method name="immediate_uv">
			<return type="void" />
			<argument index="0" name="immediate" type="RID" />
			<argument index="1" name="tex_uv" type="Vector2" />
			<description>
				Устанавливает UV, которое будет использоваться со следующей вершиной. Эквивалентно [method ImmediateGeometry.set_uv].
			</description>
		</method>
		<method name="immediate_uv2">
			<return type="void" />
			<argument index="0" name="immediate" type="RID" />
			<argument index="1" name="tex_uv" type="Vector2" />
			<description>
				Устанавливает UV2, который будет использоваться со следующей вершиной. Эквивалентно [method ImmediateGeometry.set_uv2].
			</description>
		</method>
		<method name="immediate_vertex">
			<return type="void" />
			<argument index="0" name="immediate" type="RID" />
			<argument index="1" name="vertex" type="Vector3" />
			<description>
				Добавляет следующую вершину, используя заранее предоставленную информацию. Эквивалентно [method ImmediateGeometry.add_vertex].
			</description>
		</method>
		<method name="immediate_vertex_2d">
			<return type="void" />
			<argument index="0" name="immediate" type="RID" />
			<argument index="1" name="vertex" type="Vector2" />
			<description>
				Добавляет следующую вершину, используя заранее предоставленную информацию. Это вспомогательный класс, который вызывает [method immediate_vertex] под капотом. Эквивалентен [method ImmediateGeometry.add_vertex].
			</description>
		</method>
		<method name="init">
			<return type="void" />
			<description>
				Инициализирует визуальный сервер. Эта функция вызывается внутренним платформозависимым кодом при инициализации движка. Если ее вызвать из запущенной игры, она ничего не сделает.
			</description>
		</method>
		<method name="instance_attach_object_instance_id">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="id" type="int" />
			<description>
				Прикрепляет уникальный идентификатор объекта к экземпляру. Идентификатор объекта должен быть привязан к экземпляру для правильной сортировки с помощью [method instances_cull_aabb], [method instances_cull_convex] и [method instances_cull_ray].
			</description>
		</method>
		<method name="instance_attach_skeleton">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="skeleton" type="RID" />
			<description>
				Присоединяет скелет к экземпляру. Удаляет предыдущий скелет из экземпляра.
			</description>
		</method>
		<method name="instance_create">
			<return type="RID" />
			<description>
				Создает экземпляр визуального образа и добавляет его на VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]instance_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer'а.
				Экземпляр - это способ размещения 3D-объекта в сценарии. Такие объекты, как частицы, сетки и зонды отражения, должны быть связаны с экземпляром, чтобы быть видимыми в сценарии с помощью метода [method instance_set_base].
			</description>
		</method>
		<method name="instance_create2">
			<return type="RID" />
			<argument index="0" name="base" type="RID" />
			<argument index="1" name="scenario" type="RID" />
			<description>
				Создает визуальный экземпляр, добавляет его к VisualServer и задает базовый и сценарный сценарии. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]instance_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer(-а).
			</description>
		</method>
		<method name="instance_geometry_set_cast_shadows_setting">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="shadow_casting_setting" type="int" enum="VisualServer.ShadowCastingSetting" />
			<description>
				Устанавливает настройку отбрасывания тени в одно из значений [enum ShadowCastingSetting]. Эквивалентно [member GeometryInstance.cast_shadow].
			</description>
		</method>
		<method name="instance_geometry_set_flag">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="flag" type="int" enum="VisualServer.InstanceFlags" />
			<argument index="2" name="enabled" type="bool" />
			<description>
				Устанавливает флаг для данного [enum InstanceFlags]. Более подробную информацию см. в разделе [enum InstanceFlags].
			</description>
		</method>
		<method name="instance_geometry_set_material_overlay">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="material" type="RID" />
			<description>
				Устанавливает материал, который будет отображаться для всех поверхностей поверх активных материалов для сетки, связанной с данным экземпляром. Эквивалентно [member GeometryInstance.material_overlay].
			</description>
		</method>
		<method name="instance_geometry_set_material_override">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="material" type="RID" />
			<description>
				Задает материал, который будет переопределять материал для всех поверхностей сетки, связанной с данным экземпляром. Эквивалентно [member GeometryInstance.material_override].
			</description>
		</method>
		<method name="instance_set_base">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="base" type="RID" />
			<description>
				Устанавливает базу экземпляра. Базой может быть любой из 3D-объектов, созданных в VisualServer, который может быть отображен. Например, любой из типов света, сетка, мультимеш, непосредственная геометрия, система частиц, датчик отражения, захват карты света и датчик GI - все это типы, которые могут быть установлены в качестве основы экземпляра для отображения в сценарии.
			</description>
		</method>
		<method name="instance_set_blend_shape_weight">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="shape" type="int" />
			<argument index="2" name="weight" type="float" />
			<description>
				Устанавливает вес для данной формы смешивания, связанной с данным экземпляром.
			</description>
		</method>
		<method name="instance_set_custom_aabb">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="aabb" type="AABB" />
			<description>
				Устанавливает пользовательский AABB для использования при выделении объектов из фруста вида. Эквивалентно [method GeometryInstance.set_custom_aabb].
			</description>
		</method>
		<method name="instance_set_exterior">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Функция не реализована в Godot 3.x.
			</description>
		</method>
		<method name="instance_set_extra_visibility_margin">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="margin" type="float" />
			<description>
				Устанавливает поле для увеличения размера AABB при выбраковке объектов из области обзора. Это позволяет избежать выбраковки объектов, попадающих за пределы области обзора. Эквивалентно [member GeometryInstance.extra_cull_margin].
			</description>
		</method>
		<method name="instance_set_layer_mask">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="mask" type="int" />
			<description>
				Устанавливает слои рендеринга, на которых будет отрисовываться данный экземпляр. Эквивалентно [member VisualInstance.layers].
			</description>
		</method>
		<method name="instance_set_scenario">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="scenario" type="RID" />
			<description>
				Устанавливает сценарий, в котором находится экземпляр. Сценарий - это 3D-мир, в котором будут отображаться объекты.
			</description>
		</method>
		<method name="instance_set_surface_material">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="surface" type="int" />
			<argument index="2" name="material" type="RID" />
			<description>
				Устанавливает материал конкретной поверхности. Эквивалентно [method MeshInstance.set_surface_material].
			</description>
		</method>
		<method name="instance_set_transform">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="transform" type="Transform" />
			<description>
				Устанавливает преобразование мирового пространства экземпляра. Эквивалентно [member Spatial.transform].
			</description>
		</method>
		<method name="instance_set_use_lightmap">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="lightmap_instance" type="RID" />
			<argument index="2" name="lightmap" type="RID" />
			<argument index="3" name="lightmap_slice" type="int" default="-1" />
			<argument index="4" name="lightmap_uv_rect" type="Rect2" default="Rect2( 0, 0, 1, 1 )" />
			<description>
				Устанавливает световую карту, используемую с данным экземпляром.
			</description>
		</method>
		<method name="instance_set_visible">
			<return type="void" />
			<argument index="0" name="instance" type="RID" />
			<argument index="1" name="visible" type="bool" />
			<description>
				Устанавливает, будет ли экземпляр отрисован или нет. Эквивалентно [member Spatial.visible].
			</description>
		</method>
		<method name="instances_cull_aabb" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="aabb" type="AABB" />
			<argument index="1" name="scenario" type="RID" />
			<description>
				Возвращает массив идентификаторов объектов, пересекающихся с заданным AABB. Учитываются только визуальные 3D-узлы, такие как [MeshInstance] или [DirectionalLight]. Для получения реальных узлов используйте [method @GDScript.instance_from_id]. Необходимо указать RID сценария, который доступен в [World], который вы хотите запросить. Это заставит обновить все ресурсы, стоящие в очереди на обновление.
				[b]Предупреждение:[/b] Эта функция предназначена в первую очередь для использования в редакторе. Для использования в игре предпочтите физические столкновения.
			</description>
		</method>
		<method name="instances_cull_convex" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="convex" type="Array" />
			<argument index="1" name="scenario" type="RID" />
			<description>
				Возвращает массив идентификаторов объектов, пересекающихся с заданной выпуклой формой. Учитываются только визуальные 3D-узлы, такие как [MeshInstance] или [DirectionalLight]. Для получения реальных узлов используйте [метод @GDScript.instance_from_id]. Необходимо указать RID сценария, который доступен в [World], который вы хотите запросить. Это заставит обновить все ресурсы, стоящие в очереди на обновление.
				[b]Предупреждение:[/b] Эта функция предназначена в первую очередь для использования в редакторе. Для использования в игре предпочтите физические столкновения.
			</description>
		</method>
		<method name="instances_cull_ray" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="from" type="Vector3" />
			<argument index="1" name="to" type="Vector3" />
			<argument index="2" name="scenario" type="RID" />
			<description>
				Возвращает массив идентификаторов объектов, пересекающихся с указанным 3D-лучом. Учитываются только визуальные 3D-узлы, такие как [MeshInstance] или [DirectionalLight]. Для получения реальных узлов используйте [method @GDScript.instance_from_id]. Необходимо указать RID сценария, который доступен в [World], который вы хотите запросить. Это заставит обновить все ресурсы, стоящие в очереди на обновление.
				[b]Предупреждение:[/b] Эта функция предназначена в первую очередь для использования в редакторе. Для использования в игре предпочтите физические столкновения.
			</description>
		</method>
		<method name="light_directional_set_blend_splits">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Если [code]true[/code], то этот направленный свет будет смешиваться между сплитами карты теней, что приведет к более плавному переходу между ними. Эквивалентно [member DirectionalLight.directional_shadow_blend_splits].
			</description>
		</method>
		<method name="light_directional_set_shadow_depth_range_mode">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="range_mode" type="int" enum="VisualServer.LightDirectionalShadowDepthRangeMode" />
			<description>
				Устанавливает режим диапазона глубины тени для данного направленного света. Эквивалентно [member DirectionalLight.directional_shadow_depth_range]. Опции см. в [enum LightDirectionalShadowDepthRangeMode].
			</description>
		</method>
		<method name="light_directional_set_shadow_mode">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="mode" type="int" enum="VisualServer.LightDirectionalShadowMode" />
			<description>
				Устанавливает режим тени для данного направленного света. Эквивалентно [member DirectionalLight.directional_shadow_mode]. Опции см. в [enum LightDirectionalShadowMode].
			</description>
		</method>
		<method name="light_omni_set_shadow_detail">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="detail" type="int" enum="VisualServer.LightOmniShadowDetail" />
			<description>
				Устанавливает, использовать ли вертикальную или горизонтальную детализацию для данного омни-света. Это может быть использовано для уменьшения артефактов на карте теней. Эквивалентно [member OmniLight.omni_shadow_detail].
			</description>
		</method>
		<method name="light_omni_set_shadow_mode">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="mode" type="int" enum="VisualServer.LightOmniShadowMode" />
			<description>
				Устанавливает, использовать ли для карты теней двойной параболоид или кубическую карту. Двойной параболоид быстрее, но может страдать от артефактов. Эквивалентно [member OmniLight.omni_shadow_mode].
			</description>
		</method>
		<method name="light_set_bake_mode">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="bake_mode" type="int" enum="VisualServer.LightBakeMode" />
			<description>
				Устанавливает режим запекания для данного света, варианты см. в [enum LightBakeMode]. Режим запекания влияет на то, как свет будет запекаться в [BakedLightmap]ах и [GIProbe](-ах).
			</description>
		</method>
		<method name="light_set_color">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Устанавливает цвет света. Эквивалентно [member Light.light_color].
			</description>
		</method>
		<method name="light_set_cull_mask">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="mask" type="int" />
			<description>
				Устанавливает маску обтравки для данного света. Свет действует только на объекты в выбранных слоях. Эквивалентно [member Light.light_cull_mask].
			</description>
		</method>
		<method name="light_set_negative">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Если [code]true[/code], то свет будет вычитать свет, а не прибавлять его. Эквивалентно [member Light.light_negative].
			</description>
		</method>
		<method name="light_set_param">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="param" type="int" enum="VisualServer.LightParam" />
			<argument index="2" name="value" type="float" />
			<description>
				Устанавливает указанный параметр освещения. Параметры см. в [enum LightParam]. Эквивалентно [method Light.set_param].
			</description>
		</method>
		<method name="light_set_projector">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="texture" type="RID" />
			<description>
				Не реализовано в Godot 3.x.
			</description>
		</method>
		<method name="light_set_reverse_cull_face_mode">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Если [code]true[/code], то изменяется на противоположную выбраковка сетки. Это может быть полезно, если у вас плоская сетка, за которой находится свет. Если необходимо отбрасывать тень с обеих сторон сетки, настройте сетку на использование двухсторонних теней с помощью [method instance_geometry_set_cast_shadows_setting]. Эквивалентно [member Light.shadow_reverse_cull_face].
			</description>
		</method>
		<method name="light_set_shadow">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Если [code]true[/code], свет будет отбрасывать тени. Эквивалентно [member Light.shadow_enabled].
			</description>
		</method>
		<method name="light_set_shadow_color">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Устанавливает цвет тени, отбрасываемой светильником. Эквивалентно [member Light.shadow_color].
			</description>
		</method>
		<method name="light_set_use_gi">
			<return type="void" />
			<argument index="0" name="light" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Устанавливает, будут ли GI-зонды захватывать информацию о свете от данного светильника. [i]Утративший силу метод.[/i] Вместо него используйте [method light_set_bake_mode]. Этот метод оставлен только для совместимости и вызывает внутренний метод [method light_set_bake_mode], устанавливая режим запекания в [constant LIGHT_BAKE_DISABLED] или [constant LIGHT_BAKE_INDIRECT] в зависимости от заданного параметра.
			</description>
		</method>
		<method name="lightmap_capture_create">
			<return type="RID" />
			<description>
				Создает захват лайтмапа и добавляет его на VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]lightmap_capture_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer.
				Для размещения в сцене прикрепите этот захват лайтмапа к экземпляру с помощью [method instance_set_base], используя возвращенный RID.
			</description>
		</method>
		<method name="lightmap_capture_get_bounds" qualifiers="const">
			<return type="AABB" />
			<argument index="0" name="capture" type="RID" />
			<description>
				Возвращает размер области захвата lightmap.
			</description>
		</method>
		<method name="lightmap_capture_get_energy" qualifiers="const">
			<return type="float" />
			<argument index="0" name="capture" type="RID" />
			<description>
				Возвращает множитель энергии, используемый при захвате lightmap.
			</description>
		</method>
		<method name="lightmap_capture_get_octree" qualifiers="const">
			<return type="PoolByteArray" />
			<argument index="0" name="capture" type="RID" />
			<description>
				Возвращает октри, используемый при захвате lightmap.
			</description>
		</method>
		<method name="lightmap_capture_get_octree_cell_subdiv" qualifiers="const">
			<return type="int" />
			<argument index="0" name="capture" type="RID" />
			<description>
				Возвращает количество делений ячеек, используемых октрием данного захвата lightmap.
			</description>
		</method>
		<method name="lightmap_capture_get_octree_cell_transform" qualifiers="const">
			<return type="Transform" />
			<argument index="0" name="capture" type="RID" />
			<description>
				Возвращает преобразование ячеек для октри данного захвата lightmap.
			</description>
		</method>
		<method name="lightmap_capture_is_interior" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="capture" type="RID" />
			<description>
				Возвращает [code]true[/code], если захват происходит в режиме "интерьер".
			</description>
		</method>
		<method name="lightmap_capture_set_bounds">
			<return type="void" />
			<argument index="0" name="capture" type="RID" />
			<argument index="1" name="bounds" type="AABB" />
			<description>
				Устанавливает размер области, охватываемой захватом лайтмапа. Эквивалентно [member BakedLightmapData.bounds].
			</description>
		</method>
		<method name="lightmap_capture_set_energy">
			<return type="void" />
			<argument index="0" name="capture" type="RID" />
			<argument index="1" name="energy" type="float" />
			<description>
				Устанавливает множитель энергии для данного захвата лайтмапа. Эквивалентно [member BakedLightmapData.energy].
			</description>
		</method>
		<method name="lightmap_capture_set_interior">
			<return type="void" />
			<argument index="0" name="capture" type="RID" />
			<argument index="1" name="interior" type="bool" />
			<description>
				Устанавливает режим "интерьер" для данного захвата лайтмапа. Эквивалентно [member BakedLightmapData.interior].
			</description>
		</method>
		<method name="lightmap_capture_set_octree">
			<return type="void" />
			<argument index="0" name="capture" type="RID" />
			<argument index="1" name="octree" type="PoolByteArray" />
			<description>
				Устанавливает октри, которое будет использоваться при захвате лайтмапа. Эта функция обычно используется узлом [BakedLightmap]. Эквивалентна [member BakedLightmapData.octree].
			</description>
		</method>
		<method name="lightmap_capture_set_octree_cell_subdiv">
			<return type="void" />
			<argument index="0" name="capture" type="RID" />
			<argument index="1" name="subdiv" type="int" />
			<description>
				Устанавливает уровень деления октри данного захвата лайтмапа. Эквивалентно [member BakedLightmapData.cell_subdiv]..
			</description>
		</method>
		<method name="lightmap_capture_set_octree_cell_transform">
			<return type="void" />
			<argument index="0" name="capture" type="RID" />
			<argument index="1" name="xform" type="Transform" />
			<description>
				Устанавливает преобразование ячеек октри для октри данного захвата лайтмапа. Эквивалентно [member BakedLightmapData.cell_space_transform].
			</description>
		</method>
		<method name="make_sphere_mesh">
			<return type="RID" />
			<argument index="0" name="latitudes" type="int" />
			<argument index="1" name="longitudes" type="int" />
			<argument index="2" name="radius" type="float" />
			<description>
				Возвращает сетку сферы с заданным количеством делений по горизонтали и вертикали.
			</description>
		</method>
		<method name="material_create">
			<return type="RID" />
			<description>
				Создает пустой материал и добавляет его на VisualServer. Доступ к нему возможен по возвращаемому RID. Этот RID будет использоваться во всех [code]material_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer'а.
			</description>
		</method>
		<method name="material_get_param" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="material" type="RID" />
			<argument index="1" name="parameter" type="String" />
			<description>
				Возвращает значение параметра определенного материала.
			</description>
		</method>
		<method name="material_get_param_default" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="material" type="RID" />
			<argument index="1" name="parameter" type="String" />
			<description>
				Возвращает значение по умолчанию для параметра param, если оно доступно. В противном случае возвращается [code]null[/code].
			</description>
		</method>
		<method name="material_get_shader" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="shader_material" type="RID" />
			<description>
				Возвращает шейдер шейдера определенного материала. Возвращает пустой RID, если у материала нет шейдера.
			</description>
		</method>
		<method name="material_set_line_width">
			<return type="void" />
			<argument index="0" name="material" type="RID" />
			<argument index="1" name="width" type="float" />
			<description>
				Устанавливает ширину линии материала.
			</description>
		</method>
		<method name="material_set_next_pass">
			<return type="void" />
			<argument index="0" name="material" type="RID" />
			<argument index="1" name="next_material" type="RID" />
			<description>
				Устанавливает следующий материал объекта.
			</description>
		</method>
		<method name="material_set_param">
			<return type="void" />
			<argument index="0" name="material" type="RID" />
			<argument index="1" name="parameter" type="String" />
			<argument index="2" name="value" type="Variant" />
			<description>
				Устанавливает параметр материала.
			</description>
		</method>
		<method name="material_set_render_priority">
			<return type="void" />
			<argument index="0" name="material" type="RID" />
			<argument index="1" name="priority" type="int" />
			<description>
				Устанавливает приоритет рендеринга материала.
			</description>
		</method>
		<method name="material_set_shader">
			<return type="void" />
			<argument index="0" name="shader_material" type="RID" />
			<argument index="1" name="shader" type="RID" />
			<description>
				Устанавливает шейдер материала.
			</description>
		</method>
		<method name="mesh_add_surface_from_arrays">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="primitive" type="int" enum="VisualServer.PrimitiveType" />
			<argument index="2" name="arrays" type="Array" />
			<argument index="3" name="blend_shapes" type="Array" default="[  ]" />
			<argument index="4" name="compress_format" type="int" default="2194432" />
			<description>
				Добавляет в сетку поверхность, сгенерированную из массивов. Типы см. в константах [enum PrimitiveType].
			</description>
		</method>
		<method name="mesh_clear">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<description>
				Удаляет все поверхности из сетки.
			</description>
		</method>
		<method name="mesh_create">
			<return type="RID" />
			<description>
				Создает новую сетку и добавляет ее на VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]mesh_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить его с помощью статического метода [method free_rid] VisualServer'а.
				Для размещения в сцене прикрепите эту сетку к экземпляру с помощью метода [method instance_set_base], используя возвращенный RID.
			</description>
		</method>
		<method name="mesh_get_blend_shape_count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="mesh" type="RID" />
			<description>
				Возвращает количество форм смешивания сетки.
			</description>
		</method>
		<method name="mesh_get_blend_shape_mode" qualifiers="const">
			<return type="int" enum="VisualServer.BlendShapeMode" />
			<argument index="0" name="mesh" type="RID" />
			<description>
				Возвращает режим наложения формы сетки.
			</description>
		</method>
		<method name="mesh_get_custom_aabb" qualifiers="const">
			<return type="AABB" />
			<argument index="0" name="mesh" type="RID" />
			<description>
				Возвращает пользовательский aabb сетки.
			</description>
		</method>
		<method name="mesh_get_surface_count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="mesh" type="RID" />
			<description>
				Возвращает количество поверхностей сетки.
			</description>
		</method>
		<method name="mesh_remove_surface">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Удаляет поверхность сетки.
			</description>
		</method>
		<method name="mesh_set_blend_shape_count">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="amount" type="int" />
			<description>
				Устанавливает количество форм смешивания сетки.
			</description>
		</method>
		<method name="mesh_set_blend_shape_mode">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="mode" type="int" enum="VisualServer.BlendShapeMode" />
			<description>
				Устанавливает режим наложения формы сетки.
			</description>
		</method>
		<method name="mesh_set_custom_aabb">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="aabb" type="AABB" />
			<description>
				Устанавливает пользовательский aabb сетки.
			</description>
		</method>
		<method name="mesh_surface_get_aabb" qualifiers="const">
			<return type="AABB" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Возвращает aabb поверхности сетки.
			</description>
		</method>
		<method name="mesh_surface_get_array" qualifiers="const">
			<return type="PoolByteArray" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Возвращает вершинный буфер поверхности сетки.
			</description>
		</method>
		<method name="mesh_surface_get_array_index_len" qualifiers="const">
			<return type="int" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Возвращает количество индексов поверхности сетки.
			</description>
		</method>
		<method name="mesh_surface_get_array_len" qualifiers="const">
			<return type="int" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Возвращает количество вершин на поверхности сетки.
			</description>
		</method>
		<method name="mesh_surface_get_arrays" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Возвращает буферные массивы поверхности сетки.
			</description>
		</method>
		<method name="mesh_surface_get_blend_shape_arrays" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Возвращает массивы поверхностей сетки для форм смешивания.
			</description>
		</method>
		<method name="mesh_surface_get_format" qualifiers="const">
			<return type="int" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Возвращает формат поверхности сетки.
			</description>
		</method>
		<method name="mesh_surface_get_format_offset" qualifiers="const">
			<return type="int" />
			<argument index="0" name="format" type="int" />
			<argument index="1" name="vertex_len" type="int" />
			<argument index="2" name="index_len" type="int" />
			<argument index="3" name="array_index" type="int" />
			<description>
				Функция не используется в Godot 3.x.
			</description>
		</method>
		<method name="mesh_surface_get_format_stride" qualifiers="const">
			<return type="int" />
			<argument index="0" name="format" type="int" />
			<argument index="1" name="vertex_len" type="int" />
			<argument index="2" name="index_len" type="int" />
			<argument index="3" name="array_index" type="int" />
			<description>
			</description>
		</method>
		<method name="mesh_surface_get_index_array" qualifiers="const">
			<return type="PoolByteArray" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Возвращает индексный буфер поверхности сетки.
			</description>
		</method>
		<method name="mesh_surface_get_material" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Возвращает материал поверхности сетки.
			</description>
		</method>
		<method name="mesh_surface_get_primitive_type" qualifiers="const">
			<return type="int" enum="VisualServer.PrimitiveType" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Возвращает примитивный тип поверхности сетки.
			</description>
		</method>
		<method name="mesh_surface_get_skeleton_aabb" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<description>
				Возвращает aabb скелета поверхности сетки.
			</description>
		</method>
		<method name="mesh_surface_set_material">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<argument index="2" name="material" type="RID" />
			<description>
				Устанавливает материал поверхности сетки.
			</description>
		</method>
		<method name="mesh_surface_update_region">
			<return type="void" />
			<argument index="0" name="mesh" type="RID" />
			<argument index="1" name="surface" type="int" />
			<argument index="2" name="offset" type="int" />
			<argument index="3" name="data" type="PoolByteArray" />
			<description>
				Обновляет определенную область вершинного буфера для указанной поверхности. Предупреждение: эта функция изменяет вершинный буфер напрямую без каких-либо защитных механизмов, что может легко повредить вашу сетку.
			</description>
		</method>
		<method name="multimesh_allocate">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="instances" type="int" />
			<argument index="2" name="transform_format" type="int" enum="VisualServer.MultimeshTransformFormat" />
			<argument index="3" name="color_format" type="int" enum="VisualServer.MultimeshColorFormat" />
			<argument index="4" name="custom_data_format" type="int" enum="VisualServer.MultimeshCustomDataFormat" default="0" />
			<description>
				Выделяет место для данных мультимеша. Параметры формата определяют, как эти данные будут храниться в OpenGL. Для использования смотрите [enum MultimeshTransformFormat], [enum MultimeshColorFormat] и [enum MultimeshCustomDataFormat]. Эквивалентно [member MultiMesh.instance_count].
			</description>
		</method>
		<method name="multimesh_create">
			<return type="RID" />
			<description>
				Создает новый multimesh на VisualServer и возвращает хэндл [RID]. Этот RID будет использоваться во всех [code]multimesh_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer'а.
				Для размещения в сцене прикрепите этот мультимеш к экземпляру с помощью метода [method instance_set_base], используя возвращенный RID.
			</description>
		</method>
		<method name="multimesh_get_aabb" qualifiers="const">
			<return type="AABB" />
			<argument index="0" name="multimesh" type="RID" />
			<description>
				Вычисляет и возвращает выровненную по оси ограничительную рамку, которая окружает все экземпляры внутри multimesh.
			</description>
		</method>
		<method name="multimesh_get_instance_count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="multimesh" type="RID" />
			<description>
				Возвращает количество экземпляров, выделенных для данного multimesh.
			</description>
		</method>
		<method name="multimesh_get_mesh" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="multimesh" type="RID" />
			<description>
				Возвращает RID сетки, которая будет использоваться при рисовании данного multimesh.
			</description>
		</method>
		<method name="multimesh_get_visible_instances" qualifiers="const">
			<return type="int" />
			<argument index="0" name="multimesh" type="RID" />
			<description>
				Возвращает количество видимых экземпляров для данного multimesh.
			</description>
		</method>
		<method name="multimesh_instance_get_color" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Возвращает цвет, которым будет модулироваться указанный экземпляр.
			</description>
		</method>
		<method name="multimesh_instance_get_custom_data" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Возвращает пользовательские данные, связанные с указанным экземпляром.
			</description>
		</method>
		<method name="multimesh_instance_get_transform" qualifiers="const">
			<return type="Transform" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Возвращает [Transform] заданного экземпляра.
			</description>
		</method>
		<method name="multimesh_instance_get_transform_2d" qualifiers="const">
			<return type="Transform2D" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<description>
				Возвращает [Transform2D] указанного экземпляра. Используется, когда multimesh настроен на использование двумерных преобразований.
			</description>
		</method>
		<method name="multimesh_instance_set_color">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<argument index="2" name="color" type="Color" />
			<description>
				Устанавливает цвет, которым будет модулироваться данный экземпляр. Эквивалентно [method MultiMesh.set_instance_color].
			</description>
		</method>
		<method name="multimesh_instance_set_custom_data">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<argument index="2" name="custom_data" type="Color" />
			<description>
				Устанавливает пользовательские данные для данного экземпляра. Пользовательские данные передаются как [Color], но в шейдере интерпретируются как [code]vec4[/code]. Эквивалентно [method MultiMesh.set_instance_custom_data].
			</description>
		</method>
		<method name="multimesh_instance_set_transform">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<argument index="2" name="transform" type="Transform" />
			<description>
				Устанавливает [Transform] для данного экземпляра. Эквивалентно [method MultiMesh.set_instance_transform].
			</description>
		</method>
		<method name="multimesh_instance_set_transform_2d">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="index" type="int" />
			<argument index="2" name="transform" type="Transform2D" />
			<description>
				Устанавливает параметр [Transform2D] для данного экземпляра. Применяется, когда multimesh используется в 2D. Эквивалентно [method MultiMesh.set_instance_transform_2d].
			</description>
		</method>
		<method name="multimesh_set_as_bulk_array">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="array" type="PoolRealArray" />
			<description>
				Устанавливает все данные, относящиеся к экземплярам, за один раз. Это особенно удобно при загрузке данных с диска или при подготовке данных из GDNative.

				Все данные упаковываются в один большой массив float. Массив может выглядеть следующим образом: Трансформация для экземпляра 1, данные о цвете для экземпляра 1, пользовательские данные для экземпляра 1, трансформация для экземпляра 2, данные о цвете для экземпляра 2 и т.д.

				[Transform] хранится как 12 float, [Transform2D] - как 8 float, [code]COLOR_8BIT[/code] / [code]CUSTOM_DATA_8BIT[/code] - как 1 float (4 байта как есть) и [code]COLOR_FLOAT[/code] / [code]CUSTOM_DATA_FLOAT[/code] - как 4 float.
			</description>
		</method>
		<method name="multimesh_set_mesh">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="mesh" type="RID" />
			<description>
				Устанавливает сетку, которая будет отрисовываться мультимешем. Эквивалентно [member MultiMesh.mesh].
			</description>
		</method>
		<method name="multimesh_set_visible_instances">
			<return type="void" />
			<argument index="0" name="multimesh" type="RID" />
			<argument index="1" name="visible" type="int" />
			<description>
				Устанавливает количество экземпляров, видимых в данный момент времени. Если значение -1, то рисуются все экземпляры, которые были выделены. Эквивалентно [member MultiMesh.visible_instance_count].
			</description>
		</method>
		<method name="omni_light_create">
			<return type="RID" />
			<description>
				Создает новый omni light и добавляет его в VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID может быть использован в большинстве [code]light_*[/code] функций VisualServer.
				После завершения работы с RID необходимо освободить его с помощью статического метода [method free_rid] VisualServer(-а).
				Для размещения в сцене прикрепите этот OmniLight к экземпляру с помощью метода [method instance_set_base], используя возвращенный RID.
			</description>
		</method>
		<method name="particles_create">
			<return type="RID" />
			<description>
				Создает систему частиц и добавляет ее в VisualServer. Доступ к ней осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]particles_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить его с помощью статического метода [method free_rid] VisualServer'а.
				Для размещения в сцене прикрепите эти частицы к экземпляру с помощью метода [method instance_set_base], используя возвращенный RID.
			</description>
		</method>
		<method name="particles_get_current_aabb">
			<return type="AABB" />
			<argument index="0" name="particles" type="RID" />
			<description>
				Вычисляет и возвращает выровненную по оси ограничительную рамку, содержащую все частицы. Эквивалентно [method Particles.capture_aabb].
			</description>
		</method>
		<method name="particles_get_emitting">
			<return type="bool" />
			<argument index="0" name="particles" type="RID" />
			<description>
				Возвращает [code]true[/code], если частицы в данный момент настроены на излучение.
			</description>
		</method>
		<method name="particles_is_inactive">
			<return type="bool" />
			<argument index="0" name="particles" type="RID" />
			<description>
				Возвращает [code]true[/code], если частицы не испускаются и частицы установлены в неактивное состояние.
			</description>
		</method>
		<method name="particles_request_process">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<description>
				Добавляет систему частиц в список систем частиц, которые необходимо обновить. Обновление произойдет на следующем кадре или при следующем вызове [method instances_cull_aabb], [method instances_cull_convex] или [method instances_cull_ray].
			</description>
		</method>
		<method name="particles_restart">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<description>
				Перезагружает частицы при следующем обновлении. Эквивалентно [method Particles.restart].
			</description>
		</method>
		<method name="particles_set_amount">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="amount" type="int" />
			<description>
				Устанавливает количество частиц, которые будут отрисованы, и выделяет для них память. Эквивалентно [member Particles.amount].
			</description>
		</method>
		<method name="particles_set_custom_aabb">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="aabb" type="AABB" />
			<description>
				Устанавливает для системы частиц пользовательскую ограничительную рамку, выровненную по оси. Эквивалентно [member Particles.visibility_aabb].
			</description>
		</method>
		<method name="particles_set_draw_order">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="order" type="int" enum="VisualServer.ParticlesDrawOrder" />
			<description>
				Устанавливает порядок отрисовки частиц в одно из именованных перечислений из [enum ParticlesDrawOrder]. Параметры см. в разделе [enum ParticlesDrawOrder]. Эквивалентно [member Particles.draw_order].
			</description>
		</method>
		<method name="particles_set_draw_pass_mesh">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="pass" type="int" />
			<argument index="2" name="mesh" type="RID" />
			<description>
				Устанавливает сетку, которая будет использоваться для указанного прохода отрисовки. Эквивалентно [member Particles.draw_pass_1], [member Particles.draw_pass_2], [member Particles.draw_pass_3] и [member Particles.draw_pass_4].
			</description>
		</method>
		<method name="particles_set_draw_passes">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="count" type="int" />
			<description>
				Устанавливает количество используемых проходов рисования. Эквивалентно [member Particles.draw_passes].
			</description>
		</method>
		<method name="particles_set_emission_transform">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="transform" type="Transform" />
			<description>
				Устанавливает [Transform], которое будет использоваться частицами при их первом испускании.
			</description>
		</method>
		<method name="particles_set_emitting">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="emitting" type="bool" />
			<description>
				Если [code]true[/code], то частицы будут излучаться с течением времени. Установка значения false не сбрасывает частицы, а только прекращает их испускание. Эквивалентно [member Particles.emitting].
			</description>
		</method>
		<method name="particles_set_explosiveness_ratio">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="ratio" type="float" />
			<description>
				Устанавливает коэффициент взрывчатости. Эквивалентно [member Particles.explosiveness].
			</description>
		</method>
		<method name="particles_set_fixed_fps">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="fps" type="int" />
			<description>
				Устанавливает частоту кадров, к которой будет привязан рендеринг системы частиц. Эквивалентно [member Particles.fixed_fps].
			</description>
		</method>
		<method name="particles_set_fractional_delta">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Если [code]true[/code], то используется дробная дельта, которая сглаживает движение частиц. Эквивалентно [member Particles.fract_delta].
			</description>
		</method>
		<method name="particles_set_lifetime">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="lifetime" type="float" />
			<description>
				Устанавливает время жизни каждой частицы в системе. Эквивалентно [member Particles.lifetime].
			</description>
		</method>
		<method name="particles_set_one_shot">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="one_shot" type="bool" />
			<description>
				Если [code]true[/code], частицы будут испускаться один раз и затем останавливаться. Эквивалентно [member Particles.one_shot].
			</description>
		</method>
		<method name="particles_set_pre_process_time">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="time" type="float" />
			<description>
				Устанавливает время предварительной обработки анимации частиц. Это позволяет отложить запуск анимации до того момента, когда частицы начнут излучать. Эквивалентно [member Particles.preprocess].
			</description>
		</method>
		<method name="particles_set_process_material">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="material" type="RID" />
			<description>
				Устанавливает материал для обработки частиц.
				[b]Примечание:[/b] Это не тот материал, который используется для отрисовки материалов. Эквивалентно [member Particles.process_material].
			</description>
		</method>
		<method name="particles_set_randomness_ratio">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="ratio" type="float" />
			<description>
				Устанавливает коэффициент случайности излучения. Это рандомизирует излучение частиц в пределах их фазы. Эквивалентно [member Particles.randomness].
			</description>
		</method>
		<method name="particles_set_speed_scale">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="scale" type="float" />
			<description>
				Устанавливает масштаб скорости системы частиц. Эквивалентно [member Particles.speed_scale].
			</description>
		</method>
		<method name="particles_set_use_local_coordinates">
			<return type="void" />
			<argument index="0" name="particles" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Если [code]true[/code], то частицы используют локальные координаты. Если [code]false[/code], то они используют глобальные координаты. Эквивалентно [member Particles.local_coords].
			</description>
		</method>
		<method name="reflection_probe_create">
			<return type="RID" />
			<description>
				Создает зонд отражения и добавляет его к VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]reflection_probe_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer.
				Для размещения в сцене прикрепите этот зонд отражения к экземпляру с помощью метода [method instance_set_base], используя возвращенный RID.
			</description>
		</method>
		<method name="reflection_probe_set_as_interior">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Если [code]true[/code], то отражения будут игнорировать вклад неба. Эквивалентно [member ReflectionProbe.interior_enable].
			</description>
		</method>
		<method name="reflection_probe_set_cull_mask">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="layers" type="int" />
			<description>
				Устанавливает маску cull рендеринга для данного датчика отражения. Только экземпляры с соответствующей маской будут отрисованы этим зондом. Эквивалентно [member ReflectionProbe.cull_mask].
			</description>
		</method>
		<method name="reflection_probe_set_enable_box_projection">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Если [code]true[/code], то используется box-проекция. В некоторых ситуациях это позволяет сделать отражения более корректными. Эквивалентно [member ReflectionProbe.box_projection].
			</description>
		</method>
		<method name="reflection_probe_set_enable_shadows">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Если [code]true[/code], то вычисляются тени в зонде отражения. При этом отражение вычисляется значительно медленнее. Эквивалентно [member ReflectionProbe.enable_shadows].
			</description>
		</method>
		<method name="reflection_probe_set_extents">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="extents" type="Vector3" />
			<description>
				Устанавливает размер области, которую будет захватывать зонд отражения. Эквивалентно [member ReflectionProbe.extents].
			</description>
		</method>
		<method name="reflection_probe_set_intensity">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="intensity" type="float" />
			<description>
				Устанавливает интенсивность отражения зонда. Интенсивность модулирует силу отражения. Эквивалентно [member ReflectionProbe.intensity].
			</description>
		</method>
		<method name="reflection_probe_set_interior_ambient">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="color" type="Color" />
			<description>
				Устанавливает цвет окружающего освещения для данного датчика отражения, если он установлен в режим интерьера. Эквивалентно [member ReflectionProbe.interior_ambient_color].
			</description>
		</method>
		<method name="reflection_probe_set_interior_ambient_energy">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="energy" type="float" />
			<description>
				Устанавливает энергетический множитель для вклада окружающего света данного зонда отражения, если он установлен в режим интерьера. Эквивалентно [member ReflectionProbe.interior_ambient_energy].
			</description>
		</method>
		<method name="reflection_probe_set_interior_ambient_probe_contribution">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="contrib" type="float" />
			<description>
				Устанавливает значение вклада в то, насколько сильно отражение влияет на окружающий свет для данного датчика отражения, если он установлен в режим интерьера. Полезно для того, чтобы окружающий свет соответствовал цвету помещения. Эквивалентно [member ReflectionProbe.interior_ambient_contrib].
			</description>
		</method>
		<method name="reflection_probe_set_max_distance">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="distance" type="float" />
			<description>
				Устанавливает максимальное расстояние, на котором объект может находиться от зонда, прежде чем он будет отсеян. Эквивалентно [member ReflectionProbe.max_distance].
			</description>
		</method>
		<method name="reflection_probe_set_origin_offset">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="offset" type="Vector3" />
			<description>
				Устанавливает смещение начала координат, используемое, когда данный датчик отражения находится в режиме box project. Эквивалентно [member ReflectionProbe.origin_offset].
			</description>
		</method>
		<method name="reflection_probe_set_update_mode">
			<return type="void" />
			<argument index="0" name="probe" type="RID" />
			<argument index="1" name="mode" type="int" enum="VisualServer.ReflectionProbeUpdateMode" />
			<description>
				Устанавливает частоту обновления датчика отражения. Это может быть либо один раз, либо каждый кадр. Параметры см. в [enum ReflectionProbeUpdateMode].
			</description>
		</method>
		<method name="request_frame_drawn_callback">
			<return type="void" />
			<argument index="0" name="where" type="Object" />
			<argument index="1" name="method" type="String" />
			<argument index="2" name="userdata" type="Variant" />
			<description>
				Планирует обратный вызов соответствующего именованного [code]метода[/code] на [code]where[/code] после отрисовки кадра.
				Метод обратного вызова должен использовать только 1 аргумент, который будет вызываться с [code]userdata[/code].
			</description>
		</method>
		<method name="scenario_create">
			<return type="RID" />
			<description>
				Создает сценарий и добавляет его на VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]scenario_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer(-а).
				Сценарий - это трехмерный мир, в котором существуют все визуальные экземпляры.
			</description>
		</method>
		<method name="scenario_set_debug">
			<return type="void" />
			<argument index="0" name="scenario" type="RID" />
			<argument index="1" name="debug_mode" type="int" enum="VisualServer.ScenarioDebugMode" />
			<description>
				Устанавливает [enum ScenarioDebugMode] для данного сценария. Опции см. в разделе [enum ScenarioDebugMode].
			</description>
		</method>
		<method name="scenario_set_environment">
			<return type="void" />
			<argument index="0" name="scenario" type="RID" />
			<argument index="1" name="environment" type="RID" />
			<description>
				Задает окружение, которое будет использоваться в данном сценарии.
			</description>
		</method>
		<method name="scenario_set_fallback_environment">
			<return type="void" />
			<argument index="0" name="scenario" type="RID" />
			<argument index="1" name="environment" type="RID" />
			<description>
				Устанавливает резервную среду, которая будет использоваться данным сценарием. Запасное окружение используется, если окружение не задано. Внутреннее окружение используется редактором для создания окружения по умолчанию.
			</description>
		</method>
		<method name="scenario_set_reflection_atlas_size">
			<return type="void" />
			<argument index="0" name="scenario" type="RID" />
			<argument index="1" name="size" type="int" />
			<argument index="2" name="subdiv" type="int" />
			<description>
				Устанавливает размер атласа отражений, общего для всех зондов отражений в данном сценарии.
			</description>
		</method>
		<method name="set_boot_image">
			<return type="void" />
			<argument index="0" name="image" type="Image" />
			<argument index="1" name="color" type="Color" />
			<argument index="2" name="scale" type="bool" />
			<argument index="3" name="use_filter" type="bool" default="true" />
			<description>
				Устанавливает загрузочный образ. Цвет определяет цвет фона. Если [code]scale[/code] имеет значение [code]true[/code], то изображение будет масштабироваться в соответствии с размером экрана. Если [code]use_filter[/code] имеет значение [code]true[/code], то изображение будет масштабироваться с помощью линейной интерполяции. Если [code]use_filter[/code] имеет значение [code]false[/code], то изображение будет масштабироваться с помощью интерполяции ближайших соседей
			</description>
		</method>
		<method name="set_debug_generate_wireframes">
			<return type="void" />
			<argument index="0" name="generate" type="bool" />
			<description>
				Если [code]true[/code], то движок будет генерировать каркасы для использования в режиме отладки каркасов.
			</description>
		</method>
		<method name="set_default_clear_color">
			<return type="void" />
			<argument index="0" name="color" type="Color" />
			<description>
				Устанавливает цвет прозрачности по умолчанию, который используется, если не выбран конкретный цвет прозрачности.
			</description>
		</method>
		<method name="set_shader_async_hidden_forbidden">
			<return type="void" />
			<argument index="0" name="forbidden" type="bool" />
			<description>
				Если включена асинхронная компиляция шейдеров, то этот параметр определяет, будет ли соблюдаться [constant SpatialMaterial.ASYNC_MODE_HIDDEN].
				Например, перед тем как сделать снимок экрана, можно временно включить эту функцию. Таким образом, все будет видно, даже если шейдеры с режимом async [i]hidden[/i] еще не готовы.
				Пробники отражения используют эту функцию для того, чтобы зафиксировать все, независимо от того, готовы шейдеры или нет.
			</description>
		</method>
		<method name="set_shader_time_scale">
			<return type="void" />
			<argument index="0" name="scale" type="float" />
			<description>
				Устанавливает масштаб, который будет применяться к течению времени для встроенного в шейдеры параметра [code]TIME[/code].
				Значение по умолчанию - [code]1.0[/code], что означает, что [code]TIME[/code] будет отсчитывать реальное время по мере его протекания, не сужая и не растягивая его.
			</description>
		</method>
		<method name="set_use_occlusion_culling">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				Включает или выключает выделение occlusion.
			</description>
		</method>
		<method name="shader_create">
			<return type="RID" />
			<description>
				Создает пустой шейдер и добавляет его на VisualServer. Доступ к нему возможен по возвращаемому RID. Этот RID будет использоваться во всех [code]shader_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer(-а).
			</description>
		</method>
		<method name="shader_get_code" qualifiers="const">
			<return type="String" />
			<argument index="0" name="shader" type="RID" />
			<description>
				Возвращает код шейдера.
			</description>
		</method>
		<method name="shader_get_default_texture_param" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="shader" type="RID" />
			<argument index="1" name="name" type="String" />
			<description>
				Возвращает текстуру по умолчанию из шейдера, поиск которого осуществляется по имени.
			</description>
		</method>
		<method name="shader_get_param_list" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="shader" type="RID" />
			<description>
				Возвращает параметры шейдера.
			</description>
		</method>
		<method name="shader_set_code">
			<return type="void" />
			<argument index="0" name="shader" type="RID" />
			<argument index="1" name="code" type="String" />
			<description>
				Устанавливает код шейдера.
			</description>
		</method>
		<method name="shader_set_default_texture_param">
			<return type="void" />
			<argument index="0" name="shader" type="RID" />
			<argument index="1" name="name" type="String" />
			<argument index="2" name="texture" type="RID" />
			<description>
				Устанавливает текстуру шейдера по умолчанию. Перезаписывает текстуру, заданную по имени.
			</description>
		</method>
		<method name="skeleton_allocate">
			<return type="void" />
			<argument index="0" name="skeleton" type="RID" />
			<argument index="1" name="bones" type="int" />
			<argument index="2" name="is_2d_skeleton" type="bool" default="false" />
			<description>
				Выделяет буферы GPU для данного скелета.
			</description>
		</method>
		<method name="skeleton_bone_get_transform" qualifiers="const">
			<return type="Transform" />
			<argument index="0" name="skeleton" type="RID" />
			<argument index="1" name="bone" type="int" />
			<description>
				Возвращает набор [Transform] для конкретной кости данного скелета.
			</description>
		</method>
		<method name="skeleton_bone_get_transform_2d" qualifiers="const">
			<return type="Transform2D" />
			<argument index="0" name="skeleton" type="RID" />
			<argument index="1" name="bone" type="int" />
			<description>
				Возвращает набор [Transform2D] для конкретной кости данного скелета.
			</description>
		</method>
		<method name="skeleton_bone_set_transform">
			<return type="void" />
			<argument index="0" name="skeleton" type="RID" />
			<argument index="1" name="bone" type="int" />
			<argument index="2" name="transform" type="Transform" />
			<description>
				Устанавливает [Transform] для конкретной кости данного скелета.
			</description>
		</method>
		<method name="skeleton_bone_set_transform_2d">
			<return type="void" />
			<argument index="0" name="skeleton" type="RID" />
			<argument index="1" name="bone" type="int" />
			<argument index="2" name="transform" type="Transform2D" />
			<description>
				Устанавливает [Transform2D] для конкретной кости данного скелета.
			</description>
		</method>
		<method name="skeleton_create">
			<return type="RID" />
			<description>
				Создает скелет и добавляет его в VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]skeleton_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer(-а).
			</description>
		</method>
		<method name="skeleton_get_bone_count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="skeleton" type="RID" />
			<description>
				Возвращает количество костей, выделенных для данного скелета.
			</description>
		</method>
		<method name="sky_create">
			<return type="RID" />
			<description>
				Создает пустое небо и добавляет его в VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]sky_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer(-а).
			</description>
		</method>
		<method name="sky_set_texture">
			<return type="void" />
			<argument index="0" name="sky" type="RID" />
			<argument index="1" name="cube_map" type="RID" />
			<argument index="2" name="radiance_size" type="int" />
			<description>
				Задает текстуру неба.
			</description>
		</method>
		<method name="spot_light_create">
			<return type="RID" />
			<description>
				Создает точечный светильник и добавляет его в VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID может быть использован в большинстве [code]light_*[/code] функций VisualServer.
				После завершения работы с RID необходимо освободить его с помощью статического метода [method free_rid] VisualServer(-а).
				Для размещения в сцене прикрепите этот точечный светильник к экземпляру с помощью метода [method instance_set_base], используя возвращенный RID.
			</description>
		</method>
		<method name="sync">
			<return type="void" />
			<description>
				Не реализовано в Godot 3.x.
			</description>
		</method>
		<method name="texture_allocate">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="width" type="int" />
			<argument index="2" name="height" type="int" />
			<argument index="3" name="depth_3d" type="int" />
			<argument index="4" name="format" type="int" enum="Image.Format" />
			<argument index="5" name="type" type="int" enum="VisualServer.TextureType" />
			<argument index="6" name="flags" type="int" default="7" />
			<description>
				Выделяет память GPU под текстуру.
			</description>
		</method>
		<method name="texture_bind">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="number" type="int" />
			<description>
				Привязывает текстуру к слоту текстуры.
			</description>
		</method>
		<method name="texture_create">
			<return type="RID" />
			<description>
				Создает пустую текстуру и добавляет ее в VisualServer. Доступ к ней возможен по возвращаемому RID. Этот RID будет использоваться во всех [code]texture_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer(-а).
			</description>
		</method>
		<method name="texture_create_from_image">
			<return type="RID" />
			<argument index="0" name="image" type="Image" />
			<argument index="1" name="flags" type="int" default="7" />
			<description>
				Создает текстуру, выделяет место для изображения и заполняет его.
			</description>
		</method>
		<method name="texture_debug_usage">
			<return type="Array" />
			<description>
				Возвращает список всех текстур и информацию о них.
			</description>
		</method>
		<method name="texture_get_data" qualifiers="const">
			<return type="Image" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="cube_side" type="int" default="0" />
			<description>
				Возвращает копию изображения текстуры, если только это не CubeMap, в этом случае возвращается [RID] изображения на одной из граней куба.
			</description>
		</method>
		<method name="texture_get_depth" qualifiers="const">
			<return type="int" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Возвращает значение глубины текстуры.
			</description>
		</method>
		<method name="texture_get_flags" qualifiers="const">
			<return type="int" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Возвращает флаги текстуры.
			</description>
		</method>
		<method name="texture_get_format" qualifiers="const">
			<return type="int" enum="Image.Format" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Возвращает формат изображения текстуры.
			</description>
		</method>
		<method name="texture_get_height" qualifiers="const">
			<return type="int" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Возвращает значение высоты текстуры.
			</description>
		</method>
		<method name="texture_get_path" qualifiers="const">
			<return type="String" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Возвращает путь текстуры.
			</description>
		</method>
		<method name="texture_get_texid" qualifiers="const">
			<return type="int" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Возвращает opengl id изображения текстуры.
			</description>
		</method>
		<method name="texture_get_type" qualifiers="const">
			<return type="int" enum="VisualServer.TextureType" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Возвращает тип текстуры, который может быть любым из [enum TextureType].
			</description>
		</method>
		<method name="texture_get_width" qualifiers="const">
			<return type="int" />
			<argument index="0" name="texture" type="RID" />
			<description>
				Возвращает значение ширины текстуры.
			</description>
		</method>
		<method name="texture_set_data">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="image" type="Image" />
			<argument index="2" name="layer" type="int" default="0" />
			<description>
				Устанавливает данные изображения текстуры. Если это CubeMap, то устанавливает данные изображения на стороне куба.
			</description>
		</method>
		<method name="texture_set_data_partial">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="image" type="Image" />
			<argument index="2" name="src_x" type="int" />
			<argument index="3" name="src_y" type="int" />
			<argument index="4" name="src_w" type="int" />
			<argument index="5" name="src_h" type="int" />
			<argument index="6" name="dst_x" type="int" />
			<argument index="7" name="dst_y" type="int" />
			<argument index="8" name="dst_mip" type="int" />
			<argument index="9" name="layer" type="int" default="0" />
			<description>
				Устанавливает часть данных для текстуры. Внимание: эта функция напрямую обращается к базовому графическому API и при неправильном использовании может повредить текстуру.
			</description>
		</method>
		<method name="texture_set_flags">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="flags" type="int" />
			<description>
				Устанавливает флаги текстуры. Параметры см. в [enum TextureFlags].
			</description>
		</method>
		<method name="texture_set_path">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="path" type="String" />
			<description>
				Устанавливает путь к текстуре.
			</description>
		</method>
		<method name="texture_set_proxy">
			<return type="void" />
			<argument index="0" name="proxy" type="RID" />
			<argument index="1" name="base" type="RID" />
			<description>
				Создает связь обновления между двумя текстурами, аналогичную работе [ViewportTexture]. Если базовой текстурой является текстура [Viewport], то при каждом новом кадре в окне просмотра прокси-текстура автоматически получает обновление.
				Например, этот код связывает общий [ImageTexture] с текстурой, выводимой из [Viewport], используя API VisualServer:
				[codeblock]
				func _ready():
				    var viewport_rid = get_viewport().get_viewport_rid()
				    var viewport_texture_rid = VisualServer.viewport_get_texture(viewport_rid)

				    var proxy_texture = ImageTexture.new()
				    var viewport_texture_image_data = VisualServer.texture_get_data(viewport_texture_rid)

				    proxy_texture.create_from_image(viewport_texture_image_data)
				    var proxy_texture_rid = proxy_texture.get_rid()
				    VisualServer.texture_set_proxy(proxy_texture_rid, viewport_texture_rid)

				    $TextureRect.texture = proxy_texture
				[/codeblock]
			</description>
		</method>
		<method name="texture_set_shrink_all_x2_on_set_data">
			<return type="void" />
			<argument index="0" name="shrink" type="bool" />
			<description>
				Если [code]true[/code], то задает внутренним процессам уменьшение всех данных изображения до половины размера.
			</description>
		</method>
		<method name="texture_set_size_override">
			<return type="void" />
			<argument index="0" name="texture" type="RID" />
			<argument index="1" name="width" type="int" />
			<argument index="2" name="height" type="int" />
			<argument index="3" name="depth" type="int" />
			<description>
				Изменяет размер текстуры до указанных размеров.
			</description>
		</method>
		<method name="textures_keep_original">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				Если [code]true[/code], то при перезаписи изображение будет сохранено в массиве images текстуры.
			</description>
		</method>
		<method name="viewport_attach_camera">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="camera" type="RID" />
			<description>
				Задает камеру viewport(-а).
			</description>
		</method>
		<method name="viewport_attach_canvas">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="canvas" type="RID" />
			<description>
				Задает холст viewport(-а).
			</description>
		</method>
		<method name="viewport_attach_to_screen">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="rect" type="Rect2" default="Rect2( 0, 0, 0, 0 )" />
			<argument index="2" name="screen" type="int" default="0" />
			<description>
				Копирует видовой экран в область экрана, заданную [code]rect[/code]. Если [member Viewport.render_direct_to_screen] имеет значение [code]true[/code], то видовой экран не использует фреймбуфер и содержимое видового экрана выводится непосредственно на экран. Однако следует учитывать, что корневой видовой экран рисуется последним, поэтому он будет рисоваться поверх экрана. Соответственно, для корневого видового экрана необходимо задать область, которая не покрывает область, к которой прикреплен этот видовой экран.
				Например, можно установить корневой видовой экран так, чтобы он вообще не отрисовывался, используя следующий код:
				[codeblock]
				func _ready():
				    get_viewport().set_attach_to_screen_rect(Rect2())
				    $Viewport.set_attach_to_screen_rect(Rect2(0, 0, 600, 600))
				[/codeblock]
				Использование этого метода может привести к значительной оптимизации, особенно на младших моделях устройств. Однако за это приходится расплачиваться необходимостью управлять видовыми экранами вручную. Для дальнейшей оптимизации смотрите [метод viewport_set_render_direct_to_screen].
			</description>
		</method>
		<method name="viewport_create">
			<return type="RID" />
			<description>
				Создает пустой viewport и добавляет его на VisualServer. Доступ к нему осуществляется по возвращаемому RID. Этот RID будет использоваться во всех [code]viewport_*[/code] функциях VisualServer.
				После завершения работы с RID необходимо освободить RID с помощью статического метода [method free_rid] VisualServer(-а).
			</description>
		</method>
		<method name="viewport_detach">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<description>
				Отсоединяет viewport от экрана.
			</description>
		</method>
		<method name="viewport_get_render_info">
			<return type="int" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="info" type="int" enum="VisualServer.ViewportRenderInfo" />
			<description>
				Возвращает информацию о рендере видового экрана. Опции см. в константах [enum ViewportRenderInfo].
			</description>
		</method>
		<method name="viewport_get_texture" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="viewport" type="RID" />
			<description>
				Возвращает последний отрендеренный кадр viewport(-а).
			</description>
		</method>
		<method name="viewport_remove_canvas">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="canvas" type="RID" />
			<description>
				Отделяет viewport от холста и наоборот.
			</description>
		</method>
		<method name="viewport_set_active">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="active" type="bool" />
			<description>
				Если [code]true[/code], то viewport становится активным, иначе - неактивным.
			</description>
		</method>
		<method name="viewport_set_canvas_stacking">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="canvas" type="RID" />
			<argument index="2" name="layer" type="int" />
			<argument index="3" name="sublayer" type="int" />
			<description>
				Устанавливает порядок укладки холста видового экрана.
				[code]layer[/code] - это собственно слой холста, а [code]sublayer[/code] задает порядок укладки холста среди тех, которые находятся в том же слое.
			</description>
		</method>
		<method name="viewport_set_canvas_transform">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="canvas" type="RID" />
			<argument index="2" name="offset" type="Transform2D" />
			<description>
				Устанавливает трансформацию холста viewport(-а).
			</description>
		</method>
		<method name="viewport_set_clear_mode">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="clear_mode" type="int" enum="VisualServer.ViewportClearMode" />
			<description>
				Устанавливает режим очистки viewport. Параметры см. в разделе [enum ViewportClearMode].
			</description>
		</method>
		<method name="viewport_set_debug_draw">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="draw" type="int" enum="VisualServer.ViewportDebugDraw" />
			<description>
				Устанавливает режим отладки рисования viewport(-а). Параметры см. в [enum ViewportDebugDraw].
			</description>
		</method>
		<method name="viewport_set_disable_3d">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="disabled" type="bool" />
			<description>
				Если [code]true[/code], то 3D-рендеринг viewpot(-а) отключен.
			</description>
		</method>
		<method name="viewport_set_disable_environment">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="disabled" type="bool" />
			<description>
				Если [code]true[/code], то рендеринг окружения viewport(-а) отключен.
			</description>
		</method>
		<method name="viewport_set_global_canvas_transform">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="transform" type="Transform2D" />
			<description>
				Устанавливает глобальную матрицу трансформации viewport(-ов).
			</description>
		</method>
		<method name="viewport_set_hdr">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Если [code]true[/code], то область просмотра рендерится в высоком динамическом диапазоне (HDR) вместо стандартного динамического диапазона (SDR). См. также [method viewport_set_use_32_bpc_depth].
				[b]Примечание:[/b] Доступно только для бэкенда GLES3.
			</description>
		</method>
		<method name="viewport_set_hide_canvas">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="hidden" type="bool" />
			<description>
				Если [code]true[/code], то холст области просмотра не рендерится.
			</description>
		</method>
		<method name="viewport_set_hide_scenario">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="hidden" type="bool" />
			<description>
				В настоящее время не реализована в Godot 3.x.
			</description>
		</method>
		<method name="viewport_set_msaa">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="msaa" type="int" enum="VisualServer.ViewportMSAA" />
			<description>
				Устанавливает режим сглаживания. Параметры см. в разделе [enum ViewportMSAA].
			</description>
		</method>
		<method name="viewport_set_parent_viewport">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="parent_viewport" type="RID" />
			<description>
				Устанавливает родителя viewport(-а) на другой viewport.
			</description>
		</method>
		<method name="viewport_set_render_direct_to_screen">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Если [code]true[/code], то содержимое видового экрана выводится непосредственно на экран. Это позволяет провести низкоуровневую оптимизацию, при которой можно пропустить отрисовку видового экрана в корневой видовой экран. Хотя такая оптимизация может привести к значительному увеличению скорости работы (особенно на старых устройствах), за нее приходится расплачиваться удобством использования. Когда эта функция включена, вы не можете читать из области просмотра или из [code]SCREEN_TEXTURE[/code]. Также теряется возможность использования некоторых настроек окна, например, различных режимов растяжения. Еще одно следствие, о котором следует помнить, в 2D рендеринг происходит в координатах окна, поэтому если у вас есть область просмотра, вдвое превышающая размер окна, и вы установите это значение, то будет отрисована только та часть, которая помещается в окно, автоматическое масштабирование невозможно, даже если ваша игровая сцена значительно превышает размер окна.
			</description>
		</method>
		<method name="viewport_set_scenario">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="scenario" type="RID" />
			<description>
				Устанавливает сценарий видового экрана.
				Сценарий содержит информацию о [enum ScenarioDebugMode], информацию об окружении, атлас отражений и т.д.
			</description>
		</method>
		<method name="viewport_set_shadow_atlas_quadrant_subdivision">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="quadrant" type="int" />
			<argument index="2" name="subdivision" type="int" />
			<description>
				Устанавливает подразделение квадранта атласа теней.
			</description>
		</method>
		<method name="viewport_set_shadow_atlas_size">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="size" type="int" />
			<description>
				Устанавливает размер изображений атласа теней (используется для omni и spot light освещения). Значение округляется в большую сторону до ближайшей степени 2.
			</description>
		</method>
		<method name="viewport_set_sharpen_intensity">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="intensity" type="float" />
			<description>
				Устанавливает [code]интенсивность[/code] повышения резкости для [code]видового экрана[/code]. Если значение больше [code]0.0[/code], то к 3D-видовому экрану будет применено контрастно-адаптивное повышение резкости. Это не требует больших затрат производительности и может быть использовано для восстановления резкости, потерянной при использовании FXAA. Значения около [code]0,5[/code] обычно дают наилучшие результаты. См. также [метод viewport_set_use_fxaa].
			</description>
		</method>
		<method name="viewport_set_size">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="width" type="int" />
			<argument index="2" name="height" type="int" />
			<description>
				Устанавливает ширину и высоту области просмотра.
			</description>
		</method>
		<method name="viewport_set_transparent_background">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Если [code]true[/code], то область просмотра отображает свой фон как прозрачный.
			</description>
		</method>
		<method name="viewport_set_update_mode">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="update_mode" type="int" enum="VisualServer.ViewportUpdateMode" />
			<description>
				Устанавливает, когда должен обновляться viewport. Параметры см. в константах [enum ViewportUpdateMode].
			</description>
		</method>
		<method name="viewport_set_usage">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="usage" type="int" enum="VisualServer.ViewportUsage" />
			<description>
				Устанавливает режим работы видового экрана 2D/3D. Параметры см. в константах [enum ViewportUsage].
			</description>
		</method>
		<method name="viewport_set_use_32_bpc_depth">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Если [code]true[/code], то фреймбуфер области просмотра выделяется с полной точностью с плавающей запятой (32 бита) вместо половинной точности с плавающей запятой (16 бит). Действует только в том случае, если в [method viewport_set_use_32_bpc_depth] на том же [Viewport] для HDR установлено значение [code]true[/code].
				[b]Примечание:[/b] Доступно только для бэкенда GLES3.
			</description>
		</method>
		<method name="viewport_set_use_arvr">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="use_arvr" type="bool" />
			<description>
				Если [code]true[/code], то в области просмотра используются технологии дополненной или виртуальной реальности. См. раздел [ARVRInterface].
			</description>
		</method>
		<method name="viewport_set_use_debanding">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="debanding" type="bool" />
			<description>
				Если [code]true[/code], то используется быстрый фильтр постобработки, делающий полосатость значительно менее заметной. В некоторых случаях при дебандинге может появиться слегка заметный паттерн дизеринга. Рекомендуется включать дебандинг только в тех случаях, когда это действительно необходимо, поскольку шаблон дизеринга будет увеличивать размер скриншотов, сжатых без потерь.
				[b]Примечание:[/b] Доступно только для бэкенда GLES3. [member Viewport.hdr] также должен быть [code]true[/code], чтобы дебандинг был эффективен.
			</description>
		</method>
		<method name="viewport_set_use_fxaa">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="fxaa" type="bool" />
			<description>
				Включает быстрое приближенное сглаживание для данного видового экрана. FXAA - это популярный метод сглаживания в пространстве экрана, который работает быстро, но делает изображение размытым, особенно при низких разрешениях. Тем не менее, он может относительно хорошо работать при больших разрешениях, таких как 1440p и 4K. Часть потерянной резкости можно восстановить, включив контрастно-адаптивное усиление резкости (см. [method viewport_set_sharpen_intensity]).
			</description>
		</method>
		<method name="viewport_set_vflip">
			<return type="void" />
			<argument index="0" name="viewport" type="RID" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Если [code]true[/code], то рендеринг области просмотра переворачивается по вертикали.
			</description>
		</method>
	</methods>
	<members>
		<member name="render_loop_enabled" type="bool" setter="set_render_loop_enabled" getter="is_render_loop_enabled">
			Если [code]false[/code], то рендеринг полностью отключается, но логика движка продолжает обрабатываться. Для отрисовки кадра даже при отключенном рендеринге можно вызвать [method force_draw].
		</member>
	</members>
	<signals>
		<signal name="frame_post_draw">
			<description>
				Выдается в конце кадра, после того как VisualServer завершил обновление всех видовых экранов(viewport).
			</description>
		</signal>
		<signal name="frame_pre_draw">
			<description>
				Выдается в начале кадра, перед тем как VisualServer обновит все Viewports.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NO_INDEX_ARRAY" value="-1">
			Отмечает ошибку, свидетельствующую о том, что индексный массив пуст.
		</constant>
		<constant name="ARRAY_WEIGHTS_SIZE" value="4">
			Количество весов/костей на вершину.
		</constant>
		<constant name="CANVAS_ITEM_Z_MIN" value="-4096">
			Минимальный Z-слой для холстопрошивных изделий.
		</constant>
		<constant name="CANVAS_ITEM_Z_MAX" value="4096">
			Максимальный Z-слой для холстопрошивных изделий.
		</constant>
		<constant name="MAX_GLOW_LEVELS" value="7">
			Максимальное количество уровней свечения, которое может быть использовано с эффектом постпроцесса glow.
		</constant>
		<constant name="MAX_CURSORS" value="8">
			Неиспользуемое перечисление в Godot 3.x.
		</constant>
		<constant name="MATERIAL_RENDER_PRIORITY_MIN" value="-128">
			Минимальный приоритет рендеринга среди всех материалов.
		</constant>
		<constant name="MATERIAL_RENDER_PRIORITY_MAX" value="127">
			Максимальный приоритет рендеринга среди всех материалов.
		</constant>
		<constant name="CUBEMAP_LEFT" value="0" enum="CubeMapSide">
			Обозначает левую сторону карты куба.
		</constant>
		<constant name="CUBEMAP_RIGHT" value="1" enum="CubeMapSide">
			Обозначает правую сторону карты куба.
		</constant>
		<constant name="CUBEMAP_BOTTOM" value="2" enum="CubeMapSide">
			Отмечает нижнюю сторону кубической карты.
		</constant>
		<constant name="CUBEMAP_TOP" value="3" enum="CubeMapSide">
			Обозначает верхнюю сторону кубической карты.
		</constant>
		<constant name="CUBEMAP_FRONT" value="4" enum="CubeMapSide">
			Обозначает лицевую сторону карты куба.
		</constant>
		<constant name="CUBEMAP_BACK" value="5" enum="CubeMapSide">
			Обозначает обратную сторону карты куба.
		</constant>
		<constant name="TEXTURE_TYPE_2D" value="0" enum="TextureType">
			Обычная текстура с двумя размерами - шириной и высотой.
		</constant>
		<constant name="TEXTURE_TYPE_CUBEMAP" value="2" enum="TextureType">
			Текстура, состоящая из шести граней, может быть найдена с помощью [code]vec3[/code] в шейдере.
		</constant>
		<constant name="TEXTURE_TYPE_2D_ARRAY" value="3" enum="TextureType">
			Массив двумерных текстур.
		</constant>
		<constant name="TEXTURE_TYPE_3D" value="4" enum="TextureType">
			Трехмерная текстура, имеющая ширину, высоту и глубину.
		</constant>
		<constant name="TEXTURE_FLAG_MIPMAPS" value="1" enum="TextureFlags">
			Генерирует mipmaps - уменьшенные версии одной и той же текстуры для использования при уменьшении масштаба с сохранением соотношения сторон.
		</constant>
		<constant name="TEXTURE_FLAG_REPEAT" value="2" enum="TextureFlags">
			Повторяет текстуру (вместо зажима к краю).
		</constant>
		<constant name="TEXTURE_FLAG_FILTER" value="4" enum="TextureFlags">
			Использует увеличительный фильтр, позволяющий плавно увеличивать текстуру.
		</constant>
		<constant name="TEXTURE_FLAG_ANISOTROPIC_FILTER" value="8" enum="TextureFlags">
			Использует анизотропную фильтрацию mipmap. Генерирует уменьшенные версии одной и той же текстуры с разным соотношением сторон.
			В результате текстуры лучше выглядят при просмотре под косыми углами.
		</constant>
		<constant name="TEXTURE_FLAG_CONVERT_TO_LINEAR" value="16" enum="TextureFlags">
			Преобразование текстуры в цветовое пространство sRGB.
		</constant>
		<constant name="TEXTURE_FLAG_MIRRORED_REPEAT" value="32" enum="TextureFlags">
			Повторяет текстуру с зеркальным отображением чередующихся участков.
		</constant>
		<constant name="TEXTURE_FLAG_USED_FOR_STREAMING" value="2048" enum="TextureFlags">
			Текстура - это поверхность видеоизображения.
		</constant>
		<constant name="TEXTURE_FLAGS_DEFAULT" value="7" enum="TextureFlags">
			Флаги по умолчанию. Включены [constant TEXTURE_FLAG_MIPMAPS], [constant TEXTURE_FLAG_REPEAT] и [constant TEXTURE_FLAG_FILTER].
		</constant>
		<constant name="SHADER_SPATIAL" value="0" enum="ShaderMode">
            Шейдер представляет собой 3D-шейдер.
		</constant>
		<constant name="SHADER_CANVAS_ITEM" value="1" enum="ShaderMode">
			Шейдер представляет собой 2D-шейдер.
		</constant>
		<constant name="SHADER_PARTICLES" value="2" enum="ShaderMode">
			Шейдер представляет собой шейдер частиц.
		</constant>
		<constant name="SHADER_MAX" value="3" enum="ShaderMode">
			Представляет собой размер перечисления [enum ShaderMode].
		</constant>
		<constant name="ARRAY_VERTEX" value="0" enum="ArrayType">
			Array - это массив вершин.
		</constant>
		<constant name="ARRAY_NORMAL" value="1" enum="ArrayType">
			Array - это обычный массив.
		</constant>
		<constant name="ARRAY_TANGENT" value="2" enum="ArrayType">
			Array является касательным массивом.
		</constant>
		<constant name="ARRAY_COLOR" value="3" enum="ArrayType">
			Array - цветовой массив.
		</constant>
		<constant name="ARRAY_TEX_UV" value="4" enum="ArrayType">
			Array - массив UV-координат.
		</constant>
		<constant name="ARRAY_TEX_UV2" value="5" enum="ArrayType">
			Array - массив UV-координат для вторых UV-координат.
		</constant>
		<constant name="ARRAY_BONES" value="6" enum="ArrayType">
			Array содержит информацию о костях.
		</constant>
		<constant name="ARRAY_WEIGHTS" value="7" enum="ArrayType">
			Array - это информация о весе.
		</constant>
		<constant name="ARRAY_INDEX" value="8" enum="ArrayType">
			Array - это индексный массив.
		</constant>
		<constant name="ARRAY_MAX" value="9" enum="ArrayType">
			Представляет собой размер перечисления [enum ArrayType].
		</constant>
		<constant name="ARRAY_FORMAT_VERTEX" value="1" enum="ArrayFormat">
			Флаг, используемый для обозначения массива вершин.
		</constant>
		<constant name="ARRAY_FORMAT_NORMAL" value="2" enum="ArrayFormat">
			Флаг, используемый для обозначения нормального массива.
		</constant>
		<constant name="ARRAY_FORMAT_TANGENT" value="4" enum="ArrayFormat">
			Флаг, используемый для обозначения массива касательных.
		</constant>
		<constant name="ARRAY_FORMAT_COLOR" value="8" enum="ArrayFormat">
			Флаг, используемый для маркировки цветового массива.
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV" value="16" enum="ArrayFormat">
			Флаг, используемый для обозначения массива УФ-координат.
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV2" value="32" enum="ArrayFormat">
			Флаг, используемый для пометки массива UV-координат для вторых UV-координат.
		</constant>
		<constant name="ARRAY_FORMAT_BONES" value="64" enum="ArrayFormat">
			Флаг, используемый для маркировки массива информации о костях.
		</constant>
		<constant name="ARRAY_FORMAT_WEIGHTS" value="128" enum="ArrayFormat">
			Флаг, используемый для маркировки массива весов.
		</constant>
		<constant name="ARRAY_FORMAT_INDEX" value="256" enum="ArrayFormat">
			Флаг, используемый для обозначения индексного массива.
		</constant>
		<constant name="ARRAY_COMPRESS_VERTEX" value="512" enum="ArrayFormat">
			Флаг, используемый для обозначения сжатого массива вершин (наполовину с плавающей точкой).
		</constant>
		<constant name="ARRAY_COMPRESS_NORMAL" value="1024" enum="ArrayFormat">
			Флаг, используемый для обозначения сжатого (наполовину с плавающей точкой) обычного массива.
		</constant>
		<constant name="ARRAY_COMPRESS_TANGENT" value="2048" enum="ArrayFormat">
			Флаг, используемый для обозначения сжатого (наполовину плавающего) массива касательных.
		</constant>
		<constant name="ARRAY_COMPRESS_COLOR" value="4096" enum="ArrayFormat">
			Флаг, используемый для обозначения сжатого (наполовину плавающего) цветового массива.
		</constant>
		<constant name="ARRAY_COMPRESS_TEX_UV" value="8192" enum="ArrayFormat">
			Флаг, используемый для обозначения сжатого (наполовину плавающего) массива UV-координат.
		</constant>
		<constant name="ARRAY_COMPRESS_TEX_UV2" value="16384" enum="ArrayFormat">
			Флаг, используемый для обозначения сжатого (наполовину плавающего) массива UV-координат для вторых UV-координат.
		</constant>
		<constant name="ARRAY_COMPRESS_BONES" value="32768" enum="ArrayFormat">
			Флажок, используемый для обозначения сжатого костного массива.
		</constant>
		<constant name="ARRAY_COMPRESS_WEIGHTS" value="65536" enum="ArrayFormat">
			Флаг, используемый для обозначения сжатого массива весов (наполовину с плавающей точкой).
		</constant>
		<constant name="ARRAY_COMPRESS_INDEX" value="131072" enum="ArrayFormat">
			Флаг, используемый для обозначения сжатого индексного массива.
		</constant>
		<constant name="ARRAY_FLAG_USE_2D_VERTICES" value="262144" enum="ArrayFormat">
			Флаг, используемый для обозначения того, что массив содержит двумерные вершины.
		</constant>
		<constant name="ARRAY_FLAG_USE_16_BIT_BONES" value="524288" enum="ArrayFormat">
			Флаг, используемый для обозначения того, что массив использует 16-битные элементы вместо 8-битных.
		</constant>
		<constant name="ARRAY_FLAG_USE_OCTAHEDRAL_COMPRESSION" value="2097152" enum="ArrayFormat">
			Флаг, используемый для обозначения того, что массив использует октаэдрическое представление нормальных и касательных векторов, а не декартово.
		</constant>
		<constant name="ARRAY_COMPRESS_DEFAULT" value="2194432" enum="ArrayFormat">
			Используется для быстрой установки флагов [constant ARRAY_COMPRESS_NORMAL], [constant ARRAY_COMPRESS_TANGENT], [constant ARRAY_COMPRESS_COLOR], [constant ARRAY_COMPRESS_TEX_UV], [constant ARRAY_COMPRESS_TEX_UV2], [constant ARRAY_COMPRESS_WEIGHTS] и [constant ARRAY_FLAG_USE_OCTAHEDRAL_COMPRESSION].
		</constant>
		<constant name="PRIMITIVE_POINTS" value="0" enum="PrimitiveType">
			Примитив для рисования состоит из точек.
		</constant>
		<constant name="PRIMITIVE_LINES" value="1" enum="PrimitiveType">
			Примитив для рисования состоит из линий.
		</constant>
		<constant name="PRIMITIVE_LINE_STRIP" value="2" enum="PrimitiveType">
			Примитив для рисования состоит из линейной полосы от начала до конца.
		</constant>
		<constant name="PRIMITIVE_LINE_LOOP" value="3" enum="PrimitiveType">
			Примитив для рисования состоит из линейного контура (линейной полосы с линией между последней и первой вершиной).
		</constant>
		<constant name="PRIMITIVE_TRIANGLES" value="4" enum="PrimitiveType">
			Примитив для рисования состоит из треугольников.
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_STRIP" value="5" enum="PrimitiveType">
			Примитив для рисования состоит из треугольной полосы (последние 3 вершины всегда объединяются, образуя треугольник).
		</constant>
		<constant name="PRIMITIVE_TRIANGLE_FAN" value="6" enum="PrimitiveType">
			Примитив для рисования состоит из треугольной полосы (последние 2 вершины всегда объединяются с первой, образуя треугольник).
		</constant>
		<constant name="PRIMITIVE_MAX" value="7" enum="PrimitiveType">
            Представляет размер перечисления [enum PrimitiveType].
		</constant>
		<constant name="BLEND_SHAPE_MODE_NORMALIZED" value="0" enum="BlendShapeMode">
			Формы смешивания нормализованы.
		</constant>
		<constant name="BLEND_SHAPE_MODE_RELATIVE" value="1" enum="BlendShapeMode">
			Формы примитивов приведены относительно базовой массы.
		</constant>
		<constant name="LIGHT_DIRECTIONAL" value="0" enum="LightType">
			Представляет собой направленный (солнечный) свет(directional_light).
		</constant>
		<constant name="LIGHT_OMNI" value="1" enum="LightType">
			Представляет собой светильник, лапмочку(omni light).
		</constant>
		<constant name="LIGHT_SPOT" value="2" enum="LightType">
			Является точечным светильником(spotlight(-ом)).
		</constant>
		<constant name="LIGHT_PARAM_ENERGY" value="0" enum="LightParam">
			Энергия света.
		</constant>
		<constant name="LIGHT_PARAM_INDIRECT_ENERGY" value="1" enum="LightParam">
			Вторичный множитель, используемый при работе с непрямым светом (свет отражается).
		</constant>
		<constant name="LIGHT_PARAM_SIZE" value="2" enum="LightParam">
			Размер света, в настоящее время используется только для мягких теней в запеченных лайтмапах.
		</constant>
		<constant name="LIGHT_PARAM_SPECULAR" value="3" enum="LightParam">
			Влияние света на зеркальность.
		</constant>
		<constant name="LIGHT_PARAM_RANGE" value="4" enum="LightParam">
			Дальность действия света.
		</constant>
		<constant name="LIGHT_PARAM_ATTENUATION" value="5" enum="LightParam">
			Затухание света.
		</constant>
		<constant name="LIGHT_PARAM_SPOT_ANGLE" value="6" enum="LightParam">
			Угол падения прожектора(spotlight).
		</constant>
		<constant name="LIGHT_PARAM_SPOT_ATTENUATION" value="7" enum="LightParam">
			Затухание света прожектора(spotlight).
		</constant>
		<constant name="LIGHT_PARAM_CONTACT_SHADOW_SIZE" value="8" enum="LightParam">
			Масштабирует цвет тени.
		</constant>
		<constant name="LIGHT_PARAM_SHADOW_MAX_DISTANCE" value="9" enum="LightParam">
			Максимальное расстояние, на котором будут отрисовываться тени.
		</constant>
		<constant name="LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET" value="10" enum="LightParam">
			Доля теневого атласа, занимаемая первым расщеплением.
		</constant>
		<constant name="LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET" value="11" enum="LightParam">
			Доля теневого атласа, занимаемая вторым сплитом.
		</constant>
		<constant name="LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET" value="12" enum="LightParam">
			Доля теневого атласа, занимаемая третьим сплитом. Остальную часть занимает четвертый сплит.
		</constant>
		<constant name="LIGHT_PARAM_SHADOW_NORMAL_BIAS" value="13" enum="LightParam">
			Нормальное смещение используется для смещения поиска тени по нормали объекта. Может использоваться для устранения артефактов самозатенения.
		</constant>
		<constant name="LIGHT_PARAM_SHADOW_BIAS" value="14" enum="LightParam">
			Смещение поиска теней для устранения артефактов самозатенения.
		</constant>
		<constant name="LIGHT_PARAM_SHADOW_BIAS_SPLIT_SCALE" value="15" enum="LightParam">
			Увеличивает смещение при дальнейших делениях для устранения самозатенения, возникающего только вдали от камеры.
		</constant>
		<constant name="LIGHT_PARAM_MAX" value="16" enum="LightParam">
			Представляет собой размер перечисления [enum LightParam].
		</constant>
		<constant name="LIGHT_BAKE_DISABLED" value="0" enum="LightBakeMode">
		</constant>
		<constant name="LIGHT_BAKE_INDIRECT" value="1" enum="LightBakeMode">
		</constant>
		<constant name="LIGHT_BAKE_ALL" value="2" enum="LightBakeMode">
		</constant>
		<constant name="LIGHT_OMNI_SHADOW_DUAL_PARABOLOID" value="0" enum="LightOmniShadowMode">
			Используйте карту теней двойного параболоида для Omni light.
		</constant>
		<constant name="LIGHT_OMNI_SHADOW_CUBE" value="1" enum="LightOmniShadowMode">
			Используйте карту теней cubemap для Omni light. Медленнее, но качественнее, чем двойной параболоид.
		</constant>
		<constant name="LIGHT_OMNI_SHADOW_DETAIL_VERTICAL" value="0" enum="LightOmniShadowDetail">
			При расчете карты теней используйте больше деталей по вертикали.
		</constant>
		<constant name="LIGHT_OMNI_SHADOW_DETAIL_HORIZONTAL" value="1" enum="LightOmniShadowDetail">
			При расчете карты теней используйте больше деталей по горизонтали.
		</constant>
		<constant name="LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL" value="0" enum="LightDirectionalShadowMode">
			Для направленного освещения используйте ортогональную теневую проекцию.
		</constant>
		<constant name="LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS" value="1" enum="LightDirectionalShadowMode">
			Для проецирования теней при использовании направленного света используйте 2 сплита.
		</constant>
		<constant name="LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS" value="2" enum="LightDirectionalShadowMode">
			Для проецирования теней при использовании направленного света используйте 4 сплита.
		</constant>
		<constant name="LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_STABLE" value="0" enum="LightDirectionalShadowDepthRangeMode">
			Сохраняет стабильность теней при движении камеры, но имеет меньшее эффективное разрешение.
		</constant>
		<constant name="LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_OPTIMIZED" value="1" enum="LightDirectionalShadowDepthRangeMode">
			Оптимизирует использование карт теней, повышая эффективное разрешение. Однако это может привести к тому, что тени будут перемещаться или слегка мерцать.
		</constant>
		<constant name="VIEWPORT_UPDATE_DISABLED" value="0" enum="ViewportUpdateMode">
			Не обновлять область просмотра viewport.
		</constant>
		<constant name="VIEWPORT_UPDATE_ONCE" value="1" enum="ViewportUpdateMode">
			Обновить область просмотра один раз, после чего установить значение disabled.
		</constant>
		<constant name="VIEWPORT_UPDATE_WHEN_VISIBLE" value="2" enum="ViewportUpdateMode">
			Обновляйте область просмотра каждый раз, когда она становится видимой.
		</constant>
		<constant name="VIEWPORT_UPDATE_ALWAYS" value="3" enum="ViewportUpdateMode">
			Всегда обновляйте область просмотра viewport.
		</constant>
		<constant name="VIEWPORT_CLEAR_ALWAYS" value="0" enum="ViewportClearMode">
			Перед рисованием viewport всегда очищается.
		</constant>
		<constant name="VIEWPORT_CLEAR_NEVER" value="1" enum="ViewportClearMode">
			Перед рисованием viewport никогда не очищается.
		</constant>
		<constant name="VIEWPORT_CLEAR_ONLY_NEXT_FRAME" value="2" enum="ViewportClearMode">
			видовой экран очищается один раз, после чего режим очистки устанавливается в [constant VIEWPORT_CLEAR_NEVER].
		</constant>
		<constant name="VIEWPORT_MSAA_DISABLED" value="0" enum="ViewportMSAA">
			Многовыборочное сглаживание отключено.
		</constant>
		<constant name="VIEWPORT_MSAA_2X" value="1" enum="ViewportMSAA">
			Многовыборочное сглаживание установлено на 2×.
		</constant>
		<constant name="VIEWPORT_MSAA_4X" value="2" enum="ViewportMSAA">
			Многовыборочное сглаживание установлено на 4×.
		</constant>
		<constant name="VIEWPORT_MSAA_8X" value="3" enum="ViewportMSAA">
			Многовыборочное сглаживание установлено на 8×.
		</constant>
		<constant name="VIEWPORT_MSAA_16X" value="4" enum="ViewportMSAA">
			Многовыборочное сглаживание установлено на 16×.
		</constant>
		<constant name="VIEWPORT_MSAA_EXT_2X" value="5" enum="ViewportMSAA">
			Для внешней текстуры установлено многодискретное сглаживание 2×. Специальный режим для GLES2 Android VR (Oculus Quest и Go).
		</constant>
		<constant name="VIEWPORT_MSAA_EXT_4X" value="6" enum="ViewportMSAA">
			Для внешней текстуры установлено многодискретное сглаживание 4×. Специальный режим для GLES2 Android VR (Oculus Quest и Go).
		</constant>
		<constant name="VIEWPORT_USAGE_2D" value="0" enum="ViewportUsage">
			В окне просмотра отображается не 3D, а образцы.
		</constant>
		<constant name="VIEWPORT_USAGE_2D_NO_SAMPLING" value="1" enum="ViewportUsage">
			Viewport не осуществляет 3D-рендеринг и не делает выборку.
		</constant>
		<constant name="VIEWPORT_USAGE_3D" value="2" enum="ViewportUsage">
			В окне Viewport выполняется 3D-рендеринг с эффектами.
		</constant>
		<constant name="VIEWPORT_USAGE_3D_NO_EFFECTS" value="3" enum="ViewportUsage">
			В видовом окне выполняется 3D-рендеринг, но без эффектов.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME" value="0" enum="ViewportRenderInfo">
			Количество объектов, отрисованных в одном кадре.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_VERTICES_IN_FRAME" value="1" enum="ViewportRenderInfo">
			Количество вершин, отрисованных за один кадр.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_MATERIAL_CHANGES_IN_FRAME" value="2" enum="ViewportRenderInfo">
			Количество изменений материала в течение данного кадра.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_SHADER_CHANGES_IN_FRAME" value="3" enum="ViewportRenderInfo">
			Количество изменений шейдера в данном кадре.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_SURFACE_CHANGES_IN_FRAME" value="4" enum="ViewportRenderInfo">
			Количество изменений поверхности в данном кадре.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME" value="5" enum="ViewportRenderInfo">
			Количество вызовов рисования в данном кадре.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_2D_ITEMS_IN_FRAME" value="6" enum="ViewportRenderInfo">
			Количество 2D элементов, отрисованных в данном кадре.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_2D_DRAW_CALLS_IN_FRAME" value="7" enum="ViewportRenderInfo">
			Количество вызовов 2D draw в этом кадре.
		</constant>
		<constant name="VIEWPORT_RENDER_INFO_MAX" value="8" enum="ViewportRenderInfo">
			Представляет собой размер перечисления [enum ViewportRenderInfo].
		</constant>
		<constant name="VIEWPORT_DEBUG_DRAW_DISABLED" value="0" enum="ViewportDebugDraw">
			Отрисовка отладки отключена. Настройка по умолчанию.
		</constant>
		<constant name="VIEWPORT_DEBUG_DRAW_UNSHADED" value="1" enum="ViewportDebugDraw">
			Debug draw устанавливает объекты в незатененное состояние.
		</constant>
		<constant name="VIEWPORT_DEBUG_DRAW_OVERDRAW" value="2" enum="ViewportDebugDraw">
			Перезаписывает чистый цвет на [code](0,0,0,0)[/code].
		</constant>
		<constant name="VIEWPORT_DEBUG_DRAW_WIREFRAME" value="3" enum="ViewportDebugDraw">
			Debug draw рисует объекты в виде проволочного каркаса.
		</constant>
		<constant name="SCENARIO_DEBUG_DISABLED" value="0" enum="ScenarioDebugMode">
			Не используйте режим отладки.
		</constant>
		<constant name="SCENARIO_DEBUG_WIREFRAME" value="1" enum="ScenarioDebugMode">
			Нарисовать все объекты в виде каркасных моделей.
		</constant>
		<constant name="SCENARIO_DEBUG_OVERDRAW" value="2" enum="ScenarioDebugMode">
			Нарисуйте все объекты таким образом, чтобы было видно, насколько сильно происходит перерисовка. Перерисовка возникает, когда участок пикселей нарисован и затенен, а затем другой объект закрывает его. Для оптимизации сцены необходимо уменьшить перерисовку.
		</constant>
		<constant name="SCENARIO_DEBUG_SHADELESS" value="3" enum="ScenarioDebugMode">
			Рисовать все объекты без затенения. Эквивалентно установке для всех шейдеров объектов значения [code]unshaded[/code].
		</constant>
		<constant name="INSTANCE_NONE" value="0" enum="InstanceType">
			У экземпляра отсутствует тип.
		</constant>
		<constant name="INSTANCE_MESH" value="1" enum="InstanceType">
			Экземпляр представляет собой сетку.
		</constant>
		<constant name="INSTANCE_MULTIMESH" value="2" enum="InstanceType">
			Экземпляр представляет собой multimesh.
		</constant>
		<constant name="INSTANCE_IMMEDIATE" value="3" enum="InstanceType">
			Экземпляр является непосредственной геометрией.
		</constant>
		<constant name="INSTANCE_PARTICLES" value="4" enum="InstanceType">
			Экземпляр представляет собой излучатель частиц.
		</constant>
		<constant name="INSTANCE_LIGHT" value="5" enum="InstanceType">
			Экземпляр - это свет.
		</constant>
		<constant name="INSTANCE_REFLECTION_PROBE" value="6" enum="InstanceType">
			Экземпляр представляет собой зонд отражения.
		</constant>
		<constant name="INSTANCE_GI_PROBE" value="7" enum="InstanceType">
			Экземпляр представляет собой GI-зонд.
		</constant>
		<constant name="INSTANCE_LIGHTMAP_CAPTURE" value="8" enum="InstanceType">
			Экземпляр представляет собой захват lightmap.
		</constant>
		<constant name="INSTANCE_MAX" value="9" enum="InstanceType">
			Представляет собой размер перечисления [enum InstanceType].
		</constant>
		<constant name="INSTANCE_GEOMETRY_MASK" value="30" enum="InstanceType">
			Комбинация флагов экземпляров геометрии (mesh, multimesh, immediate и particles).
		</constant>
		<constant name="INSTANCE_FLAG_USE_BAKED_LIGHT" value="0" enum="InstanceFlags">
			Позволяет использовать экземпляр в режиме запеченного освещения.
		</constant>
		<constant name="INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE" value="1" enum="InstanceFlags">
			Если установлено, то вручную запрашивается отрисовка геометрии на следующем кадре.
		</constant>
		<constant name="INSTANCE_FLAG_MAX" value="2" enum="InstanceFlags">
			Представляет собой размер перечисления [enum InstanceFlags].
		</constant>
		<constant name="SHADOW_CASTING_SETTING_OFF" value="0" enum="ShadowCastingSetting">
			Отключить тени от данного экземпляра.
		</constant>
		<constant name="SHADOW_CASTING_SETTING_ON" value="1" enum="ShadowCastingSetting">
			Отбрасывайте тени от этого экземпляра.
		</constant>
		<constant name="SHADOW_CASTING_SETTING_DOUBLE_SIDED" value="2" enum="ShadowCastingSetting">
			Отключите отсеивание задней поверхности при рендеринге тени объекта. Это немного замедляет работу, но может привести к получению более корректных теней.
		</constant>
		<constant name="SHADOW_CASTING_SETTING_SHADOWS_ONLY" value="3" enum="ShadowCastingSetting">
			Отрисовываются только тени от объекта. Сам объект отрисовываться не будет.
		</constant>
		<constant name="NINE_PATCH_STRETCH" value="0" enum="NinePatchAxisMode">
			Девять патчей натягиваются там, где это необходимо.
		</constant>
		<constant name="NINE_PATCH_TILE" value="1" enum="NinePatchAxisMode">
			Девять участков заполняются плитками там, где это необходимо.
		</constant>
		<constant name="NINE_PATCH_TILE_FIT" value="2" enum="NinePatchAxisMode">
			Девять патчей заполняются плитками там, где это необходимо, и при необходимости немного растягиваются.
		</constant>
		<constant name="CANVAS_LIGHT_MODE_ADD" value="0" enum="CanvasLightMode">
			Добавляет на холст светлую цветовую добавку.
		</constant>
		<constant name="CANVAS_LIGHT_MODE_SUB" value="1" enum="CanvasLightMode">
			Добавляет на холст субтрактивный светлый цвет.
		</constant>
		<constant name="CANVAS_LIGHT_MODE_MIX" value="2" enum="CanvasLightMode">
			Свет добавляет цвет в зависимости от прозрачности.
		</constant>
		<constant name="CANVAS_LIGHT_MODE_MASK" value="3" enum="CanvasLightMode">
			Свет добавляет цвет в зависимости от маски.
		</constant>
		<constant name="CANVAS_LIGHT_FILTER_NONE" value="0" enum="CanvasLightShadowFilter">
			Не применяйте фильтр к светлым теням на холсте.
		</constant>
		<constant name="CANVAS_LIGHT_FILTER_PCF3" value="1" enum="CanvasLightShadowFilter">
			Для фильтрации светлых теней холста используйте фильтрацию PCF3.
		</constant>
		<constant name="CANVAS_LIGHT_FILTER_PCF5" value="2" enum="CanvasLightShadowFilter">
			Для фильтрации светлых теней холста используйте фильтрацию PCF5.
		</constant>
		<constant name="CANVAS_LIGHT_FILTER_PCF7" value="3" enum="CanvasLightShadowFilter">
			Для фильтрации светлых теней холста используйте фильтрацию PCF7.
		</constant>
		<constant name="CANVAS_LIGHT_FILTER_PCF9" value="4" enum="CanvasLightShadowFilter">
			Для фильтрации светлых теней холста используйте фильтрацию PCF9.
		</constant>
		<constant name="CANVAS_LIGHT_FILTER_PCF13" value="5" enum="CanvasLightShadowFilter">
			Для фильтрации светлых теней холста используйте фильтрацию PCF13.
		</constant>
		<constant name="CANVAS_OCCLUDER_POLYGON_CULL_DISABLED" value="0" enum="CanvasOccluderPolygonCullMode">
			Culling холста отключена.
		</constant>
		<constant name="CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE" value="1" enum="CanvasOccluderPolygonCullMode">
			Culling холста происходит по часовой стрелке.
		</constant>
		<constant name="CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE" value="2" enum="CanvasOccluderPolygonCullMode">
			Culling холста происходит против часовой стрелки.
		</constant>
		<constant name="INFO_OBJECTS_IN_FRAME" value="0" enum="RenderInfo">
			Количество объектов в кадре.
		</constant>
		<constant name="INFO_VERTICES_IN_FRAME" value="1" enum="RenderInfo">
			Количество вершин в кадре.
		</constant>
		<constant name="INFO_MATERIAL_CHANGES_IN_FRAME" value="2" enum="RenderInfo">
			Количество модифицированных материалов в кадре.
		</constant>
		<constant name="INFO_SHADER_CHANGES_IN_FRAME" value="3" enum="RenderInfo">
			Количество rebinds шейдера в кадре.
		</constant>
		<constant name="INFO_SHADER_COMPILES_IN_FRAME" value="4" enum="RenderInfo">
			Пиковое количество шейдеров, находившихся на компиляции в кадре.
			Это полезно для того, чтобы знать, когда закончилась асинхронная компиляция шейдеров для текущих шейдеров на экране.
			[b]Примечание:[/b] Для полной уверенности следует считать, что компиляция не завершена, только если это значение равно нулю хотя бы для двух кадров подряд.
			Не реализовано в бэкенде рендеринга GLES2, всегда возвращает 0.
		</constant>
		<constant name="INFO_SURFACE_CHANGES_IN_FRAME" value="5" enum="RenderInfo">
			Величина изменения поверхности кадра.
		</constant>
		<constant name="INFO_DRAW_CALLS_IN_FRAME" value="6" enum="RenderInfo">
			Количество вызовов рисования в кадре.
		</constant>
		<constant name="INFO_2D_ITEMS_IN_FRAME" value="7" enum="RenderInfo">
			Количество элементов 2D в кадре.
		</constant>
		<constant name="INFO_2D_DRAW_CALLS_IN_FRAME" value="8" enum="RenderInfo">
			Количество вызовов 2D draw в кадре.
		</constant>
		<constant name="INFO_USAGE_VIDEO_MEM_TOTAL" value="9" enum="RenderInfo">
			Не реализовано в бэкендах рендеринга GLES2 и GLES3, всегда возвращает 0.
		</constant>
		<constant name="INFO_VIDEO_MEM_USED" value="10" enum="RenderInfo">
			Объем используемой видеопамяти, т.е. текстурной и вершинной памяти вместе взятых.
		</constant>
		<constant name="INFO_TEXTURE_MEM_USED" value="11" enum="RenderInfo">
			Объем используемой текстурной памяти.
		</constant>
		<constant name="INFO_VERTEX_MEM_USED" value="12" enum="RenderInfo">
			Объем используемой вершинной памяти.
		</constant>
		<constant name="FEATURE_SHADERS" value="0" enum="Features">
			Оборудование поддерживает шейдеры. В настоящее время в Godot 3.x это перечисление не используется.
		</constant>
		<constant name="FEATURE_MULTITHREADED" value="1" enum="Features">
			Аппаратное обеспечение поддерживает многопоточность. В настоящее время в Godot 3.x это перечисление не используется.
		</constant>
		<constant name="MULTIMESH_TRANSFORM_2D" value="0" enum="MultimeshTransformFormat">
			Используйте [Transform2D] для сохранения трансформации MultiMesh.
		</constant>
		<constant name="MULTIMESH_TRANSFORM_3D" value="1" enum="MultimeshTransformFormat">
			Используйте [Transform] для сохранения трансформации MultiMesh.
		</constant>
		<constant name="MULTIMESH_COLOR_NONE" value="0" enum="MultimeshColorFormat">
			MultiMesh не использует цвет для каждого экземпляра.
		</constant>
		<constant name="MULTIMESH_COLOR_8BIT" value="1" enum="MultimeshColorFormat">
			Цвет MultiMesh использует 8 бит на компонент. В данном случае цвет упаковывается в один float.
		</constant>
		<constant name="MULTIMESH_COLOR_FLOAT" value="2" enum="MultimeshColorFormat">
			MultiMesh color использует float для каждого канала.
		</constant>
		<constant name="MULTIMESH_CUSTOM_DATA_NONE" value="0" enum="MultimeshCustomDataFormat">
			MultiMesh не использует пользовательские данные.
		</constant>
		<constant name="MULTIMESH_CUSTOM_DATA_8BIT" value="1" enum="MultimeshCustomDataFormat">
			Пользовательские данные MultiMesh используют 8 бит на компонент. В этом случае пользовательские данные, состоящие из 4 компонентов, упаковываются в один float.
		</constant>
		<constant name="MULTIMESH_CUSTOM_DATA_FLOAT" value="2" enum="MultimeshCustomDataFormat">
			Пользовательские данные MultiMesh используют float для каждого компонента.
		</constant>
		<constant name="REFLECTION_PROBE_UPDATE_ONCE" value="0" enum="ReflectionProbeUpdateMode">
			Зонд отражения будет обновлять отражения один раз, а затем остановится.
		</constant>
		<constant name="REFLECTION_PROBE_UPDATE_ALWAYS" value="1" enum="ReflectionProbeUpdateMode">
			Датчик отражения будет обновляться каждый кадр. Этот режим необходим для захвата движущихся объектов.
		</constant>
		<constant name="PARTICLES_DRAW_ORDER_INDEX" value="0" enum="ParticlesDrawOrder">
			Отрисовывает частицы в том порядке, в котором они появляются в массиве частиц.
		</constant>
		<constant name="PARTICLES_DRAW_ORDER_LIFETIME" value="1" enum="ParticlesDrawOrder">
			Сортировка частиц по времени их жизни.
		</constant>
		<constant name="PARTICLES_DRAW_ORDER_VIEW_DEPTH" value="2" enum="ParticlesDrawOrder">
			Сортировка частиц по расстоянию до камеры.
		</constant>
		<constant name="ENV_BG_CLEAR_COLOR" value="0" enum="EnvironmentBG">
			В качестве фона используйте прозрачный цвет.
		</constant>
		<constant name="ENV_BG_COLOR" value="1" enum="EnvironmentBG">
			В качестве фона используется заданный цвет.
		</constant>
		<constant name="ENV_BG_SKY" value="2" enum="EnvironmentBG">
			В качестве фона используйте небесный ресурс.
		</constant>
		<constant name="ENV_BG_COLOR_SKY" value="3" enum="EnvironmentBG">
			Используйте пользовательский цвет для фона, а для затенения и отражения используйте цвет неба.
		</constant>
		<constant name="ENV_BG_CANVAS" value="4" enum="EnvironmentBG">
			Использовать указанный слой холста в качестве фона. Это может быть полезно для инстанцирования 2D сцены в 3D мире.
		</constant>
		<constant name="ENV_BG_KEEP" value="5" enum="EnvironmentBG">
			Не очищайте фон, используйте в качестве фона то, что было отрисовано на последнем кадре.
		</constant>
		<constant name="ENV_BG_MAX" value="7" enum="EnvironmentBG">
			Представляет собой размер перечисления [enum EnvironmentBG].
		</constant>
		<constant name="ENV_DOF_BLUR_QUALITY_LOW" value="0" enum="EnvironmentDOFBlurQuality">
			Используйте наименьшее качество размытия. Самый быстрый, но может выглядеть плохо.
		</constant>
		<constant name="ENV_DOF_BLUR_QUALITY_MEDIUM" value="1" enum="EnvironmentDOFBlurQuality">
			Используйте среднее качество размытия.
		</constant>
		<constant name="ENV_DOF_BLUR_QUALITY_HIGH" value="2" enum="EnvironmentDOFBlurQuality">
			Используется самое высокое качество размытия. Выглядит лучше всего, но работает медленнее всего.
		</constant>
		<constant name="GLOW_BLEND_MODE_ADDITIVE" value="0" enum="EnvironmentGlowBlendMode">
			Добавьте эффект свечения поверх сцены.
		</constant>
		<constant name="GLOW_BLEND_MODE_SCREEN" value="1" enum="EnvironmentGlowBlendMode">
			Смешивает эффект свечения с экраном. Не дает такой яркости, как добавка.
		</constant>
		<constant name="GLOW_BLEND_MODE_SOFTLIGHT" value="2" enum="EnvironmentGlowBlendMode">
			Создает тонкое цветовое возмущение вокруг объектов.
		</constant>
		<constant name="GLOW_BLEND_MODE_REPLACE" value="3" enum="EnvironmentGlowBlendMode">
			Показывает эффект свечения сам по себе, без основной сцены.
		</constant>
		<constant name="ENV_TONE_MAPPER_LINEAR" value="0" enum="EnvironmentToneMapper">
			Выводятся цвета в том виде, в котором они были получены. Это может привести к тому, что яркое освещение будет выглядеть перегоревшим, с заметным обрывом выходных цветов.
		</constant>
		<constant name="ENV_TONE_MAPPER_REINHARD" value="1" enum="EnvironmentToneMapper">
			Использование тонового маппера Reinhard. Выполняет изменение цветов отрисованных пикселей по формуле: [code]color = color / (1 + color)[/code]. Это позволяет избежать обрезания ярких бликов, но полученное изображение может выглядеть несколько тусклым.
		</constant>
		<constant name="ENV_TONE_MAPPER_FILMIC" value="2" enum="EnvironmentToneMapper">
			Используйте пленочный тоновый маппер. Это позволяет избежать обрезания ярких бликов, в результате чего изображение обычно выглядит более ярким, чем при использовании [constant ENV_TONE_MAPPER_REINHARD].
		</constant>
		<constant name="ENV_TONE_MAPPER_ACES" value="3" enum="EnvironmentToneMapper">
			Используется устаревшая версия Godot тонового маппера Academy Color Encoding System. В отличие от [constant ENV_TONE_MAPPER_ACES_FITTED], эта версия ACES не обрабатывает яркое освещение физически точным образом. ACES обычно имеет более контрастный выход по сравнению с [constant ENV_TONE_MAPPER_REINHARD] и [constant ENV_TONE_MAPPER_FILMIC].
			[b]Примечание:[/b] В Godot 4.0 этот оператор тонового отображения будет удален в пользу более точного [constant ENV_TONE_MAPPER_ACES_FITTED].
		</constant>
		<constant name="ENV_TONE_MAPPER_ACES_FITTED" value="4" enum="EnvironmentToneMapper">
			Используйте тоновый маппер Academy Color Encoding System. ACES несколько дороже, чем другие варианты, но он более реалистично обрабатывает яркое освещение, обесцвечивая его по мере увеличения яркости. ACES обычно имеет более контрастный выход по сравнению с [constant ENV_TONE_MAPPER_REINHARD] и [constant ENV_TONE_MAPPER_FILMIC].
		</constant>
		<constant name="ENV_SSAO_QUALITY_LOW" value="0" enum="EnvironmentSSAOQuality">
			Самое низкое качество ambient occlusion в экранном пространстве.
		</constant>
		<constant name="ENV_SSAO_QUALITY_MEDIUM" value="1" enum="EnvironmentSSAOQuality">
			Окружающая occlusion на экране среднего качества.
		</constant>
		<constant name="ENV_SSAO_QUALITY_HIGH" value="2" enum="EnvironmentSSAOQuality">
			Высочайшее качество occlusion пространства экрана.
		</constant>
		<constant name="ENV_SSAO_BLUR_DISABLED" value="0" enum="EnvironmentSSAOBlur">
			Отключает размытие, установленное для SSAO. При этом SSAO будет выглядеть более шумным.
		</constant>
		<constant name="ENV_SSAO_BLUR_1x1" value="1" enum="EnvironmentSSAOBlur">
			Выполните размытие 1x1 на выходе SSAO.
		</constant>
		<constant name="ENV_SSAO_BLUR_2x2" value="2" enum="EnvironmentSSAOBlur">
			Выполняет размытие 2x2 на выходе SSAO.
		</constant>
		<constant name="ENV_SSAO_BLUR_3x3" value="3" enum="EnvironmentSSAOBlur">
			Выполняет размытие 3x3 на выходе SSAO. Используйте этот параметр для получения наиболее гладкого SSAO.
		</constant>
		<constant name="CHANGED_PRIORITY_ANY" value="0" enum="ChangedPriority">
			Используется для запроса любых изменений, требующих перерисовки, независимо от их приоритета.
		</constant>
		<constant name="CHANGED_PRIORITY_LOW" value="1" enum="ChangedPriority">
			Зарегистрированные изменения, имеющие низкий приоритет, могут быть опционально предотвращены от перерисовки редактора. Примером могут служить динамические шейдеры (обычно использующие встроенный [code]TIME[/code]).
		</constant>
		<constant name="CHANGED_PRIORITY_HIGH" value="2" enum="ChangedPriority">
			Зарегистрированные изменения, которые могут привести к перерисовке, по умолчанию имеют высокий приоритет.
		</constant>
	</constants>
</class>
