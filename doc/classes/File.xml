<?xml version="1.0" encoding="UTF-8" ?>
<class name="File" inherits="Reference" version="3.6" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Тип для обработки операций чтения и записи файлов.
	</brief_description>
	<description>
		Тип файла. Используется для постоянного хранения данных в файловой системе пользовательского устройства и для чтения из нее. Например, он может использоваться для хранения игровых сохранений или файлов конфигурации игрока.
		Вот пример записи и чтения из файла:
		[codeblock]
		func save(content):
		    var file = File.new()
		    file.open("user://save_game.dat", File.WRITE)
		    file.store_string(content)
		    file.close()

		func load():
		    var file = File.new()
		    file.open("user://save_game.dat", File.READ)
		    var content = file.get_as_text()
		    file.close()
		    return content
		[/codeblock]
		В приведенном примере файл будет сохранен в папке данных пользователя, как указано в документации [url=$DOCS_URL/tutorials/io/data_paths.html]Data paths[/url].
		[b]Примечание:[/b] Для доступа к ресурсам проекта после экспорта рекомендуется использовать [ResourceLoader] вместо API [File], так как некоторые файлы конвертируются в форматы, специфичные для движка, и их исходные файлы могут отсутствовать в экспортированном пакете PCK.
		[b]Примечание:[/b] Файлы автоматически закрываются только в том случае, если процесс завершается "нормально" (например, щелчком на кнопке закрытия оконного менеджера или нажатием [b]Alt + F4[/b]). Если вы остановите выполнение проекта, нажав [b]F8[/b] во время его работы, файл не будет закрыт, так как игровой процесс будет убит. Это можно обойти, регулярно вызывая [метод flush].
	</description>
	<tutorials>
		<link title="Файловая система">$DOCS_URL/tutorials/scripting/filesystem.html</link>
		<link title="3D Voxel Demo">https://godotengine.org/asset-library/asset/676</link>
	</tutorials>
	<methods>
		<method name="close">
			<return type="void" />
			<description>
				Закрывает текущий открытый файл и предотвращает последующие операции чтения/записи. Используйте [метод flush], чтобы сохранить данные на диске без закрытия файла.
			</description>
		</method>
		<method name="eof_reached" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если файловый курсор уже прочитал конец файла.
				[b]Примечание:[/b] [code]eof_reached() == false[/code] нельзя использовать для проверки наличия дополнительных данных. Чтобы выполнить цикл, пока есть еще данные, используйте:
				[codeblock]
				while file.get_position() &lt; file.get_len():
				    # Данные для чтения
				[/codeblock]
			</description>
		</method>
		<method name="file_exists" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="path" type="String" />
			<description>
				Возвращает [code]true[/code], если файл существует по указанному пути.
				[b]Примечание:[/b] Многие типы ресурсов импортируются (например, текстуры или звуковые файлы), и их исходный актив не будет включен в экспортируемую игру, так как используется только импортированная версия. Альтернативный подход, учитывающий ремаппинг ресурсов, см. в [методе ResourceLoader.exists].
			</description>
		</method>
		<method name="flush">
			<return type="void" />
			<description>
				Записывает буфер файла на диск. Промывка выполняется автоматически при закрытии файла. Это означает, что вам не нужно вызывать [method flush] вручную перед закрытием файла с помощью [method close]. Тем не менее, вызов [method flush] может быть использован для обеспечения сохранности данных, даже если проект падает, а не закрывается изящно.
				[b]Примечание:[/b] Вызывайте [method flush] только тогда, когда это действительно необходимо. В противном случае это приведет к снижению производительности из-за постоянной записи на диск.
			</description>
		</method>
		<method name="get_16" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает следующие 16 бит из файла в виде целого числа. Подробности о том, какие значения можно хранить и извлекать таким образом, см. в [метод store_16].
			</description>
		</method>
		<method name="get_32" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает следующие 32 бита из файла в виде целого числа. Подробности о том, какие значения можно хранить и извлекать таким образом, см. в [метод store_32].
			</description>
		</method>
		<method name="get_64" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает следующие 64 бита из файла в виде целого числа. Подробности о том, какие значения можно хранить и извлекать таким образом, см. в [method store_64].
			</description>
		</method>
		<method name="get_8" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает следующие 8 бит из файла в виде целого числа. Подробности о том, какие значения можно хранить и извлекать таким образом, см. в [метод store_8].
			</description>
		</method>
		<method name="get_as_text" qualifiers="const">
			<return type="String" />
			<argument index="0" name="skip_cr" type="bool" default="true" />
			<description>
				Возвращает весь файл в виде [String]. Текст интерпретируется как закодированный в UTF-8.
				Если [code]skip_cr[/code] имеет значение [code]true[/code], то символы возврата каретки ([code]\r[/code], CR) будут игнорироваться при разборе UTF-8, так что только символы перевода строки ([code]\n[/code], LF) будут представлять новую строку (соглашение Unix).
			</description>
		</method>
		<method name="get_buffer" qualifiers="const">
			<return type="PoolByteArray" />
			<argument index="0" name="len" type="int" />
			<description>
				Возвращает следующие [code]len[/code] байтов файла в виде [PoolByteArray].
			</description>
		</method>
		<method name="get_csv_line" qualifiers="const">
			<return type="PoolStringArray" />
			<argument index="0" name="delim" type="String" default="&quot;,&quot;" />
			<description>
				Возвращает следующее значение файла в формате CSV (Comma-Separated Values). Вы можете передать другой разделитель [code]delim[/code], отличный от используемого по умолчанию [code]","[/code] (запятая). Этот разделитель должен состоять из одного символа и не может быть двойной кавычкой.
				Текст интерпретируется как закодированный в UTF-8. Текстовые значения должны быть заключены в двойные кавычки, если они включают символ-разделитель. Двойные кавычки внутри текстового значения можно экранировать, удвоив их количество.
				Например, следующие строки CSV являются допустимыми и будут правильно разобраны как две строки каждая:
				[codeblock]
				Alice,"Hello, Bob!"
				Bob,Alice! What a surprise!
				Alice,"I thought you'd reply with ""Hello, world""."
				[/codeblock]
				Обратите внимание, что во второй строке можно не использовать заключающие кавычки, поскольку в ней нет разделителя. Однако она [i]вполне могла бы[/i] использовать кавычки, но была написана без них только в демонстрационных целях. В третьей строке необходимо использовать [code]""[/code] для каждой кавычки, которая должна интерпретироваться как таковая, а не как конец текстового значения.
			</description>
		</method>
		<method name="get_double" qualifiers="const">
			<return type="float" />
			<description>
				Возвращает следующие 64 бита из файла в виде числа с плавающей точкой.
			</description>
		</method>
		<method name="get_error" qualifiers="const">
			<return type="int" enum="Error" />
			<description>
				Возвращает последнюю ошибку, произошедшую при попытке выполнения операций. Сравните с константами [code]ERR_FILE_*[/code] из [enum Error].
			</description>
		</method>
		<method name="get_float" qualifiers="const">
			<return type="float" />
			<description>
				Возвращает следующие 32 бита из файла в виде числа с плавающей точкой.
			</description>
		</method>
		<method name="get_len" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает размер файла в байтах.
			</description>
		</method>
		<method name="get_line" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает следующую строку файла в виде [String].
				Текст интерпретируется как закодированный в UTF-8.
			</description>
		</method>
		<method name="get_md5" qualifiers="const">
			<return type="String" />
			<argument index="0" name="path" type="String" />
			<description>
				Возвращает MD5-строку, представляющую файл по указанному пути, или пустую [String] в случае неудачи.
			</description>
		</method>
		<method name="get_modified_time" qualifiers="const">
			<return type="int" />
			<argument index="0" name="file" type="String" />
			<description>
				Возвращает время последнего изменения [code]файла[/code] в формате unix timestamp или возвращает [String] "ERROR IN [code]file[/code]". Эта временная метка unix может быть преобразована в datetime с помощью [метода OS.get_datetime_from_unix_time].
			</description>
		</method>
		<method name="get_pascal_string">
			<return type="String" />
			<description>
				Возвращает из файла [String], сохраненный в формате Pascal.
				Текст интерпретируется как закодированный в UTF-8.
			</description>
		</method>
		<method name="get_path" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает путь к текущему открытому файлу в виде [String].
			</description>
		</method>
		<method name="get_path_absolute" qualifiers="const">
			<return type="String" />
			<description>
				Возвращает абсолютный путь к текущему открытому файлу в виде [String].
			</description>
		</method>
		<method name="get_position" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает позицию курсора файла.
			</description>
		</method>
		<method name="get_real" qualifiers="const">
			<return type="float" />
			<description>
				Возвращает следующие биты из файла в виде числа с плавающей точкой.
			</description>
		</method>
		<method name="get_sha256" qualifiers="const">
			<return type="String" />
			<argument index="0" name="path" type="String" />
			<description>
				Возвращает SHA-256 [String], представляющий файл по указанному пути, или пустой [String] в случае неудачи.
			</description>
		</method>
		<method name="get_var" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="allow_objects" type="bool" default="false" />
			<description>
				Возвращает следующее значение [Variant] из файла. Если [code]allow_objects[/code] равен [code]true[/code], декодирование объектов разрешено.
				[b]Предупреждение:[/b] Десериализованные объекты могут содержать код, который будет выполнен. Не используйте эту опцию, если сериализованный объект получен из ненадежных источников, чтобы избежать потенциальных угроз безопасности, таких как удаленное выполнение кода.
			</description>
		</method>
		<method name="is_open" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если файл в данный момент открыт.
			</description>
		</method>
		<method name="open">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="flags" type="int" enum="File.ModeFlags" />
			<description>
				Открывает файл для записи или чтения, в зависимости от установленных флагов.
			</description>
		</method>
		<method name="open_compressed">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="mode_flags" type="int" enum="File.ModeFlags" />
			<argument index="2" name="compression_mode" type="int" enum="File.CompressionMode" default="0" />
			<description>
				Открывает сжатый файл для чтения или записи.
				[b]Примечание:[/b] [метод open_compressed] может читать только файлы, сохраненные Godot, но не сторонние форматы сжатия. Смотрите [url=https://github.com/godotengine/godot/issues/28999]GitHub issue #28999[/url] для обходного пути.
			</description>
		</method>
		<method name="open_encrypted">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="mode_flags" type="int" enum="File.ModeFlags" />
			<argument index="2" name="key" type="PoolByteArray" />
			<description>
				Открывает зашифрованный файл в режиме записи или чтения. Для шифрования/дешифрования необходимо передать двоичный ключ.
				[b]Примечание:[/b] Передаваемый ключ должен быть длиной 32 байта.
			</description>
		</method>
		<method name="open_encrypted_with_pass">
			<return type="int" enum="Error" />
			<argument index="0" name="path" type="String" />
			<argument index="1" name="mode_flags" type="int" enum="File.ModeFlags" />
			<argument index="2" name="pass" type="String" />
			<description>
				Открывает зашифрованный файл в режиме записи или чтения. Для шифрования/дешифрования необходимо передать пароль.
			</description>
		</method>
		<method name="seek">
			<return type="void" />
			<argument index="0" name="position" type="int" />
			<description>
				Перемещает курсор чтения/записи файла в указанную позицию (в байтах от начала файла).
			</description>
		</method>
		<method name="seek_end">
			<return type="void" />
			<argument index="0" name="position" type="int" default="0" />
			<description>
				Изменяет курсор чтения/записи файла на указанную позицию (в байтах от конца файла).
				[b]Примечание:[/b] Это смещение, поэтому следует использовать отрицательные числа, иначе курсор окажется в конце файла.
			</description>
		</method>
		<method name="store_16">
			<return type="void" />
			<argument index="0" name="value" type="int" />
			<description>
				Сохраняет целое число в виде 16 бит в файле.
				[b]Примечание:[/b] Значение [code]value[/code] должно лежать в интервале [code][0, 2^16 - 1][/code]. Любое другое значение будет переполнено и обернуто вокруг.
				Для хранения знакового целого используйте [method store_64] или храните знаковое целое из интервала [code][-2^15, 2^15 - 1][/code] (т.е. сохраняя один бит для знаковости) и вычисляйте его знак вручную при чтении. Например:
				[codeblock]
				const MAX_15B = 1 &lt;&lt; 15
				const MAX_16B = 1 &lt;&lt; 16

				func unsigned16_to_signed(unsigned):
				    return (unsigned + MAX_15B) % MAX_16B - MAX_15B

				func _ready():
				    var f = File.new()
				    f.open("user://file.dat", File.WRITE_READ)
				    f.store_16(-42) # Это обернется и сохранит 65494 (2^16 - 42).
				    f.store_16(121) # В границах будет храниться 121.
				    f.seek(0) # Вернитесь к началу, чтобы считать сохраненное значение.
				    var read1 = f.get_16() # 65494
				    var read2 = f.get_16() # 121
				    var converted1 = unsigned16_to_signed(read1) # -42
				    var converted2 = unsigned16_to_signed(read2) # 121
				[/codeblock]
			</description>
		</method>
		<method name="store_32">
			<return type="void" />
			<argument index="0" name="value" type="int" />
			<description>
				Сохраняет в файле целое число в 32 бита.
				[b]Примечание:[/b] Значение [code]value[/code] должно лежать в интервале [code][0, 2^32 - 1][/code]. Любое другое значение будет переполнено и обернуто вокруг.
				Для хранения знаковых целых чисел используйте [method store_64] или преобразуйте их вручную (пример см. в [method store_16]).
			</description>
		</method>
		<method name="store_64">
			<return type="void" />
			<argument index="0" name="value" type="int" />
			<description>
				Сохраняет в файле целое число в 64 бита.
				[b]Примечание:[/b] Значение [code]value[/code] должно лежать в интервале [code][-2^63, 2^63 - 1][/code] (т.е. быть допустимым значением [int]).
			</description>
		</method>
		<method name="store_8">
			<return type="void" />
			<argument index="0" name="value" type="int" />
			<description>
				Сохраняет в файле целое число в виде 8 бит.
				[b]Примечание:[/b] Значение [code]value[/code] должно лежать в интервале [code][0, 255][/code]. Любое другое значение будет переполнено и обернуто вокруг.
				Для хранения знаковых целых чисел используйте [method store_64] или преобразуйте их вручную (пример см. в [method store_16]).
			</description>
		</method>
		<method name="store_buffer">
			<return type="void" />
			<argument index="0" name="buffer" type="PoolByteArray" />
			<description>
				Записывает заданный массив байтов в файл.
			</description>
		</method>
		<method name="store_csv_line">
			<return type="void" />
			<argument index="0" name="values" type="PoolStringArray" />
			<argument index="1" name="delim" type="String" default="&quot;,&quot;" />
			<description>
				Сохраняет заданный [PoolStringArray] в файле в виде строки, отформатированной в формате CSV (Comma-Separated Values). Вы можете передать другой разделитель [code]delim[/code], отличный от используемого по умолчанию [code]","[/code] (запятая). Этот разделитель должен состоять из одного символа.
				Текст будет закодирован в формате UTF-8.
			</description>
		</method>
		<method name="store_double">
			<return type="void" />
			<argument index="0" name="value" type="float" />
			<description>
				Сохраняет в файле число с плавающей точкой в виде 64 бит.
			</description>
		</method>
		<method name="store_float">
			<return type="void" />
			<argument index="0" name="value" type="float" />
			<description>
				Сохраняет в файле число с плавающей точкой в виде 32 бит.
			</description>
		</method>
		<method name="store_line">
			<return type="void" />
			<argument index="0" name="line" type="String" />
			<description>
				Добавляет в файл [code]line[/code], за которым следует символ возврата строки ([code]\n[/code]), кодируя текст в формате UTF-8.
			</description>
		</method>
		<method name="store_pascal_string">
			<return type="void" />
			<argument index="0" name="string" type="String" />
			<description>
				Сохраняет заданную [String] как строку в файле в формате Pascal (т.е. также сохраняет длину строки).
				Текст будет закодирован в формате UTF-8.
			</description>
		</method>
		<method name="store_real">
			<return type="void" />
			<argument index="0" name="value" type="float" />
			<description>
				Сохраняет в файле число с плавающей точкой.
			</description>
		</method>
		<method name="store_string">
			<return type="void" />
			<argument index="0" name="string" type="String" />
			<description>
				Добавляет [code]строку[/code] в файл без возврата строки, кодируя текст как UTF-8.
				[b]Примечание:[/b] Этот метод предназначен для записи текстовых файлов. Строка хранится в виде буфера в кодировке UTF-8 без длины строки или завершающего нуля, что означает, что ее нельзя легко загрузить обратно. Если вы хотите хранить извлекаемую строку в бинарном файле, используйте вместо этого [метод store_pascal_string]. Для извлечения строк из текстового файла можно использовать [code]get_buffer(length).get_string_from_utf8()[/code] (если вы знаете длину) или [method get_as_text].
			</description>
		</method>
		<method name="store_var">
			<return type="void" />
			<argument index="0" name="value" type="Variant" />
			<argument index="1" name="full_objects" type="bool" default="false" />
			<description>
				Сохраняет любое значение Variant в файле. Если [code]full_objects[/code] имеет значение [code]true[/code], кодирование объектов разрешено (и потенциально может включать код).
				[b]Примечание:[/b] Не все свойства будут включены. Сериализуются только те свойства, для которых установлен флаг [constant PROPERTY_USAGE_STORAGE]. Вы можете добавить новый флаг использования к свойству, переопределив метод [method Object._get_property_list] в своем классе. Вы также можете проверить, как настроено использование свойства, вызвав метод [method Object._get_property_list]. Смотрите [enum PropertyUsageFlags] для возможных флагов использования.
			</description>
		</method>
	</methods>
	<members>
		<member name="endian_swap" type="bool" setter="set_endian_swap" getter="get_endian_swap" default="false">
			Если [code]true[/code], файл читается с большим [url=https://en.wikipedia.org/wiki/Endianness]endian[/url]. Если [code]false[/code], то файл будет читаться с little-endian. Если вы сомневаетесь, оставьте значение [code]false[/code], так как большинство файлов записываются с little-endian.
			[b]Примечание:[/b] [member endian_swap] относится только к формату файла, но не к типу процессора. Эндианальность процессора не влияет на эндианальность по умолчанию для записываемых файлов.
			[b]Примечание:[/b] Этот параметр всегда сбрасывается в [code]false[/code] при открытии файла. Поэтому вы должны установить [member endian_swap] [i]после[/i] открытия файла, а не до.
		</member>
	</members>
	<constants>
		<constant name="READ" value="1" enum="ModeFlags">
			Открывает файл для операций чтения. Курсор устанавливается в начало файла.
		</constant>
		<constant name="WRITE" value="2" enum="ModeFlags">
			Открывает файл для операций записи. Файл создается, если он не существует, и усекается, если существует.
		</constant>
		<constant name="READ_WRITE" value="3" enum="ModeFlags">
			Открывает файл для операций чтения и записи. Не усекает файл. Курсор позиционируется в начале файла.
		</constant>
		<constant name="WRITE_READ" value="7" enum="ModeFlags">
			Открывает файл для операций чтения и записи. Файл создается, если он не существует, и усекается, если существует. Курсор помещается в начало файла.
		</constant>
		<constant name="COMPRESSION_FASTLZ" value="0" enum="CompressionMode">
			Используется метод сжатия [url=http://fastlz.org/]FastLZ[/url].
		</constant>
		<constant name="COMPRESSION_DEFLATE" value="1" enum="CompressionMode">
			Использует метод сжатия [url=https://en.wikipedia.org/wiki/DEFLATE]DEFLATE[/url].
		</constant>
		<constant name="COMPRESSION_ZSTD" value="2" enum="CompressionMode">
			Используется метод сжатия [url=https://facebook.github.io/zstd/]Zstandard[/url].
		</constant>
		<constant name="COMPRESSION_GZIP" value="3" enum="CompressionMode">
			Использует метод сжатия [url=https://www.gzip.org/]gzip[/url].
		</constant>
	</constants>
</class>
