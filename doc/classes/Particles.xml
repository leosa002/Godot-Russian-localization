<?xml version="1.0" encoding="UTF-8" ?>
<class name="Particles" inherits="GeometryInstance" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		3D-излучатель частиц на базе GPU.
	</brief_description>
	<description>
		3D-узел частиц, используемый для создания различных систем частиц и эффектов. [Particles] содержит эмиттер, который генерирует некоторое количество частиц с заданной скоростью.
		Используйте свойство [code]process_material[/code], чтобы добавить [ParticlesMaterial] для настройки внешнего вида и поведения частиц. В качестве альтернативы можно добавить [ShaderMaterial], который будет применяться ко всем частицам.
		[b]Примечание:[/b] [Частицы] работают только при использовании рендера GLES3. Если вы используете рендер GLES2, используйте [CPUParticles]. Вы можете преобразовать [Particles] в [CPUParticles], выбрав узел, нажав меню [b]Particles[/b] в верхней части окна просмотра 3D-редактора и выбрав [b]Convert to CPUParticles[/b].
		[b]Примечание:[/b] На macOS рендеринг [Particles] происходит гораздо медленнее, чем [CPUParticles], из-за того, что обратная связь трансформации реализуется на CPU, а не на GPU. Рассмотрите возможность использования [CPUParticles] вместо этого, если вы нацелены на macOS.
		[b]Примечание:[/b] После работы с узлом частиц не забудьте обновить его [member visibility_aabb], выбрав его, нажав меню [b]Particles[/b] в верхней части видового экрана 3D-редактора и выбрав [b]Generate Visibility AABB[/b]. В противном случае частицы могут внезапно исчезнуть в зависимости от положения и угла наклона камеры.
	</description>
	<tutorials>
		<link title="Controlling thousands of fish with Particles">$DOCS_URL/tutorials/performance/vertex_animation/controlling_thousands_of_fish.html</link>
		<link title="Third Person Shooter Demo">https://godotengine.org/asset-library/asset/678</link>
	</tutorials>
	<methods>
		<method name="capture_aabb" qualifiers="const">
			<return type="AABB" />
			<description>
				Возвращает выровненное по оси ограничительное поле, содержащее все частицы, активные в текущем кадре.
			</description>
		</method>
		<method name="get_draw_pass_mesh" qualifiers="const">
			<return type="Mesh" />
			<argument index="0" name="pass" type="int" />
			<description>
				Возвращает [Mesh], отрисованную по индексу [code]pass[/code].
			</description>
		</method>
		<method name="restart">
			<return type="void" />
			<description>
				Перезапускает выброс частиц, очищая существующие частицы.
			</description>
		</method>
		<method name="set_draw_pass_mesh">
			<return type="void" />
			<argument index="0" name="pass" type="int" />
			<argument index="1" name="mesh" type="Mesh" />
			<description>
				Устанавливает [Mesh], которая будет отрисована в индексе [code]pass[/code].
			</description>
		</method>
	</methods>
	<members>
		<member name="amount" type="int" setter="set_amount" getter="get_amount" default="8">
			Количество частиц, испускаемых за один цикл испускания (соответствует [времени жизни члена]).
			[b]Примечание:[/b] Изменение [member amount] сбросит выброс частиц, таким образом удалив все частицы, которые уже были выброшены до изменения [member amount].
		</member>
		<member name="draw_order" type="int" setter="set_draw_order" getter="get_draw_order" enum="Particles.DrawOrder" default="0">
			Порядок отрисовки частиц. Использует значения [enum DrawOrder].
		</member>
		<member name="draw_pass_1" type="Mesh" setter="set_draw_pass_mesh" getter="get_draw_pass_mesh">
			[Mesh], которая рисуется при первом проходе рисования.
		</member>
		<member name="draw_pass_2" type="Mesh" setter="set_draw_pass_mesh" getter="get_draw_pass_mesh">
			[Mesh], который рисуется во время второго прохода.
		</member>
		<member name="draw_pass_3" type="Mesh" setter="set_draw_pass_mesh" getter="get_draw_pass_mesh">
			[Mesh], которая нарисована для третьего прохода.
		</member>
		<member name="draw_pass_4" type="Mesh" setter="set_draw_pass_mesh" getter="get_draw_pass_mesh">
			[Mesh], которая нарисована за четвертый проход.
		</member>
		<member name="draw_passes" type="int" setter="set_draw_passes" getter="get_draw_passes" default="1">
			Количество проходов отрисовки при рендеринге частиц.
		</member>
		<member name="emitting" type="bool" setter="set_emitting" getter="is_emitting" default="true">
			Если [code]true[/code], частицы излучаются.
		</member>
		<member name="explosiveness" type="float" setter="set_explosiveness_ratio" getter="get_explosiveness_ratio" default="0.0">
			Соотношение времени между каждым выбросом. Если [code]0[/code], частицы испускаются непрерывно. Если [code]1[/code], то все частицы испускаются одновременно.
		</member>
		<member name="fixed_fps" type="int" setter="set_fixed_fps" getter="get_fixed_fps" default="0">
			Частота кадров системы частиц фиксируется на определенном значении. Например, если изменить значение на 2, частицы будут отрисовываться со скоростью 2 кадра в секунду. Обратите внимание, что это не замедляет симуляцию самой системы частиц.
		</member>
		<member name="fract_delta" type="bool" setter="set_fractional_delta" getter="get_fractional_delta" default="true">
			Если [code]true[/code], это приводит к расчету дробной дельты, что дает более плавный эффект отображения частиц.
		</member>
		<member name="lifetime" type="float" setter="set_lifetime" getter="get_lifetime" default="1.0">
			Время существования каждой частицы (в секундах).
		</member>
		<member name="local_coords" type="bool" setter="set_use_local_coordinates" getter="get_use_local_coordinates" default="true">
			Если [code]true[/code], частицы используют координатное пространство родительского узла. Если [code]false[/code], то они используют глобальные координаты.
		</member>
		<member name="one_shot" type="bool" setter="set_one_shot" getter="get_one_shot" default="false">
			Если [code]true[/code], будут испускаться только частицы [code]amount[/code].
		</member>
		<member name="preprocess" type="float" setter="set_pre_process_time" getter="get_pre_process_time" default="0.0">
			Количество времени на предварительную обработку частиц перед началом анимации. Позволяет запустить анимацию через некоторое время после начала испускания частиц.
		</member>
		<member name="process_material" type="Material" setter="set_process_material" getter="get_process_material">
			[Material] для обработки частиц. Может быть [ParticlesMaterial] или [ShaderMaterial].
		</member>
		<member name="randomness" type="float" setter="set_randomness_ratio" getter="get_randomness_ratio" default="0.0">
			Коэффициент случайности выброса.
		</member>
		<member name="speed_scale" type="float" setter="set_speed_scale" getter="get_speed_scale" default="1.0">
			Коэффициент масштабирования скорости. Значение [code]0[/code] может использоваться для приостановки частиц.
		</member>
		<member name="visibility_aabb" type="AABB" setter="set_visibility_aabb" getter="get_visibility_aabb" default="AABB( -4, -4, -4, 8, 8, 8 )">
			[AABB], определяющий область узла, которая должна быть видна на экране, чтобы система частиц была активна.
			Выращивайте поле, если частицы внезапно появляются/исчезают, когда узел входит/выходит из экрана. AABB можно вырастить с помощью кода или инструмента редактора [b]Particles → Generate AABB[/b].
			[b]Примечание:[/b] Если используемый [ParticlesMaterial] настроен на отбрасывание теней, вам может понадобиться увеличить этот AABB, чтобы тень обновлялась, когда частицы находятся за пределами экрана.
		</member>
	</members>
	<constants>
		<constant name="DRAW_ORDER_INDEX" value="0" enum="DrawOrder">
			Частицы рисуются в порядке их испускания.
		</constant>
		<constant name="DRAW_ORDER_LIFETIME" value="1" enum="DrawOrder">
			Частицы нарисованы в порядке возрастания оставшегося времени жизни.
		</constant>
		<constant name="DRAW_ORDER_VIEW_DEPTH" value="2" enum="DrawOrder">
			Частицы рисуются в порядке возрастания глубины.
		</constant>
		<constant name="MAX_DRAW_PASSES" value="4">
			Максимальное количество поддерживаемых пропусков.
		</constant>
	</constants>
</class>
