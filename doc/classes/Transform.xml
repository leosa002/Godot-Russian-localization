<?xml version="1.0" encoding="UTF-8" ?>
<class name="Transform" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		3D-трансформация (матрица 3×4).
	</brief_description>
	<description>
		Матрица 3×4 (3 строки, 4 столбца), используемая для линейных преобразований 3D. Она может представлять такие преобразования, как перевод, поворот или масштабирование. Она состоит из [member basis] (первые 3 столбца) и [Vector3] для [member origin] (последний столбец).
		Для получения дополнительной информации читайте статью документации "Матрицы и преобразования".
	</description>
	<tutorials>
		<link title="Math tutorial index">$DOCS_URL/tutorials/math/index.html</link>
		<link title="Matrices and transforms">$DOCS_URL/tutorials/math/matrices_and_transforms.html</link>
		<link title="Using 3D transforms">$DOCS_URL/tutorials/3d/using_transforms.html</link>
		<link title="Matrix Transform Demo">https://godotengine.org/asset-library/asset/584</link>
		<link title="3D Platformer Demo">https://godotengine.org/asset-library/asset/125</link>
		<link title="2.5D Demo">https://godotengine.org/asset-library/asset/583</link>
	</tutorials>
	<methods>
		<method name="Transform">
			<return type="Transform" />
			<argument index="0" name="x_axis" type="Vector3" />
			<argument index="1" name="y_axis" type="Vector3" />
			<argument index="2" name="z_axis" type="Vector3" />
			<argument index="3" name="origin" type="Vector3" />
			<description>
				Создает преобразование из четырех значений [Vector3] (столбцов матрицы). Каждая ось соответствует локальным базисным векторам (некоторые из них могут быть масштабированы).
			</description>
		</method>
		<method name="Transform">
			<return type="Transform" />
			<argument index="0" name="basis" type="Basis" />
			<argument index="1" name="origin" type="Vector3" />
			<description>
				Создает преобразование из [Basis] и [Vector3].
			</description>
		</method>
		<method name="Transform">
			<return type="Transform" />
			<argument index="0" name="from" type="Transform2D" />
			<description>
				Создает преобразование/Transform из [Transform2D].
			</description>
		</method>
		<method name="Transform">
			<return type="Transform" />
			<argument index="0" name="from" type="Quat" />
			<description>
				Создает преобразование из [Quat]. Началом координат будет [code]Vector3(0, 0, 0)[/code].
			</description>
		</method>
		<method name="Transform">
			<return type="Transform" />
			<argument index="0" name="from" type="Basis" />
			<description>
				Создает преобразование из [Basis]. В качестве начала координат будет использоваться Vector3(0, 0, 0).
			</description>
		</method>
		<method name="affine_inverse">
			<return type="Transform" />
			<description>
				Возвращает обратную величину преобразования в предположении, что преобразование состоит из вращения, масштабирования и перевода.
			</description>
		</method>
		<method name="interpolate_with">
			<return type="Transform" />
			<argument index="0" name="transform" type="Transform" />
			<argument index="1" name="weight" type="float" />
			<description>
				Возвращает преобразование, интерполированное между этим и другим преобразованием на заданный [code]вес[/code] (в диапазоне от 0.0 до 1.0).
			</description>
		</method>
		<method name="inverse">
			<return type="Transform" />
			<description>
				Возвращает обратную величину преобразования в предположении, что преобразование состоит из вращения и перевода (без масштабирования, для преобразований с масштабированием используйте [метод affine_inverse]).
			</description>
		</method>
		<method name="is_equal_approx">
			<return type="bool" />
			<argument index="0" name="transform" type="Transform" />
			<description>
				Возвращает [code]true[/code], если данное преобразование и [code]transform[/code] приблизительно равны, вызывая [code]is_equal_approx[/code] для каждого компонента.
			</description>
		</method>
		<method name="looking_at">
			<return type="Transform" />
			<argument index="0" name="target" type="Vector3" />
			<argument index="1" name="up" type="Vector3" />
			<description>
				Возвращает копию трансформации, повернутую таким образом, чтобы ее ось -Z была направлена на позицию [code]target[/code].
				Трансформация сначала будет повернута вокруг заданного вектора [code]up[/code], а затем полностью выровнена относительно цели путем дальнейшего вращения вокруг оси, перпендикулярной векторам [code]target[/code] и [code]up[/code].
				Операции происходят в глобальном пространстве.
			</description>
		</method>
		<method name="orthonormalized">
			<return type="Transform" />
			<description>
				Возвращает преобразование с базисом, ортогональным (90 градусов), и нормализованными осевыми векторами (масштаб 1 или -1).
			</description>
		</method>
		<method name="rotated">
			<return type="Transform" />
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="angle" type="float" />
			<description>
				Возвращает копию преобразования, повернутого вокруг заданной [code]оси[/code] на заданный [code]угол[/code] (в радианах) с помощью матричного умножения. Ось [code]axis[/code] должна быть нормализованным вектором.
			</description>
		</method>
		<method name="scaled">
			<return type="Transform" />
			<argument index="0" name="scale" type="Vector3" />
			<description>
				Возвращает копию преобразования с базисом и началом, масштабированную на заданный коэффициент [code]scale[/code], используя матричное умножение.
			</description>
		</method>
		<method name="translated">
			<return type="Transform" />
			<argument index="0" name="offset" type="Vector3" />
			<description>
				Возвращает копию преобразования, переведенную на заданное [code]смещение[/code], относительно базисных векторов преобразования.
				В отличие от [method rotated] и [method scaled], здесь не используется матричное умножение.
			</description>
		</method>
		<method name="xform">
			<return type="Variant" />
			<argument index="0" name="v" type="Variant" />
			<description>
				Преобразовывает заданный [Vector3], [Plane], [AABB] или [PoolVector3Array] с помощью данного преобразования.
			</description>
		</method>
		<method name="xform_inv">
			<return type="Variant" />
			<argument index="0" name="v" type="Variant" />
			<description>
				Инверсия - преобразование заданного [Vector3], [Plane], [AABB] или [PoolVector3Array] данным преобразованием в предположении, что преобразование состоит из вращения и трансляции (без масштабирования). Эквивалентно вызову [code]inverse().xform(v)[/code] для этого преобразования. Для аффинных преобразований (например, с масштабированием) смотрите метод [method affine_inverse].
			</description>
		</method>
	</methods>
	<members>
		<member name="basis" type="Basis" setter="" getter="" default="Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )">
			Основой является матрица, содержащая 3 [Vector3] в качестве столбцов: Ось X, Ось Y и Ось Z. Эти векторы можно интерпретировать как базисные векторы локальной системы координат, перемещающейся вместе с объектом.
		</member>
		<member name="origin" type="Vector3" setter="" getter="" default="Vector3( 0, 0, 0 )">
			Смещение трансляции преобразования (столбец 3, четвертый столбец). Эквивалентно индексу массива [code]3[/code].
		</member>
	</members>
	<constants>
		<constant name="IDENTITY" value="Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )">
			[Transform] без применения перевода, вращения или масштабирования. При применении к другим структурам данных [constant IDENTITY] преобразование не выполняется.
		</constant>
		<constant name="FLIP_X" value="Transform( -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )">
			[Transform] с зеркальным отображением перпендикулярно плоскости YZ.
		</constant>
		<constant name="FLIP_Y" value="Transform( 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0 )">
			[Transform] с зеркальным отражением, нанесенным перпендикулярно плоскости XZ.
		</constant>
		<constant name="FLIP_Z" value="Transform( 1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0 )">
			[Transform] с зеркальным отображением перпендикулярно плоскости XY.
		</constant>
	</constants>
</class>
