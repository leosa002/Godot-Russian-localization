<?xml version="1.0" encoding="UTF-8" ?>
<class name="Animation" inherits="Resource" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Содержит данные, используемые для анимирования всего в движке.
	</brief_description>
	<description>
		Ресурс Animation содержит данные, используемые для анимации всех объектов в движке. Анимации делятся на дорожки, и каждая дорожка должна быть связана с узлом. Состояние этого узла можно изменять во времени, добавляя к треку ключи (события) с таймером.
		[codeblock]
		# Это создает анимацию, которая заставляет узел "Враг" перемещаться вправо на
		# 100 пикселей за 0,5 секунды.
		var animation = Animation.new()
		var track_index = animation.add_track(Animation.TYPE_VALUE)
		animation.track_set_path(track_index, "Enemy:position:x")
		animation.track_insert_key(track_index, 0.0, 0)
		animation.track_insert_key(track_index, 0.5, 100)
		[/codeblock]
		Анимации - это просто контейнеры данных, и для воспроизведения их необходимо добавить в узлы, такие как [AnimationPlayer] или [AnimationTreePlayer]. Дорожки анимации имеют различные типы, каждый из которых имеет свой набор специальных методов. Для просмотра доступных типов обратитесь к [enum TrackType].
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/animation/index.html</link>
	</tutorials>
	<methods>
		<method name="add_track">
			<return type="int" />
			<argument index="0" name="type" type="int" enum="Animation.TrackType" />
			<argument index="1" name="at_position" type="int" default="-1" />
			<description>
				Добавляет дорожку в анимацию.
			</description>
		</method>
		<method name="animation_track_get_key_animation" qualifiers="const">
			<return type="String" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Возвращает имя анимации по ключу, идентифицированному [code]key_idx[/code]. [code]track_idx[/code] должен быть индексом дорожки анимации.
			</description>
		</method>
		<method name="animation_track_insert_key">
			<return type="int" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="time" type="float" />
			<argument index="2" name="animation" type="String" />
			<description>
				Вставляет ключ со значением [code]animation[/code] в заданное [code]time[/code] (в секундах). В качестве [code]track_idx[/code] должен быть указан индекс трека анимации.
			</description>
		</method>
		<method name="animation_track_set_key_animation">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<argument index="2" name="animation" type="String" />
			<description>
				Устанавливает ключ, обозначенный [code]key_idx[/code], в значение [code]animation[/code]. Индекс [code]track_idx[/code] должен быть индексом дорожки анимации.
			</description>
		</method>
		<method name="audio_track_get_key_end_offset" qualifiers="const">
			<return type="float" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Возвращает конечное смещение ключа, идентифицированного [code]key_idx[/code]. [code]track_idx[/code] должен быть индексом звуковой дорожки.
				Конечное смещение - это количество секунд, отрезанных при завершении аудиопотока.
			</description>
		</method>
		<method name="audio_track_get_key_start_offset" qualifiers="const">
			<return type="float" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Возвращает начальное смещение ключа, идентифицированного [code]key_idx[/code]. [code]track_idx[/code] должен быть индексом звуковой дорожки.
				Стартовое смещение - это количество секунд, отрезанных в начале аудиопотока.
			</description>
		</method>
		<method name="audio_track_get_key_stream" qualifiers="const">
			<return type="Resource" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Возвращает аудиопоток ключа, идентифицированного [code]key_idx[/code]. [code]track_idx[/code] должен быть индексом звуковой дорожки.
			</description>
		</method>
		<method name="audio_track_insert_key">
			<return type="int" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="time" type="float" />
			<argument index="2" name="stream" type="Resource" />
			<argument index="3" name="start_offset" type="float" default="0" />
			<argument index="4" name="end_offset" type="float" default="0" />
			<description>
				Вставляет ключ аудиодорожки в заданное [code]time[/code] в секундах. [code]track_idx[/code] должен быть индексом аудиодорожки.
				[code]stream[/code] - ресурс [AudioStream] для воспроизведения. [code]start_offset[/code] - это количество секунд, отрезанных в начале аудиопотока, а [code]end_offset[/code] - в конце.
			</description>
		</method>
		<method name="audio_track_set_key_end_offset">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<argument index="2" name="offset" type="float" />
			<description>
				Устанавливает конечное смещение ключа, идентифицированного [code]key_idx[/code], на значение [code]offset[/code]. [code]track_idx[/code] должен быть индексом звуковой дорожки.
			</description>
		</method>
		<method name="audio_track_set_key_start_offset">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<argument index="2" name="offset" type="float" />
			<description>
				Устанавливает начальное смещение ключа, идентифицированного [code]key_idx[/code], на значение [code]offset[/code]. [code]track_idx[/code] должен быть индексом аудиодорожки.
			</description>
		</method>
		<method name="audio_track_set_key_stream">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<argument index="2" name="stream" type="Resource" />
			<description>
				Устанавливает поток ключа, идентифицированного [code]key_idx[/code], в значение [code]stream[/code]. Индекс [code]track_idx[/code] должен быть индексом аудиодорожки.
			</description>
		</method>
		<method name="bezier_track_get_key_in_handle" qualifiers="const">
			<return type="Vector2" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Возвращает "ручку" ключа, идентифицированного [code]key_idx[/code]. [code]track_idx[/code] должен быть индексом дорожки Безье.
			</description>
		</method>
		<method name="bezier_track_get_key_out_handle" qualifiers="const">
			<return type="Vector2" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Возвращает "ручку" выхода ключа, идентифицированного [code]key_idx[/code]. [code]track_idx[/code] должен быть индексом дорожки Безье.
			</description>
		</method>
		<method name="bezier_track_get_key_value" qualifiers="const">
			<return type="float" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Возвращает значение ключа, обозначенного [code]key_idx[/code]. [code]track_idx[/code] должен быть индексом дорожки Безье.
			</description>
		</method>
		<method name="bezier_track_insert_key">
			<return type="int" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="time" type="float" />
			<argument index="2" name="value" type="float" />
			<argument index="3" name="in_handle" type="Vector2" default="Vector2( 0, 0 )" />
			<argument index="4" name="out_handle" type="Vector2" default="Vector2( 0, 0 )" />
			<description>
				Вставляет ключ Bezier Track в заданное [code]time[/code] в секундах. [code]track_idx[/code] должен быть индексом дорожки Безье.
				[code]in_handle[/code] - это левый вес добавляемой точки кривой Безье, [code]out_handle[/code] - правый, а [code]value[/code] - фактическое значение в этой точке.
			</description>
		</method>
		<method name="bezier_track_interpolate" qualifiers="const">
			<return type="float" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="time" type="float" />
			<description>
				Возвращает интерполированное значение в заданное [code]time[/code] (в секундах). [code]track_idx[/code] должен быть индексом дорожки Безье.
			</description>
		</method>
		<method name="bezier_track_set_key_in_handle">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<argument index="2" name="in_handle" type="Vector2" />
			<description>
				Устанавливает значение [code]in_handle[/code] для ключа, идентифицированного [code]key_idx[/code]. [code]track_idx[/code] должен быть индексом дорожки Безье.
			</description>
		</method>
		<method name="bezier_track_set_key_out_handle">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<argument index="2" name="out_handle" type="Vector2" />
			<description>
				Устанавливает out handle ключа, идентифицированного [code]key_idx[/code], в значение [code]out_handle[/code]. [code]track_idx[/code] должен быть индексом дорожки Безье.
			</description>
		</method>
		<method name="bezier_track_set_key_value">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<argument index="2" name="value" type="float" />
			<description>
				Устанавливает значение ключа, обозначенного [code]key_idx[/code], в заданное значение. [code]track_idx[/code] должен быть индексом дорожки Безье.
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Очистите анимацию (очистите все дорожки и сбросьте все).
			</description>
		</method>
		<method name="copy_track">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="to_animation" type="Animation" />
			<description>
				Добавляет новую дорожку, являющуюся копией заданной дорожки из [code]to_animation[/code].
			</description>
		</method>
		<method name="find_track" qualifiers="const">
			<return type="int" />
			<argument index="0" name="path" type="NodePath" />
			<description>
				Возвращает индекс указанной дорожки. Если дорожка не найдена, возвращается -1.
			</description>
		</method>
		<method name="get_track_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество дорожек в анимации.
			</description>
		</method>
		<method name="method_track_get_key_indices" qualifiers="const">
			<return type="PoolIntArray" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="time_sec" type="float" />
			<argument index="2" name="delta" type="float" />
			<description>
				Возвращает все ключевые индексы дорожки метода, заданной позицией и дельта-временем.
			</description>
		</method>
		<method name="method_track_get_name" qualifiers="const">
			<return type="String" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Возвращает имя метода для дорожки методов.
			</description>
		</method>
		<method name="method_track_get_params" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Возвращает значения аргументов, которые должны быть вызваны на дорожке метода для заданнового ключа в заданной дорожке.
			</description>
		</method>
		<method name="remove_track">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<description>
				Удаление дорожки с указанием индекса дорожки.
			</description>
		</method>
		<method name="track_find_key" qualifiers="const">
			<return type="int" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="time" type="float" />
			<argument index="2" name="exact" type="bool" default="false" />
			<description>
				Находит индекс ключа по времени в заданном треке. Опционально можно найти его, только если указано точное время.
			</description>
		</method>
		<method name="track_get_interpolation_loop_wrap" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="track_idx" type="int" />
			<description>
				Возвращает [code]true[/code], если дорожка по адресу [code]idx[/code] оборачивает петлю интерполяции. Новые дорожки по умолчанию оборачивают цикл интерполяции.
			</description>
		</method>
		<method name="track_get_interpolation_type" qualifiers="const">
			<return type="int" enum="Animation.InterpolationType" />
			<argument index="0" name="track_idx" type="int" />
			<description>
				Возвращает тип интерполяции заданной дорожки.
			</description>
		</method>
		<method name="track_get_key_count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="track_idx" type="int" />
			<description>
				Возвращает количество ключей в заданном треке.
			</description>
		</method>
		<method name="track_get_key_time" qualifiers="const">
			<return type="float" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Возвращает время, в котором находится ключ.
			</description>
		</method>
		<method name="track_get_key_transition" qualifiers="const">
			<return type="float" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Возвращает кривую перехода (easing) для конкретного ключа (см. встроенную математическую функцию [method @GDScript.ease]).
			</description>
		</method>
		<method name="track_get_key_value" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Возвращает значение заданного ключа в заданной дорожке.
			</description>
		</method>
		<method name="track_get_path" qualifiers="const">
			<return type="NodePath" />
			<argument index="0" name="track_idx" type="int" />
			<description>
				Получает путь к дорожке. Более подробная информация о формате пути приведена в [method track_set_path].
			</description>
		</method>
		<method name="track_get_type" qualifiers="const">
			<return type="int" enum="Animation.TrackType" />
			<argument index="0" name="track_idx" type="int" />
			<description>
				Получает тип дорожки.
			</description>
		</method>
		<method name="track_insert_key">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="time" type="float" />
			<argument index="2" name="key" type="Variant" />
			<argument index="3" name="transition" type="float" default="1" />
			<description>
				Вставляет общий ключ в заданную дорожку.
			</description>
		</method>
		<method name="track_is_enabled" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="track_idx" type="int" />
			<description>
				Возвращает [code]true[/code], если дорожка по индексу [code]idx[/code] включена.
			</description>
		</method>
		<method name="track_is_imported" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="track_idx" type="int" />
			<description>
				Возвращает [code]true[/code], если данная дорожка импортирована. В противном случае возвращается [code]false[/code].
			</description>
		</method>
		<method name="track_move_down">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<description>
				Перемещает дорожку вниз.
			</description>
		</method>
		<method name="track_move_to">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="to_idx" type="int" />
			<description>
				Изменяет индексную позицию дорожки [code]idx[/code] на ту, которая определена в [code]to_idx[/code].
			</description>
		</method>
		<method name="track_move_up">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<description>
				Перемещает дорожку вверх.
			</description>
		</method>
		<method name="track_remove_key">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<description>
				Удаляет ключ по индексу в заданной дорожке.
			</description>
		</method>
		<method name="track_remove_key_at_position">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="position" type="float" />
			<description>
				Удаляет ключ по позиции (секундам) в заданном треке.
			</description>
		</method>
		<method name="track_set_enabled">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="enabled" type="bool" />
			<description>
				Включает/выключает заданную дорожку. По умолчанию дорожки включены.
			</description>
		</method>
		<method name="track_set_imported">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="imported" type="bool" />
			<description>
				Устанавливает заданный трек как импортированный или нет.
			</description>
		</method>
		<method name="track_set_interpolation_loop_wrap">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="interpolation" type="bool" />
			<description>
				Если [code]true[/code], то дорожка по адресу [code]idx[/code] оборачивает цикл интерполяции.
			</description>
		</method>
		<method name="track_set_interpolation_type">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="interpolation" type="int" enum="Animation.InterpolationType" />
			<description>
				Устанавливает тип интерполяции для данной дорожки.
			</description>
		</method>
		<method name="track_set_key_time">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<argument index="2" name="time" type="float" />
			<description>
				Устанавливает время существующего ключа.
			</description>
		</method>
		<method name="track_set_key_transition">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key_idx" type="int" />
			<argument index="2" name="transition" type="float" />
			<description>
				Устанавливает кривую перехода (easing) для конкретной клавиши (см. встроенную математическую функцию [method @GDScript.ease]).
			</description>
		</method>
		<method name="track_set_key_value">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="key" type="int" />
			<argument index="2" name="value" type="Variant" />
			<description>
				Устанавливает значение существующего ключа.
			</description>
		</method>
		<method name="track_set_path">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="path" type="NodePath" />
			<description>
				Задает путь дорожки. Пути должны быть действительными путями дерева сцены к узлу и должны быть указаны, начиная с родительского узла узла, который будет воспроизводить анимацию. Пути, управляющие свойствами или костями, должны добавлять свое имя после пути, разделяя его символами [code]":"[/code].
				Например, [code]"character/skeleton:ankle"[/code] или [code]"character/mesh:transform/local"[/code].
			</description>
		</method>
		<method name="track_swap">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="with_idx" type="int" />
			<description>
				Меняет индексную позицию дорожки [code]idx[/code] на дорожку [code]with_idx[/code].
			</description>
		</method>
		<method name="transform_track_insert_key">
			<return type="int" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="time" type="float" />
			<argument index="2" name="location" type="Vector3" />
			<argument index="3" name="rotation" type="Quat" />
			<argument index="4" name="scale" type="Vector3" />
			<description>
				Вставьте ключ преобразования для дорожки преобразования.
			</description>
		</method>
		<method name="transform_track_interpolate" qualifiers="const">
			<return type="Array" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="time_sec" type="float" />
			<description>
				Возвращает интерполированное значение дорожки преобразований в заданное время (в секундах). Массив, состоящий из 3 элементов: position ([Vector3]), rotation ([Quat]) и scale ([Vector3]).
			</description>
		</method>
		<method name="value_track_get_key_indices" qualifiers="const">
			<return type="PoolIntArray" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="time_sec" type="float" />
			<argument index="2" name="delta" type="float" />
			<description>
				Возвращает все ключевые индексы дорожки значений, заданной позицией и дельта-временем.
			</description>
		</method>
		<method name="value_track_get_update_mode" qualifiers="const">
			<return type="int" enum="Animation.UpdateMode" />
			<argument index="0" name="track_idx" type="int" />
			<description>
				Возвращает режим обновления дорожки значений.
			</description>
		</method>
		<method name="value_track_interpolate" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="time_sec" type="float" />
			<description>
				Возвращает интерполированное значение в заданное время (в секундах). [code]track_idx[/code] должен быть индексом дорожки значений.
			</description>
		</method>
		<method name="value_track_set_update_mode">
			<return type="void" />
			<argument index="0" name="track_idx" type="int" />
			<argument index="1" name="mode" type="int" enum="Animation.UpdateMode" />
			<description>
				Устанавливает режим обновления (см. [enum UpdateMode]) дорожки значений.
			</description>
		</method>
	</methods>
	<members>
		<member name="length" type="float" setter="set_length" getter="get_length" default="1.0">
			Общая длина анимации (в секундах).
			[b]Примечание:[/b] Длина не ограничивается последней клавишей, так как она может быть до или после конца для обеспечения корректной интерполяции и зацикливания.
		</member>
		<member name="loop" type="bool" setter="set_loop" getter="has_loop" default="false">
			Флаг, указывающий на то, что анимация должна зацикливаться. Это используется для корректной интерполяции циклов анимации, а также для подсказки игроку о необходимости перезапуска анимации.
		</member>
		<member name="step" type="float" setter="set_step" getter="get_step" default="0.1">
			Значение шага анимации.
		</member>
	</members>
	<signals>
		<signal name="tracks_changed">
			<description>
				Выдается, когда в списке дорожек происходят изменения, например, дорожки добавляются, перемещаются или меняют путь.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="TYPE_VALUE" value="0" enum="TrackType">
			Value отслеживает установленные значения в свойствах узла, но только те, которые могут быть интерполированы.
		</constant>
		<constant name="TYPE_TRANSFORM" value="1" enum="TrackType">
			Дорожки преобразований используются для изменения локальных преобразований узлов или костей позы скелета. Переходы интерполируются.
		</constant>
		<constant name="TYPE_METHOD" value="2" enum="TrackType">
			Метод отслеживает вызов функций с заданными аргументами для каждого ключа.
		</constant>
		<constant name="TYPE_BEZIER" value="3" enum="TrackType">
			Дорожки Безье используются для интерполяции значений с помощью пользовательских кривых. Они также могут использоваться для анимирования вложенных свойств векторов и цветов (например, альфа-значения [Color]).
		</constant>
		<constant name="TYPE_AUDIO" value="4" enum="TrackType">
			Аудиодорожки используются для воспроизведения аудиопотока с помощью любого типа [AudioStreamPlayer]. Поток может быть обрезан и просмотрен в анимации.
		</constant>
		<constant name="TYPE_ANIMATION" value="5" enum="TrackType">
			Дорожки анимации воспроизводят анимацию в других узлах [AnimationPlayer].
		</constant>
		<constant name="INTERPOLATION_NEAREST" value="0" enum="InterpolationType">
			Интерполяция отсутствует (ближайшее значение).
		</constant>
		<constant name="INTERPOLATION_LINEAR" value="1" enum="InterpolationType">
			Линейная интерполяция.
		</constant>
		<constant name="INTERPOLATION_CUBIC" value="2" enum="InterpolationType">
			Кубическая интерполяция.
		</constant>
		<constant name="UPDATE_CONTINUOUS" value="0" enum="UpdateMode">
			Обновление между ключевыми кадрами.
		</constant>
		<constant name="UPDATE_DISCRETE" value="1" enum="UpdateMode">
			Обновление на ключевых кадрах и удержание значения.
		</constant>
		<constant name="UPDATE_TRIGGER" value="2" enum="UpdateMode">
			Обновление на ключевых кадрах.
		</constant>
		<constant name="UPDATE_CAPTURE" value="3" enum="UpdateMode">
			Аналогично линейной интерполяции, но также интерполируется от текущего значения (т.е. динамически во время выполнения), если первый ключ не находится в 0 секунд.
		</constant>
	</constants>
</class>
