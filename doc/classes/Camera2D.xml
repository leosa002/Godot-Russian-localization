<?xml version="1.0" encoding="UTF-8" ?>
<class name="Camera2D" inherits="Node2D" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Узел камеры для 2D-сцен.
	</brief_description>
	<description>
		Узел камеры для 2D-сцен. Он заставляет экран (текущий слой) прокручиваться вслед за этим узлом. Это позволяет проще (и быстрее) программировать сцены с прокруткой, чем вручную изменять положение узлов [CanvasItem]-базы.
		Этот узел задуман как простой помощник для быстрой работы, но для изменения работы камеры может потребоваться более широкая функциональность. Чтобы создать свой собственный узел камеры, наследуйте его от [Node2D] и измените трансформацию холста, задав [member Viewport.canvas_transform] в [Viewport] (текущий [Viewport] можно получить с помощью [method Node.get_viewport]).
		Обратите внимание, что [code]position[/code] узла [Camera2D] не отражает реальное положение экрана, которое может отличаться из-за примененного сглаживания или ограничений. Для получения реального положения можно использовать [method get_camera_screen_center].
	</description>
	<tutorials>
		<link title="2D Platformer Demo">https://godotengine.org/asset-library/asset/120</link>
		<link title="2D Isometric Demo">https://godotengine.org/asset-library/asset/112</link>
		<link title="2D HDR Demo">https://godotengine.org/asset-library/asset/110</link>
	</tutorials>
	<methods>
		<method name="align">
			<return type="void" />
			<description>
				Выравнивает камеру по отслеживаемому узлу.
			</description>
		</method>
		<method name="clear_current">
			<return type="void" />
			<description>
				Удаляет любую [Camera2D] из внутренней камеры предка [Viewport], назначенной в данный момент.
			</description>
		</method>
		<method name="force_update_scroll">
			<return type="void" />
			<description>
				Заставляет камеру немедленно обновлять прокрутку.
			</description>
		</method>
		<method name="get_camera_position" qualifiers="const">
			<return type="Vector2" />
			<description>
				Возвращает [code]position[/code] камеры (отслеживаемую точку, за которой камера пытается следовать) относительно начала координат.
				[b]Примечание:[/b] Возвращаемое значение не совпадает с [member Node2D.position] или [member Node2D.global_position], поскольку на него влияют свойства [code]drag[/code].
			</description>
		</method>
		<method name="get_camera_screen_center" qualifiers="const">
			<return type="Vector2" />
			<description>
				Возвращает положение центра экрана [Camera2D] относительно начала координат.
				[b]Примечание:[/b] Реальное [code]position[/code] камеры может быть другим, см. [method get_camera_position].
			</description>
		</method>
		<method name="get_drag_margin" qualifiers="const">
			<return type="float" />
			<argument index="0" name="margin" type="int" enum="Margin" />
			<description>
				Возвращает указанное поле. См. также [member drag_margin_bottom], [member drag_margin_top], [member drag_margin_left] и [member drag_margin_right].
			</description>
		</method>
		<method name="get_limit" qualifiers="const">
			<return type="int" />
			<argument index="0" name="margin" type="int" enum="Margin" />
			<description>
				Возвращает указанное ограничение камеры. См. также [member limit_bottom], [member limit_top], [member limit_left] и [member limit_right].
			</description>
		</method>
		<method name="make_current">
			<return type="void" />
			<description>
				Сделайте эту камеру текущей 2D-камерой для сцены (видового экрана и слоя), если в сцене имеется много камер.
			</description>
		</method>
		<method name="reset_smoothing">
			<return type="void" />
			<description>
				Устанавливает положение камеры сразу в текущее место сглаживания.
				Этот метод не действует, если [member smoothing_enabled] имеет значение [code]false[/code].
			</description>
		</method>
		<method name="set_drag_margin">
			<return type="void" />
			<argument index="0" name="margin" type="int" enum="Margin" />
			<argument index="1" name="drag_margin" type="float" />
			<description>
				Устанавливает указанное поле. См. также [member drag_margin_bottom], [member drag_margin_top], [member drag_margin_left] и [member drag_margin_right].
			</description>
		</method>
		<method name="set_limit">
			<return type="void" />
			<argument index="0" name="margin" type="int" enum="Margin" />
			<argument index="1" name="limit" type="int" />
			<description>
				Устанавливает указанное ограничение камеры. См. также [member limit_bottom], [member limit_top], [member limit_left] и [member limit_right].
			</description>
		</method>
	</methods>
	<members>
		<member name="anchor_mode" type="int" setter="set_anchor_mode" getter="get_anchor_mode" enum="Camera2D.AnchorMode" default="1">
			Точка привязки Camera2D. См. константы [enum AnchorMode].
		</member>
		<member name="current" type="bool" setter="_set_current" getter="is_current" default="false">
			Если [code]true[/code], то камера является активной для текущей сцены. Только одна камера может быть текущей, поэтому установка другой камеры [code]current[/code] отключит эту
		</member>
		<member name="custom_viewport" type="Node" setter="set_custom_viewport" getter="get_custom_viewport">
			Пользовательский узел [Viewport], присоединенный к [Camera2D]. Если [code]null[/code] или не является [Viewport], то вместо него используется видовой экран по умолчанию.
		</member>
		<member name="drag_margin_bottom" type="float" setter="set_drag_margin" getter="get_drag_margin" default="0.2">
			Нижнее поле, необходимое для перетаскивания камеры. При значении [code]1[/code] камера перемещается только при достижении края экрана.
		</member>
		<member name="drag_margin_h_enabled" type="bool" setter="set_h_drag_enabled" getter="is_h_drag_enabled" default="false">
			Если [code]true[/code], то камера перемещается только при достижении горизонтальных полей перетаскивания. Если [code]false[/code], то камера перемещается по горизонтали независимо от полей.
		</member>
		<member name="drag_margin_left" type="float" setter="set_drag_margin" getter="get_drag_margin" default="0.2">
			Левое поле, необходимое для перетаскивания камеры. При значении [code]1[/code] камера перемещается только при достижении края экрана.
		</member>
		<member name="drag_margin_right" type="float" setter="set_drag_margin" getter="get_drag_margin" default="0.2">
			Правое поле, необходимое для перетаскивания камеры. Значение [code]1[/code] заставляет камеру перемещаться только при достижении края экрана.
		</member>
		<member name="drag_margin_top" type="float" setter="set_drag_margin" getter="get_drag_margin" default="0.2">
			Верхнее поле, необходимое для перетаскивания камеры. Значение [code]1[/code] заставляет камеру перемещаться только при достижении края экрана.
		</member>
		<member name="drag_margin_v_enabled" type="bool" setter="set_v_drag_enabled" getter="is_v_drag_enabled" default="false">
			Если [code]true[/code], то камера перемещается только при достижении вертикальных полей перетаскивания. Если [code]false[/code], то камера перемещается по вертикали независимо от полей.
		</member>
		<member name="editor_draw_drag_margin" type="bool" setter="set_margin_drawing_enabled" getter="is_margin_drawing_enabled" default="false">
			Если [code]true[/code], то в редакторе рисуется прямоугольник границы перетаскивания камеры.
		</member>
		<member name="editor_draw_limits" type="bool" setter="set_limit_drawing_enabled" getter="is_limit_drawing_enabled" default="false">
			Если [code]true[/code], то в редакторе рисуется прямоугольник границ камеры.
		</member>
		<member name="editor_draw_screen" type="bool" setter="set_screen_drawing_enabled" getter="is_screen_drawing_enabled" default="true">
			Если [code]true[/code], то в редакторе рисуется прямоугольник экрана камеры.
		</member>
		<member name="limit_bottom" type="int" setter="set_limit" getter="get_limit" default="10000000">
			Нижняя граница прокрутки в пикселях. При достижении этого значения камера прекращает движение.
		</member>
		<member name="limit_left" type="int" setter="set_limit" getter="get_limit" default="-10000000">
			Предел прокрутки влево в пикселях. При достижении этого значения камера прекращает движение.
		</member>
		<member name="limit_right" type="int" setter="set_limit" getter="get_limit" default="10000000">
			Предел прокрутки вправо в пикселях. При достижении этого значения камера прекращает движение.
		</member>
		<member name="limit_smoothed" type="bool" setter="set_limit_smoothing_enabled" getter="is_limit_smoothing_enabled" default="false">
			Если [code]true[/code], то камера плавно останавливается при достижении своих границ.
			Это свойство не влияет, если [member smoothing_enabled] имеет значение [code]false[/code].
			[b]Примечание:[/b] Чтобы немедленно обновить положение камеры в пределах без сглаживания, даже если эта настройка включена, вызовите [method reset_smoothing].
		</member>
		<member name="limit_top" type="int" setter="set_limit" getter="get_limit" default="-10000000">
			Верхний предел прокрутки в пикселях. При достижении этого значения камера прекращает движение.
		</member>
		<member name="offset" type="Vector2" setter="set_offset" getter="get_offset" default="Vector2( 0, 0 )">
			Смещение камеры, полезное для осмотра окрестностей или анимации дрожания камеры.
		</member>
		<member name="offset_h" type="float" setter="set_h_offset" getter="get_h_offset" default="0.0">
			Горизонтальное смещение камеры относительно полей перетаскивания.
			[b]Примечание:[/b] Offset H используется только для задания смещения относительно полей. Оно никак не обновляется, если включены поля перетаскивания, и может быть использовано для установки начального смещения.
		</member>
		<member name="offset_v" type="float" setter="set_v_offset" getter="get_v_offset" default="0.0">
			Вертикальное смещение камеры относительно полей перетаскивания.
			[b]Примечание:[/b] Используется так же, как [member offset_h].
		</member>
		<member name="process_mode" type="int" setter="set_process_mode" getter="get_process_mode" enum="Camera2D.Camera2DProcessMode" default="1">
			Обратный вызов процесса камеры. См. раздел [enum Camera2DProcessMode].
		</member>
		<member name="rotating" type="bool" setter="set_rotating" getter="is_rotating" default="false">
			Если [code]true[/code], то вид камеры поворачивается вместе с целью.
		</member>
		<member name="smoothing_enabled" type="bool" setter="set_enable_follow_smoothing" getter="is_follow_smoothing_enabled" default="false">
			Если [code]true[/code], то камера плавно перемещается к цели со скоростью [member smoothing_speed].
		</member>
		<member name="smoothing_speed" type="float" setter="set_follow_smoothing" getter="get_follow_smoothing" default="5.0">
			Скорость в пикселях в секунду эффекта сглаживания камеры, когда [member smoothing_enabled] имеет значение [code]true[/code].
		</member>
		<member name="zoom" type="Vector2" setter="set_zoom" getter="get_zoom" default="Vector2( 1, 1 )">
			Зум камеры относительно области просмотра. Значения, превышающие [code]Vector2(1, 1)[/code], уменьшают масштаб, а меньшие значения - увеличивают. Для примера, используйте [code]Vector2(0.5, 0.5)[/code] для увеличения масштаба в 2 раза и [code]Vector2(4, 4)[/code] для уменьшения масштаба в 4 раза.
		</member>
	</members>
	<constants>
		<constant name="ANCHOR_MODE_FIXED_TOP_LEFT" value="0" enum="AnchorMode">
			Положение камеры фиксируется таким образом, что левый верхний угол всегда находится в начале координат.
		</constant>
		<constant name="ANCHOR_MODE_DRAG_CENTER" value="1" enum="AnchorMode">
			Положение камеры учитывает вертикальные/горизонтальные смещения и размер экрана.
		</constant>
		<constant name="CAMERA2D_PROCESS_PHYSICS" value="0" enum="Camera2DProcessMode">
			Камера обновляется с помощью обратного вызова [code]_physics_process[/code].
		</constant>
		<constant name="CAMERA2D_PROCESS_IDLE" value="1" enum="Camera2DProcessMode">
			Камера обновляется с помощью обратного вызова [code]_process[/code].
		</constant>
	</constants>
</class>
