<?xml version="1.0" encoding="UTF-8" ?>
<class name="Camera" inherits="Spatial" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Узел камеры, отображающий с точки зрения.
	</brief_description>
	<description>
		Камера - это специальный узел, который отображает то, что видно из его текущего местоположения. Камеры регистрируются в ближайшем узле [Viewport] (при подъеме по дереву). В каждом видовом экране может быть активна только одна камера. Если при подъеме по дереву ни один из видовых экранов не доступен, камера регистрируется в глобальном видовом экране. Другими словами, камера лишь обеспечивает возможности 3D-отображения в [Viewport], и без нее сцена, зарегистрированная в этом [Viewport] (или более высоких видовых экранах), не может быть отображена.
	</description>
	<tutorials>
		<link title="Third Person Shooter Demo">https://godotengine.org/asset-library/asset/678</link>
	</tutorials>
	<methods>
		<method name="clear_current">
			<return type="void" />
			<argument index="0" name="enable_next" type="bool" default="true" />
			<description>
				Если это текущая камера, то удалить ее из текущих. Если [code]enable_next[/code] имеет значение [code]true[/code], запросите сделать текущей следующую камеру, если таковая имеется.
			</description>
		</method>
		<method name="get_camera_rid" qualifiers="const">
			<return type="RID" />
			<description>
				Возвращает RID камеры с [VisualServer].
			</description>
		</method>
		<method name="get_camera_transform" qualifiers="const">
			<return type="Transform" />
			<description>
				Возвращает преобразование камеры плюс вертикальное ([member v_offset]) и горизонтальное ([member h_offset]) смещения, а также любые другие поправки, внесенные в положение и ориентацию камеры подклассами, такими как [ClippedCamera], [InterpolatedCamera] и [ARVRCamera].
			</description>
		</method>
		<method name="get_cull_mask_bit" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="layer" type="int" />
			<description>
				Возвращает [code]true[/code], если данный [code]layer[/code] в [member cull_mask] включен, [code]false[/code] - в противном случае.
			</description>
		</method>
		<method name="get_frustum" qualifiers="const">
			<return type="Array" />
			<description>
				Возвращает плоскости фрустума камеры в единицах мирового пространства в виде массива [Plane]s в следующем порядке: ближняя, дальняя, левая, верхняя, правая, нижняя. Не следует путать с [member frustum_offset].
			</description>
		</method>
		<method name="is_position_behind" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="world_point" type="Vector3" />
			<description>
				Возвращает [code]true[/code], если заданная позиция находится за камерой.
				[b]Примечание:[/b] Позиция, возвращающая [code]false[/code], может находиться вне поля зрения камеры.
			</description>
		</method>
		<method name="make_current">
			<return type="void" />
			<description>
				Делает эту камеру текущей для [Viewport] (см. описание класса). Если узел камеры находится вне дерева сцены, то после добавления он попытается стать текущим.
			</description>
		</method>
		<method name="project_local_ray_normal" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="screen_point" type="Vector2" />
			<description>
				Возвращает вектор нормали из точки экрана, направленный вдоль камеры. Ортогональные камеры нормализуются. Перспективные камеры учитывают перспективу, ширину/высоту экрана и т.д.
			</description>
		</method>
		<method name="project_position" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="screen_point" type="Vector2" />
			<argument index="1" name="z_depth" type="float" />
			<description>
				Возвращает 3D-точку в мировом пространстве, соответствующую заданной 2D-координате в прямоугольнике [Viewport] на плоскости, находящейся на заданном [code]z_depth[/code] расстоянии в сцене от камеры.
			</description>
		</method>
		<method name="project_ray_normal" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="screen_point" type="Vector2" />
			<description>
				Возвращает вектор нормали в мировом пространстве, полученный в результате проецирования точки на прямоугольник [Viewport] по обратной проекции камеры. Это полезно для создания лучей в форме (origin, normal) для пересечения или выделения объектов.
			</description>
		</method>
		<method name="project_ray_origin" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="screen_point" type="Vector2" />
			<description>
				Возвращает трехмерную позицию в мировом пространстве, полученную в результате проецирования точки на прямоугольник [Viewport] по обратной проекции камеры. Это удобно для построения лучей в виде (origin, normal) для пересечения или выделения объектов.
			</description>
		</method>
		<method name="set_cull_mask_bit">
			<return type="void" />
			<argument index="0" name="layer" type="int" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Включает или выключает заданный [code]layer[/code] в [member cull_mask].
			</description>
		</method>
		<method name="set_frustum">
			<return type="void" />
			<argument index="0" name="size" type="float" />
			<argument index="1" name="offset" type="Vector2" />
			<argument index="2" name="z_near" type="float" />
			<argument index="3" name="z_far" type="float" />
			<description>
				Устанавливает проекцию камеры в режим frustum (см. [constant PROJECTION_FRUSTUM]), задавая [code]size[/code], [code]offset[/code], а также [code]z_near[/code] и [code]z_far[/code] плоскости клипа в единицах мирового пространства. См. также [member frustum_offset].
			</description>
		</method>
		<method name="set_orthogonal">
			<return type="void" />
			<argument index="0" name="size" type="float" />
			<argument index="1" name="z_near" type="float" />
			<argument index="2" name="z_far" type="float" />
			<description>
				Устанавливает проекцию камеры в ортогональный режим (см. [constant PROJECTION_ORTHOGONAL]), задавая [code]size[/code], а также [code]z_near[/code] и [code]z_far[/code] плоскости клипа в единицах мирового пространства. (В качестве примера можно привести 2D-игры, в которых часто используется такая проекция, а значения указываются в пикселях).
			</description>
		</method>
		<method name="set_perspective">
			<return type="void" />
			<argument index="0" name="fov" type="float" />
			<argument index="1" name="z_near" type="float" />
			<argument index="2" name="z_far" type="float" />
			<description>
				Устанавливает проекцию камеры в режим перспективы (см. [constant PROJECTION_PERSPECTIVE]), задавая угол [code]fov[/code] (поля зрения) в градусах, а также плоскости [code]z_near[/code] и [code]z_far[/code] клипа в единицах мирового пространства.
			</description>
		</method>
		<method name="unproject_position" qualifiers="const">
			<return type="Vector2" />
			<argument index="0" name="world_point" type="Vector3" />
			<description>
				Возвращает 2D-координату в прямоугольнике [Viewport], соответствующую заданной 3D-точке в мировом пространстве.
				[b]Примечание:[/b] При использовании этого метода для позиционирования элементов GUI над 3D-видовым экраном используйте [method is_position_behind], чтобы предотвратить их появление, если 3D-точка находится позади камеры:
				[codeblock]
				# Этот блок кода является частью скрипта, который наследуется от Spatial.
				# `control` - это ссылка на узел, наследующий от Control.
				control.visible = not get_viewport().get_camera().is_position_behind(global_transform.origin)
				control.rect_position = get_viewport().get_camera().unproject_position(global_transform.origin)
				[/codeblock]
			</description>
		</method>
	</methods>
	<members>
			<member name="affect_lod" type="bool" setter="set_affect_lod" getter="get_affect_lod" default="true">
			Если [code]true[/code], то камера будет использоваться для расчета уровня детализации в узлах [LOD].
			Объекты, расположенные дальше от камеры, будут выбирать более низкий уровень детализации, чем объекты, расположенные ближе к камере.
			[b]Примечание:[/b] Это свойство не имеет эффекта, если для [member projection] установлено значение [constant PROJECTION_ORTHOGONAL].
		</member>
		<member name="cull_mask" type="int" setter="set_cull_mask" getter="get_cull_mask" default="1048575">
			Маска отсеивания, описывающая, какие слои 3D-рендеринга будут отрисовываться данной камерой.
		</member>
		<member name="current" type="bool" setter="set_current" getter="is_current" default="false">
			Если [code]true[/code], то предок [Viewport] в данный момент использует эту камеру.
			Если в сцене присутствует несколько камер, то текущей всегда будет считаться одна из них. Например, если в сцене присутствуют два узла [Camera] и только один из них является текущим, то установка [member current] одной камеры в [code]false[/code] приведет к тому, что текущей будет сделана другая камера.
		</member>
		<member name="doppler_tracking" type="int" setter="set_doppler_tracking" getter="get_doppler_tracking" enum="Camera.DopplerTracking" default="0">
			Если не [constant DOPPLER_TRACKING_DISABLED], то эта камера будет имитировать [url=https://en.wikipedia.org/wiki/Doppler_effect]эффект Доплера[/url] для объектов, измененных в определенных методах [code]_process[/code]. Эффект Доплера имитируется только для узлов [AudioStreamPlayer3D], у которых [member AudioStreamPlayer3D.doppler_tracking] установлен в значение, отличное от [constant AudioStreamPlayer3D.DOPPLER_TRACKING_DISABLED].
			[b]Примечание:[/b] Чтобы включить предварительный просмотр эффекта Доплера в редакторе, воспользуйтесь меню Perspective в левом верхнем углу 3D-видового экрана и установите флажок [b]Enable Doppler[/b].
		</member>
		<member name="environment" type="Environment" setter="set_environment" getter="get_environment">
			[Environment], используемое для данной камеры.
		</member>
		<member name="far" type="float" setter="set_zfar" getter="get_zfar" default="100.0">
			Расстояние до дальней границы выбраковки для данной камеры относительно ее локальной оси Z.
		</member>
		<member name="fov" type="float" setter="set_fov" getter="get_fov" default="70.0">
			Угол поля зрения камеры (в градусах). Применяется только в режиме перспективы. Поскольку [member keep_aspect] фиксирует одну ось, [code]fov[/code] задает угол поля зрения по другой оси.
			Для справки, значение поля зрения по вертикали по умолчанию ([code]70.0[/code]) эквивалентно горизонтальному FOV, равному:
			- ~86,07 градуса в окне просмотра 4:3
			- ~96,50 градусов в области просмотра 16:10
			- ~102,45 градусов в окне просмотра 16:9
			- ~117,06 градусов в окне просмотра 21:9
		</member>
		<member name="frustum_offset" type="Vector2" setter="set_frustum_offset" getter="get_frustum_offset" default="Vector2( 0, 0 )">
			Смещение фрустума камеры. Это значение может быть изменено по сравнению со значением по умолчанию для создания эффектов "наклонного фрустума", таких как [url=https://zdoom.org/wiki/Y-shearing]Y-shearing[/url].
			[b]Примечание:[/b] Действует только в том случае, если для параметра [member projection] установлено значение [constant PROJECTION_FRUSTUM].
		</member>
		<member name="h_offset" type="float" setter="set_h_offset" getter="get_h_offset" default="0.0">
			Горизонтальное (X) смещение области просмотра камеры.
		</member>
		<member name="keep_aspect" type="int" setter="set_keep_aspect_mode" getter="get_keep_aspect_mode" enum="Camera.KeepAspect" default="1">
			Ось, которую необходимо фиксировать при настройке [member fov]/[member size]. Может быть либо [constant KEEP_WIDTH], либо [constant KEEP_HEIGHT].
		</member>
		<member name="near" type="float" setter="set_znear" getter="get_znear" default="0.05">
			Расстояние до ближней границы отбраковки для данной камеры относительно ее локальной оси Z.
		</member>
		<member name="projection" type="int" setter="set_projection" getter="get_projection" enum="Camera.Projection" default="0">
			Режим проекции камеры. В режиме [constant PROJECTION_PERSPECTIVE] расстояние объектов по оси Z от локального пространства камеры масштабирует их воспринимаемый размер.
		</member>
		<member name="size" type="float" setter="set_size" getter="get_size" default="1.0">
			Размер камеры в метрах, измеряемый как диаметр по ширине или высоте, в зависимости от [member keep_aspect]. Применяется только в ортогональном и фрустумном режимах.
		</member>
		<member name="v_offset" type="float" setter="set_v_offset" getter="get_v_offset" default="0.0">
			Вертикальное (Y) смещение области просмотра камеры.
		</member>
	</members>
	<constants>
		<constant name="PROJECTION_PERSPECTIVE" value="0" enum="Projection">
			Перспективная проекция. Объекты на экране становятся меньше, когда они находятся на большом расстоянии.
		</constant>
		<constant name="PROJECTION_ORTHOGONAL" value="1" enum="Projection">
			Ортогональная проекция, также известная как ортографическая проекция. Объекты остаются на экране одинакового размера независимо от расстояния до них.
		</constant>
		<constant name="PROJECTION_FRUSTUM" value="2" enum="Projection">
			Проекция фрустума. Этот режим позволяет регулировать [member frustum_offset] для создания эффектов "наклонного фруста".
		</constant>
		<constant name="KEEP_WIDTH" value="0" enum="KeepAspect">
			Сохраняет горизонтальное соотношение сторон; также известен как Vert-масштабирование. Обычно это наилучший вариант для проектов, работающих в портретном режиме, так как более высокие соотношения сторон выигрывают от более широкого вертикального FOV.
		</constant>
		<constant name="KEEP_HEIGHT" value="1" enum="KeepAspect">
			Сохранение вертикального соотношения сторон; также известно как масштабирование Hor+. Обычно это лучший вариант для проектов, работающих в ландшафтном режиме, так как при более широком соотношении сторон автоматически выигрывает более широкий горизонтальный FOV.
		</constant>
		<constant name="DOPPLER_TRACKING_DISABLED" value="0" enum="DopplerTracking">
			Отключает моделирование [url=https://en.wikipedia.org/wiki/Doppler_effect]эффекта Доплера[/url] (по умолчанию).
		</constant>
		<constant name="DOPPLER_TRACKING_IDLE_STEP" value="1" enum="DopplerTracking">
			Имитация [url=https://en.wikipedia.org/wiki/Doppler_effect]эффекта Доплера[/url] путем отслеживания положения объектов, которые изменяются в [code]_process[/code]. Изменение относительной скорости камеры по отношению к этим объектам влияет на восприятие звука (изменяется [member AudioStreamPlayer3D.pitch_scale]).
		</constant>
		<constant name="DOPPLER_TRACKING_PHYSICS_STEP" value="2" enum="DopplerTracking">
			Имитация [url=https://en.wikipedia.org/wiki/Doppler_effect]эффекта Доплера[/url] путем отслеживания положения объектов, которые изменяются в [code]_physics_process[/code]. Изменение относительной скорости камеры по отношению к этим объектам влияет на восприятие звука (изменяя его [member AudioStreamPlayer3D.pitch_scale]).
		</constant>
	</constants>
</class>
