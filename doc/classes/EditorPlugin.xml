<?xml version="1.0" encoding="UTF-8" ?>
<class name="EditorPlugin" inherits="Node" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Используется редактором для расширения его функциональности.
	</brief_description>
	<description>
		Плагины используются редактором для расширения функциональности. Наиболее распространенные типы плагинов - это плагины для редактирования определенного узла или типа ресурса, плагины импорта и плагины экспорта. См. также [EditorScript] для добавления функций в редактор.
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/plugins/editor/index.html</link>
	</tutorials>
	<methods>
		<method name="add_autoload_singleton">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="path" type="String" />
			<description>
				Добавляет скрипт по адресу [code]path[/code] в список автозагрузки как [code]name[/code].
			</description>
		</method>
		<method name="add_control_to_bottom_panel">
			<return type="ToolButton" />
			<argument index="0" name="control" type="Control" />
			<argument index="1" name="title" type="String" />
			<description>
				Добавляет элемент управления на нижнюю панель (вместе с Output, Debug, Animation и т.д.). Возвращает ссылку на добавленную кнопку. Вы сами решаете, как скрывать/показывать кнопку при необходимости. Когда ваш плагин будет деактивирован, не забудьте удалить ваш пользовательский элемент управления с помощью [method remove_control_from_bottom_panel] и освободить его с помощью [method Node.queue_free].
			</description>
		</method>
		<method name="add_control_to_container">
			<return type="void" />
			<argument index="0" name="container" type="int" enum="EditorPlugin.CustomControlContainer" />
			<argument index="1" name="control" type="Control" />
			<description>
				Добавляет пользовательский элемент управления в контейнер (см. [enum CustomControlContainer]). В пользовательском интерфейсе редактора существует множество мест, куда можно добавить пользовательские элементы управления.
				Пожалуйста, помните, что вам придется самостоятельно управлять видимостью ваших пользовательских элементов управления (и, скорее всего, скрывать их после добавления).
				Когда ваш плагин будет деактивирован, не забудьте удалить ваш пользовательский элемент управления с помощью [method remove_control_from_container] и освободить его с помощью [method Node.queue_free].
			</description>
		</method>
		<method name="add_control_to_dock">
			<return type="void" />
			<argument index="0" name="slot" type="int" enum="EditorPlugin.DockSlot" />
			<argument index="1" name="control" type="Control" />
			<description>
				Добавляет элемент управления в определенный слот дока (параметры см. в [enum DockSlot]).
				При изменении положения дока и пока плагин активен, редактор будет сохранять положение дока при последующих сессиях.
				Когда плагин деактивируется, убедитесь, что вы удалили свой пользовательский элемент управления с помощью [method remove_control_from_docks] и освободили его с помощью [method Node.queue_free].
			</description>
		</method>
		<method name="add_custom_type">
			<return type="void" />
			<argument index="0" name="type" type="String" />
			<argument index="1" name="base" type="String" />
			<argument index="2" name="script" type="Script" />
			<argument index="3" name="icon" type="Texture" />
			<description>
				Добавляет пользовательский тип, который будет отображаться в списке узлов или ресурсов. Опционально может быть передана иконка.
				При выборе данного узла или ресурса будет инстанцирован базовый тип (т. е. "Пространственный", "Контрольный", "Ресурсный"), затем будет загружен скрипт и установлен на этот объект.
				Вы можете использовать виртуальный метод [method handles], чтобы проверить, редактируется ли ваш пользовательский объект, проверив скрипт или используя ключевое слово [code]is[/code].
				Во время выполнения это будет простой объект со скриптом, поэтому эту функцию вызывать не нужно.
			</description>
		</method>
		<method name="add_export_plugin">
			<return type="void" />
			<argument index="0" name="plugin" type="EditorExportPlugin" />
			<description>
				Регистрирует новый [EditorExportPlugin]. Плагины экспорта используются для выполнения задач при экспорте проекта.
				Пример регистрации плагина см. в [method add_inspector_plugin].
			</description>
		</method>
		<method name="add_import_plugin">
			<return type="void" />
			<argument index="0" name="importer" type="EditorImportPlugin" />
			<description>
				Регистрирует новый [EditorImportPlugin]. Плагины импорта используются для импорта пользовательских и неподдерживаемых активов в качестве пользовательского типа [Resource].
				[b]Примечание:[/b] Если вы хотите импортировать пользовательские форматы 3D-активов, используйте [method add_scene_import_plugin] вместо этого.
				Пример регистрации плагина см. в разделе [method add_inspector_plugin].
			</description>
		</method>
		<method name="add_inspector_plugin">
			<return type="void" />
			<argument index="0" name="plugin" type="EditorInspectorPlugin" />
			<description>
				Регистрирует новый [EditorInspectorPlugin]. Плагины инспектора используются для расширения [EditorInspector] и предоставления пользовательских инструментов настройки свойств вашего объекта.
				[b]Примечание:[/b] Всегда используйте [метод remove_inspector_plugin] для удаления зарегистрированного [EditorInspectorPlugin], когда ваш [EditorPlugin] отключен, чтобы избежать утечек и неожиданного поведения.
				[codeblock]
				const MyInspectorPlugin = preload("res://addons/your_addon/path/to/your/script.gd")
				var inspector_plugin = MyInspectorPlugin.new()

				func _enter_tree():
				    add_inspector_plugin(inspector_plugin)

				func _exit_tree():
				    remove_inspector_plugin(inspector_plugin)
				[/codeblock]
			</description>
		</method>
		<method name="add_scene_import_plugin">
			<return type="void" />
			<argument index="0" name="scene_importer" type="EditorSceneImporter" />
			<description>
				Регистрирует новый [EditorSceneImporter]. Импортеры сцен используются для импорта пользовательских форматов 3D-активов в качестве сцен.
			</description>
		</method>
		<method name="add_spatial_gizmo_plugin">
			<return type="void" />
			<argument index="0" name="plugin" type="EditorSpatialGizmoPlugin" />
			<description>
				Регистрирует новый [EditorSpatialGizmoPlugin]. Плагины Gizmo используются для добавления пользовательских гизмо в 3D-видоискатель для [Spatial].
			</description>
		</method>
		<method name="add_tool_menu_item">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="handler" type="Object" />
			<argument index="2" name="callback" type="String" />
			<argument index="3" name="ud" type="Variant" default="null" />
			<description>
				Добавляет пользовательский пункт меню в [b]Project &gt; Tools[/b] в качестве [code]name[/code], который вызывает [code]callback[/code] на экземпляре [code]handler[/code] с параметром [code]ud[/code], когда пользователь активирует его.
			</description>
		</method>
		<method name="add_tool_submenu_item">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="submenu" type="Object" />
			<description>
				Добавляет пользовательское подменю в [b]Проект &gt; Инструменты &gt;[/b] [code]name[/code]. [code]submenu[/code] должно быть объектом класса [PopupMenu]. Это подменю должно быть очищено с помощью [code]remove_tool_menu_item(name)[/code].
			</description>
		</method>
		<method name="apply_changes" qualifiers="virtual">
			<return type="void" />
			<description>
				Этот метод вызывается, когда редактор собирается сохранить проект, переключиться на другую вкладку и т. д. Он просит плагин применить все ожидающие изменения состояния, чтобы обеспечить согласованность.
				Это используется, например, в редакторах шейдеров, чтобы сообщить плагину, что он должен применить к объекту код шейдера, написанный пользователем.
			</description>
		</method>
		<method name="build" qualifiers="virtual">
			<return type="bool" />
			<description>
				Этот метод вызывается, когда редактор собирается запустить проект. После этого плагин может выполнить необходимые операции перед запуском проекта.
				Этот метод должен возвращать булево значение. Если метод возвращает [code]false[/code], проект не будет запущен. Запуск будет немедленно прерван, так что это также предотвратит запуск методов [method build] других плагинов.
			</description>
		</method>
		<method name="clear" qualifiers="virtual">
			<return type="void" />
			<description>
				Очистите все состояние и обнулите редактируемый объект. Это гарантирует, что ваш плагин не будет продолжать редактировать уже существующий узел или узел из неправильной сцены.
			</description>
		</method>
		<method name="disable_plugin" qualifiers="virtual">
			<return type="void" />
			<description>
				Вызывается движком, когда пользователь отключает [EditorPlugin] на вкладке Plugin окна настроек проекта.
			</description>
		</method>
		<method name="edit" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<description>
				Эта функция используется для плагинов, которые редактируют определенные типы объектов (узлы или ресурсы). Она запрашивает редактор для редактирования заданного объекта.
			</description>
		</method>
		<method name="enable_plugin" qualifiers="virtual">
			<return type="void" />
			<description>
				Вызывается движком, когда пользователь включает [EditorPlugin] на вкладке Plugin окна настроек проекта.
			</description>
		</method>
		<method name="forward_canvas_draw_over_viewport" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="overlay" type="Control" />
			<description>
				Вызывается движком при обновлении видового экрана 2D-редактора. Для рисования используйте [code]оверлей[/code] [Control]. Вы можете обновить область просмотра вручную, вызвав [метод update_overlays].
				[codeblock]
				func forward_canvas_draw_over_viewport(overlay):
				    # Нарисуйте окружность в позиции курсора.
				    overlay.draw_circle(overlay.get_local_mouse_position(), 64, Color.white)

				func forward_canvas_gui_input(event):
				    if event is InputEventMouseMotion:
				        # Перерисовывает область просмотра при перемещении курсора.
				        update_overlays()
				        return true
				    return false
				[/codeblock]
			</description>
		</method>
		<method name="forward_canvas_force_draw_over_viewport" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="overlay" type="Control" />
			<description>
				Этот метод аналогичен [method forward_canvas_draw_over_viewport], только рисует поверх всего. Полезно, когда вам нужен дополнительный слой, который отображается поверх всего остального.
				Вам нужно разрешить вызов этого метода с помощью [method set_force_draw_over_forwarding_enabled].
			</description>
		</method>
		<method name="forward_canvas_gui_input" qualifiers="virtual">
			<return type="bool" />
			<argument index="0" name="event" type="InputEvent" />
			<description>
				Вызывается, когда в текущей редактируемой сцене есть корневой узел, реализован [method handles] и в 2D-видовом окне происходит [InputEvent]. Перехватывает [InputEvent], если [code]return true[/code], то [EditorPlugin] потребляет [code]событие[/code], в противном случае пересылает [code]событие[/code] другим классам редактора. Пример:
				[codeblock]
				# Предотвращает попадание события InputEvent в другие классы редактора
				func forward_canvas_gui_input(event):
				    var forward = true
				    return forward
				[/codeblock]
				Должен [code]возвращать false[/code], чтобы передать [InputEvent] другим классам редактора. Пример:
				[codeblock]
				# Потребляет InputEventMouseMotion и пересылает другие типы InputEvent
				func forward_canvas_gui_input(event):
				    var forward = false
				    if event is InputEventMouseMotion:
				        forward = true
				    return forward
				[/codeblock]
			</description>
		</method>
		<method name="forward_spatial_draw_over_viewport" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="overlay" type="Control" />
			<description>
				Вызывается движком при обновлении видового экрана 3D-редактора. Для рисования используйте [code]оверлей[/code] [Control]. Вы можете обновить видовой экран вручную, вызвав [method update_overlays].
				[codeblock]
				func forward_spatial_draw_over_viewport(overlay):
				    # Нарисуйте окружность в позиции курсора.
				    overlay.draw_circle(overlay.get_local_mouse_position(), 64)

				func forward_spatial_gui_input(camera, event):
				    if event is InputEventMouseMotion:
				        # Перерисовывает область просмотра при перемещении курсора.
				        update_overlays()
				        return true
				    return false
				[/codeblock]
			</description>
		</method>
		<method name="forward_spatial_force_draw_over_viewport" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="overlay" type="Control" />
			<description>
				Этот метод аналогичен [method forward_spatial_draw_over_viewport], за исключением того, что он рисует поверх всего. Полезно, когда вам нужен дополнительный слой, который отображается поверх всего остального.
				Вам нужно разрешить вызов этого метода с помощью [method set_force_draw_over_forwarding_enabled].
			</description>
		</method>
		<method name="forward_spatial_gui_input" qualifiers="virtual">
			<return type="bool" />
			<argument index="0" name="camera" type="Camera" />
			<argument index="1" name="event" type="InputEvent" />
			<description>
				Вызывается, когда в текущей редактируемой сцене есть корневой узел, реализован [метод handles] и в 3D-видовом экране происходит [InputEvent]. Перехватывает [InputEvent], если [code]return true[/code], то [EditorPlugin] потребляет [code]событие[/code], в противном случае пересылает [code]событие[/code] другим классам редактора. Пример:
				[codeblock]
				# Предотвращает попадание события InputEvent в другие классы редактора
				func forward_spatial_gui_input(camera, event):
				    var forward = true
				    return forward
				[/codeblock]
				Должен [code]возвращать false[/code], чтобы передать [InputEvent] другим классам редактора. Пример:
				[codeblock]
				# Потребляет InputEventMouseMotion и пересылает другие типы InputEvent
				func forward_spatial_gui_input(camera, event):
				    var forward = false
				    if event is InputEventMouseMotion:
				        forward = true
				    return forward
				[/codeblock]
			</description>
		</method>
		<method name="get_breakpoints" qualifiers="virtual">
			<return type="PoolStringArray" />
			<description>
				Это предназначено для редакторов, которые редактируют объекты, основанные на сценариях. Вы можете вернуть список точек останова в формате ([code]script:line[/code]), например: [code]res://path_to_script.gd:25[/code].
			</description>
		</method>
		<method name="get_editor_interface">
			<return type="EditorInterface" />
			<description>
				Возвращает объект [EditorInterface], который дает вам контроль над окном редактора Godot и его функциональными возможностями.
			</description>
		</method>
		<method name="get_plugin_icon" qualifiers="virtual">
			<return type="Texture" />
			<description>
				Переопределите этот метод в своем плагине, чтобы вернуть [Texture] и дать ему иконку.
				Для плагинов на главном экране она отображается в верхней части экрана, справа от кнопок "2D", "3D", "Script" и "AssetLib".
				В идеале иконка плагина должна быть белой с прозрачным фоном и размером 16x16 пикселей.
				[codeblock]
				func get_plugin_icon():
				    # Можно использовать собственный значок:
				    return preload("res://addons/my_plugin/my_plugin_icon.svg")
				    # Или используйте встроенную иконку:
				    return get_editor_interface().get_base_control().get_icon("Node", "EditorIcons")
				[/codeblock]
			</description>
		</method>
		<method name="get_plugin_name" qualifiers="virtual">
			<return type="String" />
			<description>
				Переопределите этот метод в своем плагине, чтобы обеспечить название плагина при отображении в редакторе Godot.
				Для плагинов, отображаемых на главном экране, оно появляется в верхней части экрана, справа от кнопок "2D", "3D", "Script" и "AssetLib".
			</description>
		</method>
		<method name="get_script_create_dialog">
			<return type="ScriptCreateDialog" />
			<description>
				Получает диалог редактора, используемый для создания скриптов.
				[b]Note:[/b] Пользователи могут настроить его перед использованием.
				[b]Warning:[/b] Удаление и освобождение этого узла сделает часть редактора бесполезной и может привести к сбою.
			</description>
		</method>
		<method name="get_state" qualifiers="virtual">
			<return type="Dictionary" />
			<description>
				Переопределите этот метод, чтобы указать данные о состоянии, которые вы хотите сохранить, например положение вида, настройки сетки, сворачивание и т. д. Это используется при сохранении сцены (чтобы состояние сохранялось при ее повторном открытии) и при переключении вкладок (чтобы состояние можно было восстановить при возврате на вкладку). Эти данные автоматически сохраняются для каждой сцены в файле [code]editstate[/code] в папке метаданных редактора. Если вы хотите хранить глобальные (независимые от сцены) данные редактора для вашего плагина, вы можете использовать [метод get_window_layout] вместо этого.
				Для восстановления сохраненного состояния используйте [метод set_state].
				[b]Note:[/b] Этот метод не следует использовать для сохранения важных настроек, которые должны сохраняться вместе с проектом.
				[b]Note:[/b] Для корректного сохранения и восстановления состояния необходимо реализовать [метод get_plugin_name].
				[codeblock]
				func get_state():
				    var state = {"zoom": zoom, "preferred_color": my_color}
				    return state
				[/codeblock]
			</description>
		</method>
		<method name="get_undo_redo">
			<return type="UndoRedo" />
			<description>
				Получает объект отмены/дополнения. Большинство действий в редакторе можно отменить, поэтому используйте этот объект, чтобы убедиться, что это происходит, когда это необходимо.
			</description>
		</method>
		<method name="get_window_layout" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="layout" type="ConfigFile" />
			<description>
				Переопределите этот метод, чтобы предоставить макет GUI плагина или любые другие данные, которые вы хотите сохранить. Он используется для сохранения макета редактора проекта при вызове метода [queue_save_layout] или при изменении макета редактора (например, при изменении положения дока). Данные хранятся в файле [code]editor_layout.cfg[/code] в каталоге метаданных редактора.
				Чтобы восстановить сохраненный макет, используйте [метод set_window_layout].
				[codeblock]
				func get_window_layout(configuration):
				    configuration.set_value("MyPlugin", "window_position", $Window.position)
				    configuration.set_value("MyPlugin", "icon_color", $Icon.modulate)
				[/codeblock]
			</description>
		</method>
		<method name="handles" qualifiers="virtual">
			<return type="bool" />
			<argument index="0" name="object" type="Object" />
			<description>
				Реализуйте эту функцию, если ваш плагин редактирует объект определенного типа (Resource или Node). Если вы вернете [code]true[/code], то у вас будут вызываться функции [method edit] и [method make_visible], когда редактор запросит их. Если вы объявили методы [method forward_canvas_gui_input] и [method forward_spatial_gui_input], они также будут вызваны.
			</description>
		</method>
		<method name="has_main_screen" qualifiers="virtual">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если это плагин редактора главного экрана (он находится в селекторе рабочего пространства вместе с [b]2D[/b], [b]3D[/b], [b]Script[/b] и [b]AssetLib[/b]).
			</description>
		</method>
		<method name="hide_bottom_panel">
			<return type="void" />
			<description>
				Минимизирует нижнюю панель.
			</description>
		</method>
		<method name="make_bottom_panel_item_visible">
			<return type="void" />
			<argument index="0" name="item" type="Control" />
			<description>
				Делает видимым определенный элемент на нижней панели.
			</description>
		</method>
		<method name="make_visible" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="visible" type="bool" />
			<description>
				Эта функция вызывается, когда редактор запрашивается, чтобы стать видимым. Она используется для плагинов, которые редактируют определенный тип объекта.
				Помните, что вам придется управлять видимостью всех элементов управления редактора вручную.
			</description>
		</method>
		<method name="queue_save_layout" qualifiers="const">
			<return type="void" />
			<description>
				Очередь сохранения макета редактора проекта.
			</description>
		</method>
		<method name="remove_autoload_singleton">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<description>
				Удаляет имя [code]автозагрузки[/code] из списка.
			</description>
		</method>
		<method name="remove_control_from_bottom_panel">
			<return type="void" />
			<argument index="0" name="control" type="Control" />
			<description>
				Удаляет элемент управления с нижней панели. Вы должны вручную [метод Node.queue_free] удалить элемент управления.
			</description>
		</method>
		<method name="remove_control_from_container">
			<return type="void" />
			<argument index="0" name="container" type="int" enum="EditorPlugin.CustomControlContainer" />
			<argument index="1" name="control" type="Control" />
			<description>
				Удаляет элемент управления из указанного контейнера. Вы должны вручную [метод Node.queue_free] удалить элемент управления.
			</description>
		</method>
		<method name="remove_control_from_docks">
			<return type="void" />
			<argument index="0" name="control" type="Control" />
			<description>
				Удаляет элемент управления из дока. Вы должны вручную [метод Node.queue_free] удалить элемент управления.
			</description>
		</method>
		<method name="remove_custom_type">
			<return type="void" />
			<argument index="0" name="type" type="String" />
			<description>
				Удаляет пользовательский тип, добавленный в[method add_custom_type].
			</description>
		</method>
		<method name="remove_export_plugin">
			<return type="void" />
			<argument index="0" name="plugin" type="EditorExportPlugin" />
			<description>
				Удаляет экспортный плагин, зарегистрированный [method add_export_plugin].
			</description>
		</method>
		<method name="remove_import_plugin">
			<return type="void" />
			<argument index="0" name="importer" type="EditorImportPlugin" />
			<description>
				Удаляет плагин импорта, зарегистрированный в [method add_import_plugin].
			</description>
		</method>
		<method name="remove_inspector_plugin">
			<return type="void" />
			<argument index="0" name="plugin" type="EditorInspectorPlugin" />
			<description>
				Удаляет плагин инспектора, зарегистрированный [method add_import_plugin]
			</description>
		</method>
		<method name="remove_scene_import_plugin">
			<return type="void" />
			<argument index="0" name="scene_importer" type="EditorSceneImporter" />
			<description>
				Удаляет импортер сцены, зарегистрированный [method add_scene_import_plugin].
			</description>
		</method>
		<method name="remove_spatial_gizmo_plugin">
			<return type="void" />
			<argument index="0" name="plugin" type="EditorSpatialGizmoPlugin" />
			<description>
				Удаляет плагин gizmo, зарегистрированный [method add_spatial_gizmo_plugin].
			</description>
		</method>
		<method name="remove_tool_menu_item">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<description>
				Удаляет меню [code]name[/code] from [b]Project &gt; Tools[/b].
			</description>
		</method>
		<method name="save_external_data" qualifiers="virtual">
			<return type="void" />
			<description>
				Этот метод вызывается после сохранения проекта в редакторе или после его закрытия. Он просит плагин сохранить отредактированные внешние сцены/ресурсы.
			</description>
		</method>
		<method name="set_force_draw_over_forwarding_enabled">
			<return type="void" />
			<description>
				Включает вызов метода [method forward_canvas_force_draw_over_viewport] для 2D-редактора и [method forward_spatial_force_draw_over_viewport] для 3D-редактора при обновлении их видовых экранов. Вам нужно вызвать этот метод только один раз, и он будет работать постоянно для этого плагина.
			</description>
		</method>
		<method name="set_input_event_forwarding_always_enabled">
			<return type="void" />
			<description>
				Используйте этот метод, если вы хотите всегда получать входные данные с экрана 3D-вида внутри [method forward_spatial_gui_input]. Это может быть особенно полезно, если ваш плагин будет использовать raycast в сцене.
			</description>
		</method>
		<method name="set_state" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="state" type="Dictionary" />
			<description>
				Восстанавливает состояние, сохраненное [методом get_state]. Этот метод вызывается при изменении текущей вкладки сцены в редакторе.
				[b]Note:[/b] Ваш плагин должен реализовать [method get_plugin_name], иначе он не будет распознан и этот метод не будет вызван.
				[codeblock]
				func set_state(data):
				    zoom = data.get("zoom", 1.0)
				    preferred_color = data.get("my_color", Color.white)
				[/codeblock]
			</description>
		</method>
		<method name="set_window_layout" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="layout" type="ConfigFile" />
			<description>
				Восстановление макета графического интерфейса плагина и данных, сохраненных в [методе get_window_layout]. Этот метод вызывается для каждого плагина при запуске редактора. Используйте предоставленный файл [code]configuration[/code] для чтения сохраненных данных.
				[codeblock]
				func set_window_layout(configuration):
				    $Window.position = configuration.get_value("MyPlugin", "window_position", Vector2())
				    $Icon.modulate = configuration.get_value("MyPlugin", "icon_color", Color.white)
				[/codeblock]
			</description>
		</method>
		<method name="update_overlays" qualifiers="const">
			<return type="int" />
			<description>
				Обновляет оверлеи видового экрана 2D и 3D редактора. Вызывает методы [method forward_canvas_draw_over_viewport], [method forward_canvas_force_draw_over_viewport], [method forward_spatial_draw_over_viewport] и [method forward_spatial_force_draw_over_viewport].
			</description>
		</method>
	</methods>
	<signals>
		<signal name="main_screen_changed">
			<argument index="0" name="screen_name" type="String" />
			<description>
				Выдается, когда пользователь меняет рабочее пространство ([b]2D[/b], [b]3D[/b], [b]Script[/b], [b]AssetLib[/b]). Также работает с пользовательскими экранами, определяемыми плагинами.
			</description>
		</signal>
		<signal name="resource_saved">
			<argument index="0" name="resource" type="Resource" />
			<description>
			</description>
		</signal>
		<signal name="scene_changed">
			<argument index="0" name="scene_root" type="Node" />
			<description>
				Выдается при изменении сцены в редакторе. Аргумент возвращает корневой узел сцены, которая только что стала активной. Если сцена новая и пустая, аргумент будет [code]null[/code].
			</description>
		</signal>
		<signal name="scene_closed">
			<argument index="0" name="filepath" type="String" />
			<description>
				Выдается, когда пользователь закрывает сцену. Аргументом является путь к файлу закрытой сцены.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="CONTAINER_TOOLBAR" value="0" enum="CustomControlContainer">
		</constant>
		<constant name="CONTAINER_SPATIAL_EDITOR_MENU" value="1" enum="CustomControlContainer">
		</constant>
		<constant name="CONTAINER_SPATIAL_EDITOR_SIDE_LEFT" value="2" enum="CustomControlContainer">
		</constant>
		<constant name="CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT" value="3" enum="CustomControlContainer">
		</constant>
		<constant name="CONTAINER_SPATIAL_EDITOR_BOTTOM" value="4" enum="CustomControlContainer">
		</constant>
		<constant name="CONTAINER_CANVAS_EDITOR_MENU" value="5" enum="CustomControlContainer">
		</constant>
		<constant name="CONTAINER_CANVAS_EDITOR_SIDE_LEFT" value="6" enum="CustomControlContainer">
		</constant>
		<constant name="CONTAINER_CANVAS_EDITOR_SIDE_RIGHT" value="7" enum="CustomControlContainer">
		</constant>
		<constant name="CONTAINER_CANVAS_EDITOR_BOTTOM" value="8" enum="CustomControlContainer">
		</constant>
		<constant name="CONTAINER_PROPERTY_EDITOR_BOTTOM" value="9" enum="CustomControlContainer">
		</constant>
		<constant name="CONTAINER_PROJECT_SETTING_TAB_LEFT" value="10" enum="CustomControlContainer">
		</constant>
		<constant name="CONTAINER_PROJECT_SETTING_TAB_RIGHT" value="11" enum="CustomControlContainer">
		</constant>
		<constant name="DOCK_SLOT_LEFT_UL" value="0" enum="DockSlot">
		</constant>
		<constant name="DOCK_SLOT_LEFT_BL" value="1" enum="DockSlot">
		</constant>
		<constant name="DOCK_SLOT_LEFT_UR" value="2" enum="DockSlot">
		</constant>
		<constant name="DOCK_SLOT_LEFT_BR" value="3" enum="DockSlot">
		</constant>
		<constant name="DOCK_SLOT_RIGHT_UL" value="4" enum="DockSlot">
		</constant>
		<constant name="DOCK_SLOT_RIGHT_BL" value="5" enum="DockSlot">
		</constant>
		<constant name="DOCK_SLOT_RIGHT_UR" value="6" enum="DockSlot">
		</constant>
		<constant name="DOCK_SLOT_RIGHT_BR" value="7" enum="DockSlot">
		</constant>
		<constant name="DOCK_SLOT_MAX" value="8" enum="DockSlot">
			Представляет размер перечисления [enum DockSlot].
		</constant>
	</constants>
</class>
