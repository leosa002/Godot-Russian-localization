<?xml version="1.0" encoding="UTF-8" ?>
<class name="RigidBody" inherits="PhysicsBody" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Физическое тело, положение которого определяется с помощью физического моделирования в 3D-пространстве.
	</brief_description>
	<description>
		Это узел, который реализует полную 3D-физику. Это означает, что вы не управляете RigidBody напрямую. Вместо этого вы можете прикладывать к нему силы (гравитацию, импульсы и т. д.), а физическая симуляция будет рассчитывать результирующее движение, столкновение, отскок, вращение и т. д.

		У RigidBody есть 4 режима поведения [member mode]: Rigid, Static, Character и Kinematic.

		[b]Примечание:[/b] Не меняйте положение RigidBody каждый кадр или очень часто. Спорадические изменения работают хорошо, но физика работает на другой гранулярности (фиксированная частота), чем обычный рендеринг (обратный вызов процесса), и, возможно, даже в отдельном потоке, поэтому изменение этого параметра из цикла процесса может привести к странному поведению. Если вам нужно напрямую влиять на состояние тела, используйте [метод _integrate_forces], который позволяет напрямую обращаться к состоянию физики.

		Если вам нужно переопределить поведение физики по умолчанию, вы можете написать собственную функцию интегрирования сил. Смотрите [member custom_integrator].

		В физике Bullet (по умолчанию) центром масс является центр RigidBody3D. В GodotPhysics центром масс является среднее значение центров [CollisionShape].

		[b]Предупреждение:[/b] При неравномерном масштабе этот узел, вероятно, будет работать не так, как ожидалось. Пожалуйста, убедитесь, что его масштаб равномерен (т.е. одинаков по всем осям), и вместо этого измените размер (размеры) его формы (форм) столкновения.
	</description>
	<tutorials>
		<link title="Physics introduction">$DOCS_URL/tutorials/physics/physics_introduction.html</link>
		<link title="3D Truck Town Demo">https://godotengine.org/asset-library/asset/524</link>
		<link title="3D Physics Tests Demo">https://godotengine.org/asset-library/asset/675</link>
	</tutorials>
	<methods>
		<method name="_integrate_forces" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="state" type="PhysicsDirectBodyState" />
			<description>
				Вызывается во время обработки физики, позволяя вам читать и безопасно изменять состояние моделирования для объекта. По умолчанию он работает в дополнение к обычному поведению физики, но свойство [member custom_integrator] позволяет отключить поведение по умолчанию и сделать полностью пользовательскую интеграцию силы для тела.
			</description>
		</method>
		<method name="add_central_force">
			<return type="void" />
			<argument index="0" name="force" type="Vector3" />
			<description>
				Добавляет постоянную направленную силу (т.е. ускорение), не влияя на вращение.
				Это эквивалентно [code]add_force(force, Vector3(0,0,0))[/code].
			</description>
		</method>
		<method name="add_force">
			<return type="void" />
			<argument index="0" name="force" type="Vector3" />
			<argument index="1" name="position" type="Vector3" />
			<description>
				Добавляет постоянную направленную силу (т. е. ускорение).
				Позиция использует вращение глобальной системы координат, но центрируется в начале координат объекта.
			</description>
		</method>
		<method name="add_torque">
			<return type="void" />
			<argument index="0" name="torque" type="Vector3" />
			<description>
				Добавляет постоянную вращательную силу (например, мотор), не влияя на положение.
			</description>
		</method>
		<method name="apply_central_impulse">
			<return type="void" />
			<argument index="0" name="impulse" type="Vector3" />
			<description>
				Применяет направленный импульс, не влияя на вращение.
				Это эквивалентно [code]apply_impulse(Vector3(0,0,0), impulse)[/code].
			</description>
		</method>
		<method name="apply_impulse">
			<return type="void" />
			<argument index="0" name="position" type="Vector3" />
			<argument index="1" name="impulse" type="Vector3" />
			<description>
				Применяет позиционированный импульс к телу. Импульс не зависит от времени! Применение импульса каждый кадр приведет к возникновению силы, зависящей от кадра. По этой причине его следует использовать только при моделировании однократных ударов. Позиция использует вращение глобальной системы координат, но центрируется в начале координат объекта.
			</description>
		</method>
		<method name="apply_torque_impulse">
			<return type="void" />
			<argument index="0" name="impulse" type="Vector3" />
			<description>
				Применяет импульс крутящего момента, на который влияет масса и форма тела. Это повернет тело вокруг вектора [code]импульса[/code].
			</description>
		</method>
		<method name="get_axis_lock" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="axis" type="int" enum="PhysicsServer.BodyAxis" />
			<description>
				Возвращает [code]true[/code], если указанная линейная или вращательная ось заблокирована.
			</description>
		</method>
		<method name="get_colliding_bodies" qualifiers="const">
			<return type="Array" />
			<description>
				Возвращает список тел, столкнувшихся с данным телом. Требуется, чтобы [member contact_monitor] был установлен в [code]true[/code] и [member contacts_reported] был установлен достаточно высоко, чтобы обнаружить все столкновения.
				[b]Примечание:[/b] Результат этого теста не будет немедленным после перемещения объектов. Для повышения производительности список столкновений обновляется один раз за кадр и перед шагом физики. Рассмотрите возможность использования сигналов вместо этого.
			</description>
		</method>
		<method name="get_inverse_inertia_tensor">
			<return type="Basis" />
			<description>
				Возвращает обратный базис тензора инерции. Это используется для расчета углового ускорения, возникающего в результате крутящего момента, приложенного к RigidBody.
			</description>
		</method>
		<method name="set_axis_lock">
			<return type="void" />
			<argument index="0" name="axis" type="int" enum="PhysicsServer.BodyAxis" />
			<argument index="1" name="lock" type="bool" />
			<description>
				Фиксирует указанную линейную или вращательную ось.
			</description>
		</method>
		<method name="set_axis_velocity">
			<return type="void" />
			<argument index="0" name="axis_velocity" type="Vector3" />
			<description>
				Устанавливает скорость по оси. Скорость по заданной оси вектора будет установлена как заданная длина вектора. Это полезно для поведения при прыжках.
			</description>
		</method>
	</methods>
	<members>
		<member name="angular_damp" type="float" setter="set_angular_damp" getter="get_angular_damp" default="-1.0">
			Гасит вращательные силы тела. Если это значение отлично от -1.0, оно будет добавлено к любой угловой демпфирующей силе, полученной из мира или областей.
			Дополнительные сведения о демпфировании см. в [member ProjectSettings.physics/3d/default_angular_damp].
		</member>
		<member name="angular_velocity" type="Vector3" setter="set_angular_velocity" getter="get_angular_velocity" default="Vector3( 0, 0, 0 )">
			Скорость вращения тела в формате ось-угол. Величина вектора - это скорость вращения в [i]радианах[/i] в секунду.
		</member>
		<member name="axis_lock_angular_x" type="bool" setter="set_axis_lock" getter="get_axis_lock" default="false">
			Зафиксируйте вращение тела по оси X.
		</member>
		<member name="axis_lock_angular_y" type="bool" setter="set_axis_lock" getter="get_axis_lock" default="false">
			Заблокируйте вращение тела по оси Y.
		</member>
		<member name="axis_lock_angular_z" type="bool" setter="set_axis_lock" getter="get_axis_lock" default="false">
			Заблокируйте вращение тела по оси Z.
		</member>
		<member name="axis_lock_linear_x" type="bool" setter="set_axis_lock" getter="get_axis_lock" default="false">
			Зафиксируйте движение тела по оси X.
		</member>
		<member name="axis_lock_linear_y" type="bool" setter="set_axis_lock" getter="get_axis_lock" default="false">
			Зафиксируйте движение тела по оси Y.
		</member>
		<member name="axis_lock_linear_z" type="bool" setter="set_axis_lock" getter="get_axis_lock" default="false">
			Зафиксируйте движение тела по оси Z.
		</member>
		<member name="bounce" type="float" setter="set_bounce" getter="get_bounce">
			Подпрыгиваемость тела. Значения варьируются от [code]0[/code] (отсутствие отскока) до [code]1[/code] (полный отскок).
			Утратило силу, вместо него используйте [member PhysicsMaterial.bounce] через [member physics_material_override].
		</member>
		<member name="can_sleep" type="bool" setter="set_can_sleep" getter="is_able_to_sleep" default="true">
			Если [code]true[/code], тело может перейти в режим сна, когда нет движения. См. раздел [member sleeping].
			[b]Примечание:[/b] RigidBody3D никогда не перейдет в спящий режим автоматически, если его [member mode] - [constant MODE_CHARACTER]. Его можно перевести в спящий режим вручную, установив свойство [member sleeping] в [code]true[/code].
		</member>
		<member name="contact_monitor" type="bool" setter="set_contact_monitor" getter="is_contact_monitor_enabled" default="false">
			Если [code]true[/code], то RigidBody будет издавать сигналы при столкновении с другим RigidBody. См. также [member contacts_reported].
		</member>
		<member name="contacts_reported" type="int" setter="set_max_contacts_reported" getter="get_max_contacts_reported" default="0">
			Максимальное количество контактов, которые будут записаны. Требуется, чтобы для параметра [member contact_monitor] было установлено значение [code]true[/code].

			[b]Примечание:[/b] Количество контактов отличается от количества столкновений. Столкновения между параллельными ребрами приведут к двум контактам (по одному на каждом конце), а столкновения между параллельными гранями - к четырем контактам (по одному на каждом углу).
		</member>
		<member name="continuous_cd" type="bool" setter="set_use_continuous_collision_detection" getter="is_using_continuous_collision_detection" default="false">
			Если [code]true[/code], используется непрерывное обнаружение столкновений.

			Непрерывное обнаружение столкновений пытается предсказать, где движущееся тело столкнется, вместо того чтобы перемещать его и корректировать его движение при столкновении. Непрерывное обнаружение столкновений является более точным и пропускает меньше столкновений с небольшими, быстро движущимися объектами. Неиспользование непрерывного обнаружения столкновений быстрее вычисляется, но может пропустить столкновение с небольшими быстродвижущимися объектами.
		</member>
		<member name="custom_integrator" type="bool" setter="set_use_custom_integrator" getter="is_using_custom_integrator" default="false">
			Если [code]true[/code], интеграция внутренних сил (например, гравитации или трения воздуха) для этого тела будет отключена. Кроме реакции на столкновение, тело будет двигаться только так, как определено функцией [method _integrate_forces], если она определена.
		</member>
		<member name="friction" type="float" setter="set_friction" getter="get_friction">
			Трение тела, от 0 (без трения) до 1 (максимальное трение).
			Утратил силу, вместо него используйте [member PhysicsMaterial.friction] через [member physics_material_override].
		</member>
		<member name="gravity_scale" type="float" setter="set_gravity_scale" getter="get_gravity_scale" default="1.0">
			Это значение умножается на глобальную настройку 3D-гравитации, найденную в [b]Project &gt; Project Settings &gt; Physics &gt; 3d[/b], чтобы получить гравитацию RigidBody. Например, значение 1 будет нормальной гравитацией, 2 - двойной гравитацией, а 0,5 - половинной гравитацией для данного объекта.
		</member>
		<member name="linear_damp" type="float" setter="set_linear_damp" getter="get_linear_damp" default="-1.0">
			Линейная влажность тела. Не может быть меньше -1.0. Если это значение отлично от -1.0, оно будет добавлено к любой линейной влажности, полученной из мира или областей.

			Дополнительные сведения о демпфировании см. в [member ProjectSettings.physics/3d/default_linear_damp].
		</member>
		<member name="linear_velocity" type="Vector3" setter="set_linear_velocity" getter="get_linear_velocity" default="Vector3( 0, 0, 0 )">
			Линейная скорость тела в единицах в секунду. Может использоваться спорадически, но [b]не устанавливайте это значение каждый кадр[/b], потому что физика может выполняться в другом потоке и работать на другой гранулярности. Используйте [метод _integrate_forces] в качестве цикла процесса для точного контроля состояния тела.
		</member>
		<member name="mass" type="float" setter="set_mass" getter="get_mass" default="1.0">
			Масса тела.
		</member>
		<member name="mode" type="int" setter="set_mode" getter="get_mode" enum="RigidBody.Mode" default="0">
			Режим тела. Возможные значения см. в [enum Mode].
		</member>
		<member name="physics_material_override" type="PhysicsMaterial" setter="set_physics_material_override" getter="get_physics_material_override">
			Переопределение материала физики для тела.
			Если этому свойству присвоен материал, то он будет использоваться вместо любого другого физического материала, например, унаследованного.
		</member>
		<member name="sleeping" type="bool" setter="set_sleeping" getter="is_sleeping" default="false">
			Если [code]true[/code], тело не будет двигаться и рассчитывать силы, пока его не разбудит другое тело, например, в результате столкновения или с помощью методов [method apply_impulse] или [method add_force].
		</member>
		<member name="weight" type="float" setter="set_weight" getter="get_weight" default="9.8">
			Вес тела, основанный на его массе и глобальной 3D-гравитации. Глобальные значения задаются в разделе [b]Проект &gt; Настройки проекта &gt; Физика &gt; 3d[/b].
		</member>
	</members>
	<signals>
		<signal name="body_entered">
			<argument index="0" name="body" type="Node" />
			<description>
				Выдается при столкновении с другим [PhysicsBody] или [GridMap]. Требуется, чтобы [member contact_monitor] был установлен в [code]true[/code], а [member contacts_reported] был установлен достаточно высоко, чтобы обнаружить все столкновения. [GridMap]ы обнаруживаются, если в [MeshLibrary] есть [Shape]ы столкновений.

				[code]body[/code] узел [Node], если он существует в дереве, другого [PhysicsBody] или [GridMap].
			</description>
		</signal>
		<signal name="body_exited">
			<argument index="0" name="body" type="Node" />
			<description>
				Выдается, когда заканчивается столкновение с другим [PhysicsBody] или [GridMap]. Требуется, чтобы [member contact_monitor] был установлен в [code]true[/code], а [member contacts_reported] был достаточно высоким, чтобы обнаружить все столкновения. [GridMap]ы обнаруживаются, если в [MeshLibrary] есть [Shape]ы столкновений.

				[code]body[/code] узел [Node], если он существует в дереве, другого [PhysicsBody] или [GridMap].
			</description>
		</signal>
		<signal name="body_shape_entered">
			<argument index="0" name="body_rid" type="RID" />
			<argument index="1" name="body" type="Node" />
			<argument index="2" name="body_shape_index" type="int" />
			<argument index="3" name="local_shape_index" type="int" />
			<description>
				Выдается, когда одно из [Shape]ов этого RigidBody сталкивается с другим [PhysicsBody] или [GridMap] [Shape]ом. Требуется, чтобы [member contact_monitor] был установлен в [code]true[/code], а [member contacts_reported] был установлен достаточно высоко, чтобы обнаружить все столкновения. [GridMap]ы обнаруживаются, если в [MeshLibrary] есть [Shape]ы столкновений.
				[code]body_rid[/code] [RID] другого [PhysicsBody] или [MeshLibrary]'s [CollisionObject], используемого [PhysicsServer].
				[code]body[/code] узел [Node], если он существует в дереве, другого [PhysicsBody] или [GridMap].
				[code]body_shape_index[/code] индекс [Shape] другого [PhysicsBody] или [GridMap], используемого [PhysicsServer]. Получите узел [CollisionShape] с помощью [code]body.shape_owner_get_owner(body_shape_index)[/code].
				[code]local_shape_index[/code] индекс [Shape] этого RigidBody, используемый [PhysicsServer]. Получите узел [CollisionShape] с помощью [code]self.shape_owner_get_owner(local_shape_index)[/code].
				[b]Примечание:[/b] Физика пули не может определить индекс формы при использовании [ConcavePolygonShape]. Не используйте несколько [CollisionShape] при использовании [ConcavePolygonShape] с физикой Bullet, если вам нужны индексы формы.
			</description>
		</signal>
		<signal name="body_shape_exited">
			<argument index="0" name="body_rid" type="RID" />
			<argument index="1" name="body" type="Node" />
			<argument index="2" name="body_shape_index" type="int" />
			<argument index="3" name="local_shape_index" type="int" />
			<description>
				Испускается, когда заканчивается столкновение между одним из [Shape] этого RigidBody и другим [PhysicsBody] или [Shape] [GridMap]. Требуется, чтобы [member contact_monitor] был установлен в [code]true[/code], а [member contacts_reported] был установлен достаточно высоко, чтобы обнаружить все столкновения. [GridMap]ы обнаруживаются, если в [MeshLibrary] есть [Shape]ы столкновений.
				[code]body_rid[/code] [RID] другого [PhysicsBody] или [MeshLibrary]-объекта [CollisionObject], используемого [PhysicsServer]. Карты [GridMap] определяются, если у мешей есть [Shape]s.
				[code]body[/code] узел [Node], если он существует в дереве, другого [PhysicsBody] или [GridMap].
				[code]body_shape_index[/code] индекс [Shape] другого [PhysicsBody] или [GridMap], используемого [PhysicsServer]. Получите узел [CollisionShape] с помощью [code]body.shape_owner_get_owner(body_shape_index)[/code].
				[code]local_shape_index[/code] индекс [Shape] этого RigidBody, используемый [PhysicsServer]. Получите узел [CollisionShape] с помощью [code]self.shape_owner_get_owner(local_shape_index)[/code].
				[b]Примечание:[/b] Физика пули не может определить индекс формы при использовании [ConcavePolygonShape]. Не используйте несколько [CollisionShape] при использовании [ConcavePolygonShape] с физикой Bullet, если вам нужны индексы формы.
			</description>
		</signal>
		<signal name="sleeping_state_changed">
			<description>
				Выдается, когда физический движок изменяет состояние сна тела.
				[b]Примечание:[/b] Изменение значения [member sleeping] не вызовет этот сигнал. Он подается только в том случае, если физический движок изменяет состояние сна или используется [code]emit_signal("sleeping_state_changed")[/code].
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="MODE_RIGID" value="0" enum="Mode">
			Режим жесткого тела. Это "естественное" состояние жесткого тела. На него действуют силы, оно может двигаться, вращаться и подвергаться воздействию пользовательского кода.
		</constant>
		<constant name="MODE_STATIC" value="1" enum="Mode">
			Статический режим. Тело ведет себя как [StaticBody] и может двигаться только по коду пользователя.
		</constant>
		<constant name="MODE_CHARACTER" value="2" enum="Mode">
			Режим тела персонажа. Он ведет себя как жесткое тело, но не может вращаться.
		</constant>
		<constant name="MODE_KINEMATIC" value="3" enum="Mode">
			Кинематический режим тела. Тело ведет себя как [KinematicBody] и может перемещаться только с помощью пользовательского кода.
		</constant>
	</constants>
</class>
