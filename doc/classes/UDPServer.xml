<?xml version="1.0" encoding="UTF-8" ?>
<class name="UDPServer" inherits="Reference" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Класс-помощник для реализации UDP-сервера.
	</brief_description>
	<description>
		Простой сервер, который открывает UDP-сокет и возвращает подключенный [PacketPeerUDP] при получении новых пакетов. См. также [метод PacketPeerUDP.connect_to_host].
		После запуска сервера ([method listen]) вам нужно будет [method poll] его через регулярные промежутки времени (например, внутри [method Node._process]), чтобы он обрабатывал новые пакеты, доставляя их в соответствующие [PacketPeerUDP], и принимал новые соединения.
		Ниже приведен небольшой пример того, как это можно использовать:
		[codeblock]
		# server.gd
		extends Node

		var server := UDPServer.new()
		var peers = []

		func _ready():
		    server.listen(4242)

		func _process(delta):
		    server.poll() # Важно!
		    if server.is_connection_available():
		        var peer : PacketPeerUDP = server.take_connection()
		        var pkt = peer.get_packet()
		        print("Accepted peer: %s:%s" % [peer.get_packet_ip(), peer.get_packet_port()])
		        print("Received data: %s" % [pkt.get_string_from_utf8()])
		        # Ответьте, чтобы он знал, что мы получили сообщение.
		        peer.put_packet(pkt)
		        # Сохраните ссылку, чтобы мы могли продолжать связываться с удаленным аналогом.
		        peers.append(peer)

		    for i in range(0, peers.size()):
		        pass # Сделайте что-нибудь с подключенными сверстниками(пирами).

		[/codeblock]
		[codeblock]
		# client.gd
		extends Node

		var udp := PacketPeerUDP.new()
		var connected = false

		func _ready():
		    udp.connect_to_host("127.0.0.1", 4242)

		func _process(delta):
		    if !connected:
		        # Попробуйте связаться с сервером
		        udp.put_packet("The answer is... 42!".to_utf8())
		    if udp.get_available_packet_count() &gt; 0:
		        print("Connected: %s" % udp.get_packet().get_string_from_utf8())
		        connected = true
		[/codeblock]
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="is_connection_available" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если на сокет был получен пакет с новой комбинацией адрес/порт.
			</description>
		</method>
		<method name="is_listening" qualifiers="const">
			<return type="bool" />
			<description>
				Возвращает [code]true[/code], если сокет открыт и прослушивает порт.
			</description>
		</method>
		<method name="listen">
			<return type="int" enum="Error" />
			<argument index="0" name="port" type="int" />
			<argument index="1" name="bind_address" type="String" default="&quot;*&quot;" />
			<description>
				Запускает сервер, открывая UDP-сокет, прослушивающий указанный порт. Вы можете дополнительно указать [code]bind_address[/code], чтобы прослушивать только пакеты, отправленные на этот адрес. См. также [method PacketPeerUDP.listen].
			</description>
		</method>
		<method name="poll">
			<return type="int" enum="Error" />
			<description>
				Вызывайте этот метод через регулярные промежутки времени (например, внутри [method Node._process]) для обработки новых пакетов. При этом пакет от известной пары адрес/порт будет доставлен на соответствующий [PacketPeerUDP], любой пакет, полученный от неизвестной пары адрес/порт, будет добавлен как ожидающее соединение (см. [method is_connection_available], [method take_connection]). Максимальное количество ожидающих соединений определяется через [member max_pending_connections].
			</description>
		</method>
		<method name="stop">
			<return type="void" />
			<description>
				Останавливает работу сервера, закрывая UDP-сокет, если он открыт. Закрывает все подключенные [PacketPeerUDP], принятые через [метод take_connection] (удаленные пиры не будут уведомлены).
			</description>
		</method>
		<method name="take_connection">
			<return type="PacketPeerUDP" />
			<description>
				Возвращает первое ожидающее соединение (подключенное к соответствующему адресу/порту). Возвращает [code]null[/code], если новое соединение недоступно. См. также [method is_connection_available], [method PacketPeerUDP.connect_to_host].
			</description>
		</method>
	</methods>
	<members>
		<member name="max_pending_connections" type="int" setter="set_max_pending_connections" getter="get_max_pending_connections" default="16">
			Определите максимальное количество ожидающих соединений, во время [опроса метода] любое новое ожидающее соединение, превышающее это значение, будет автоматически отброшено. Установка этого значения в [code]0[/code] эффективно предотвращает принятие любого нового ожидающего соединения (например, когда все игроки подключились).
		</member>
	</members>
	<constants>
	</constants>
</class>
