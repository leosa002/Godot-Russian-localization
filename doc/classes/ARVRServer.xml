<?xml version="1.0" encoding="UTF-8" ?>
<class name="ARVRServer" inherits="Object" version="3.5" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Сервер для функций AR и VR.
	</brief_description>
	<description>
		Сервер AR/VR является сердцем нашего решения для расширенной и виртуальной реальности и выполняет всю обработку данных.
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/vr/index.html</link>
	</tutorials>
	<methods>
		<method name="add_interface">
			<return type="void" />
			<argument index="0" name="interface" type="ARVRInterface" />
			<description>
				Регистрирует объект [ARVRInterface].
			</description>
		</method>
		<method name="add_tracker">
			<return type="void" />
			<argument index="0" name="tracker" type="ARVRPositionalTracker" />
			<description>
				Регистрирует новый [ARVRPositionalTracker], отслеживающий пространственное положение в реальном пространстве.
			</description>
		</method>
		<method name="center_on_hmd">
			<return type="void" />
			<argument index="0" name="rotation_mode" type="int" enum="ARVRServer.RotationMode" />
			<argument index="1" name="keep_height" type="bool" />
			<description>
				Это очень важная функция, которую необходимо правильно понимать. Все платформы AR и VR по-разному обрабатывают позиционирование.
				Для платформ, не предлагающих пространственное отслеживание, наша точка начала координат (0,0,0) - это местоположение нашей HMD, но вы практически не контролируете направление, в котором игрок находится в реальном мире.
				Для платформ, предлагающих пространственное отслеживание, точка отсчета очень сильно зависит от системы. Для OpenVR точка отсчета обычно находится в центре пространства отслеживания, на земле. Для других платформ это часто местоположение камеры слежения.
				Данный метод позволяет центрировать трекер по местоположению HMD. Он принимает текущее положение HMD и использует его для корректировки всех данных отслеживания; по сути, реальный мир подстраивается под текущее положение игрока в игровом мире.
				Для того чтобы этот метод дал приемлемые результаты, необходимо, чтобы информация об отслеживании была доступна. Для этого часто требуется несколько кадров после запуска игры.
				Вызывать этот метод следует по истечении нескольких секунд. Например, когда пользователь запрашивает изменение положения дисплея, удерживая определенную кнопку на контроллере в течение короткого промежутка времени, или при реализации механизма телепортации.
			</description>
		</method>
		<method name="clear_primary_interface_if">
			<return type="void" />
			<argument index="0" name="interface" type="ARVRInterface" />
			<description>
				Очищает наш текущий основной интерфейс, если он установлен на предоставленный интерфейс.
			</description>
		</method>
		<method name="find_interface" qualifiers="const">
			<return type="ARVRInterface" />
			<argument index="0" name="name" type="String" />
			<description>
				Находит интерфейс по его имени. Например, если ваш проект использует возможности AR/VR-платформы, вы можете найти интерфейс для этой платформы по ее имени и инициализировать его.
			</description>
		</method>
		<method name="get_hmd_transform">
			<return type="Transform" />
			<description>
				Возвращает преобразование первичного интерфейса.
			</description>
		</method>
		<method name="get_interface" qualifiers="const">
			<return type="ARVRInterface" />
			<argument index="0" name="idx" type="int" />
			<description>
				Возвращает интерфейс, зарегистрированный по заданному индексу в нашем списке интерфейсов.
			</description>
		</method>
		<method name="get_interface_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество интерфейсов, зарегистрированных в настоящее время на AR/VR-сервере. Если ваш проект поддерживает несколько AR/VR-платформ, вы можете просмотреть все доступные интерфейсы и либо предложить пользователю выбор, либо просто попытаться инициализировать каждый интерфейс и использовать первый, который вернет [code]true[/code].
			</description>
		</method>
		<method name="get_interfaces" qualifiers="const">
			<return type="Array" />
			<description>
				Возвращает список доступных интерфейсов с указанием идентификатора и имени каждого интерфейса.
			</description>
		</method>
		<method name="get_last_commit_usec">
			<return type="int" />
			<description>
				Возвращает абсолютную временную метку (в мкс) последней фиксации [ARVRServer] глаз AR/VR на [VisualServer]. Значение получается из внутреннего вызова [method OS.get_ticks_usec].
			</description>
		</method>
		<method name="get_last_frame_usec">
			<return type="int" />
			<description>
				Возвращает длительность (в мкс) последнего кадра. Она вычисляется как разность между [method get_last_commit_usec] и [method get_last_process_usec] при фиксации.
			</description>
		</method>
		<method name="get_last_process_usec">
			<return type="int" />
			<description>
				Возвращает абсолютную временную метку (в мкс) последнего обратного вызова процесса [ARVRServer]. Значение получается из внутреннего вызова [method OS.get_ticks_usec].
			</description>
		</method>
		<method name="get_reference_frame" qualifiers="const">
			<return type="Transform" />
			<description>
				Возвращает преобразование системы отсчета. В основном используется для внутренних целей и используется в интерфейсах сборки GDNative.
			</description>
		</method>
		<method name="get_tracker" qualifiers="const">
			<return type="ARVRPositionalTracker" />
			<argument index="0" name="idx" type="int" />
			<description>
				Возвращает позиционный трекер по заданному идентификатору.
			</description>
		</method>
		<method name="get_tracker_count" qualifiers="const">
			<return type="int" />
			<description>
				Возвращает количество зарегистрированных в данный момент трекеров.
			</description>
		</method>
		<method name="remove_interface">
			<return type="void" />
			<argument index="0" name="interface" type="ARVRInterface" />
			<description>
				Удаляет данный интерфейс.
			</description>
		</method>
		<method name="remove_tracker">
			<return type="void" />
			<argument index="0" name="tracker" type="ARVRPositionalTracker" />
			<description>
				Удаляет данный позиционный трекер.
			</description>
		</method>
	</methods>
	<members>
		<member name="primary_interface" type="ARVRInterface" setter="set_primary_interface" getter="get_primary_interface">
			Основной [ARVRInterface], связанный в данный момент с [ARVRServer].
		</member>
		<member name="world_scale" type="float" setter="set_world_scale" getter="get_world_scale" default="1.0">
			Позволяет настроить масштаб в соответствии с единицами измерения вашей игры. В большинстве AR/VR-платформ принят масштаб: 1 единица игрового мира = 1 метру реального мира.
		</member>
	</members>
	<signals>
		<signal name="interface_added">
			<argument index="0" name="interface_name" type="String" />
			<description>
				Выдается при добавлении нового интерфейса.
			</description>
		</signal>
		<signal name="interface_removed">
			<argument index="0" name="interface_name" type="String" />
			<description>
				Выдается при удалении интерфейса.
			</description>
		</signal>
		<signal name="tracker_added">
			<argument index="0" name="tracker_name" type="String" />
			<argument index="1" name="type" type="int" />
			<argument index="2" name="id" type="int" />
			<description>
				Выдается при добавлении нового трекера. Если вы не используете фиксированное число контроллеров или используете [ARVRAnchor]ы для AR-решения, важно отреагировать на этот сигнал, чтобы добавить соответствующие узлы [ARVRController] или [ARVRAnchor], относящиеся к этому новому трекеру.
			</description>
		</signal>
		<signal name="tracker_removed">
			<argument index="0" name="tracker_name" type="String" />
			<argument index="1" name="type" type="int" />
			<argument index="2" name="id" type="int" />
			<description>
				Выдается при удалении трекера. Необходимо удалить все точки [ARVRController] или [ARVRAnchor], если они имеются. Это не обязательно, узлы просто становятся неактивными и будут снова активны, когда появится новый трекер (т.е. включится новый контроллер, который заменит предыдущий).
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="TRACKER_CONTROLLER" value="1" enum="TrackerType">
			Трекер отслеживает местоположение контроллера.
		</constant>
		<constant name="TRACKER_BASESTATION" value="2" enum="TrackerType">
			Трекер отслеживает местоположение базовой станции.
		</constant>
		<constant name="TRACKER_ANCHOR" value="4" enum="TrackerType">
			Трекер отслеживает местоположение и размер AR-якоря.
		</constant>
		<constant name="TRACKER_ANY_KNOWN" value="127" enum="TrackerType">
			Используется для внутренней фильтрации трекеров любого известного типа.
		</constant>
		<constant name="TRACKER_UNKNOWN" value="128" enum="TrackerType">
			Используется внутренне, если мы еще не установили тип трекера.
		</constant>
		<constant name="TRACKER_ANY" value="255" enum="TrackerType">
			Используется внутри системы для выбора всех трекеров.
		</constant>
		<constant name="RESET_FULL_ROTATION" value="0" enum="RotationMode">
			Полностью сбрасывает ориентацию HMD. Независимо от того, в какую сторону смотрит пользователь в реальном мире. В виртуальном мире пользователь будет смотреть вперед.
		</constant>
		<constant name="RESET_BUT_KEEP_TILT" value="1" enum="RotationMode">
			Сбрасывает ориентацию, но сохраняет наклон устройства. Таким образом, если мы смотрим вниз, мы продолжаем смотреть вниз, но ориентация будет сброшена.
		</constant>
		<constant name="DONT_RESET_ROTATION" value="2" enum="RotationMode">
			Не сбрасывает ориентацию HMD, центрируется только положение игрока.
		</constant>
	</constants>
</class>
